using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Xamarin.Forms;

namespace HitoAppCore.DataGrid
{
    public class GridColumn : BindableObject
    {
        #region Fields
        internal const int defaultSortIndex = -1;
        internal const int singleModeSortIndex = 1;
        public static readonly BindableProperty FieldNameProperty;
        public static readonly BindableProperty CaptionProperty;
        public static readonly BindableProperty WidthProperty;
        public static readonly BindableProperty IsReadOnlyProperty;
        public static readonly BindableProperty UnboundTypeProperty;
        public static readonly BindableProperty UnboundExpressionProperty;
        public static readonly BindableProperty ContentAlignmentProperty;
        public static readonly BindableProperty MinWidthProperty;
        private static readonly BindablePropertyKey ActualWidthPropertyKey;
        public static readonly BindableProperty ActualWidthProperty;
        public static readonly BindableProperty IsGroupedProperty;
        public static readonly BindableProperty IsVisibleProperty;
        public static readonly BindableProperty SortOrderProperty;
        public static readonly BindableProperty SortModeProperty;
        public static readonly BindableProperty AllowSortProperty;
        public static readonly BindableProperty AllowGroupProperty;
        public static readonly BindableProperty DisplayFormatProperty;
        public static readonly BindableProperty SortIndexProperty;
        public static readonly BindableProperty AutoFilterConditionProperty;
        public static readonly BindableProperty AutoFilterValueProperty;
        public static readonly BindableProperty AllowAutoFilterProperty;
        public static readonly BindableProperty ColumnFilterModeProperty;
        public static readonly BindableProperty ImmediateUpdateAutoFilterProperty;
        public static readonly BindableProperty GroupIntervalProperty;
        public static readonly BindableProperty HeaderTemplateProperty;
        public static readonly BindableProperty FixedStyleProperty;
        #endregion

        #region Events
        [CompilerGenerated]
        internal event PropertyChangedEventHandler AfterPropertyChanged;
        #endregion

        #region Contructor
        static GridColumn()
        {

        }

        public GridColumn()
        {

        }
        #endregion

        #region Methods

        #endregion

        #region Properties
        protected internal bool IsAutoGenerated { get; set; }

        internal bool IsParentReadOnly { get; set; }

        public string FieldName
        {
            get => (string)base.GetValue(FieldNameProperty);
            set => base.SetValue(FieldNameProperty, value);
        }

        public string Caption
        {
            get => (string)base.GetValue(CaptionProperty);
            set => base.SetValue(CaptionProperty, value);
        }

        public string ActualCaption =>
            !string.IsNullOrEmpty(this.Caption) ? this.Caption : SplitStringHelper.SplitPascalCaseString(this.FieldName);

        public double Width
        {
            get => (double)base.GetValue(WidthProperty);
            set => base.SetValue(WidthProperty, value);
        }

        public bool IsReadOnly
        {
            get => (bool)base.GetValue(IsReadOnlyProperty);
            set => base.SetValue(IsReadOnlyProperty, value);
        }

        public UnboundColumnType UnboundType
        {
            get => (UnboundColumnType)base.GetValue(UnboundTypeProperty);
            set => base.SetValue(UnboundTypeProperty, value);
        }

        public string UnboundExpression
        {
            get => (string)base.GetValue(UnboundExpressionProperty);
            set => base.SetValue(UnboundExpressionProperty, value);
        }

        public ColumnContentAlignment ContentAlignment
        {
            get => (ColumnContentAlignment)base.GetValue(ContentAlignmentProperty);
            set => base.SetValue(ContentAlignmentProperty, value);
        }

        public double MinWidth
        {
            get => (double)base.GetValue(MinWidthProperty);
            set => base.SetValue(MinWidthProperty, value);
        }

        public double ActualWidth
        {
            get => (double)base.GetValue(ActualWidthProperty);
            protected set => base.SetValue(ActualWidthPropertyKey, value);
        }

        public bool IsGrouped
        {
            get => (bool)base.GetValue(IsGroupedProperty);
            set => base.SetValue(IsGroupedProperty, value);
        }

        public bool IsVisible
        {
            get => (bool)base.GetValue(IsVisibleProperty);
            set => base.SetValue(IsVisibleProperty, value);
        }

        public ColumnSortOrder SortOrder
        {
            get => (ColumnSortOrder)base.GetValue(SortOrderProperty);
            set => base.SetValue(SortOrderProperty, value);
        }

        public ColumnSortMode SortMode
        {
            get => (ColumnSortMode)base.GetValue(SortModeProperty);
            set => base.SetValue(SortModeProperty, value);
        }

        public DefaultBoolean AllowSort
        {
            get => (DefaultBoolean)base.GetValue(AllowSortProperty);
            set => base.SetValue(AllowSortProperty, value);
        }

        public DefaultBoolean AllowGroup
        {
            get => (DefaultBoolean)base.GetValue(AllowGroupProperty);
            set => base.SetValue(AllowGroupProperty, value);
        }

        public string DisplayFormat
        {
            get => (string)base.GetValue(DisplayFormatProperty);
            set => base.SetValue(DisplayFormatProperty, value);
        }

        public int SortIndex
        {
            get => (int)base.GetValue(SortIndexProperty);
            set => base.SetValue(SortIndexProperty, value);
        }

        public object AutoFilterValue
        {
            get => base.GetValue(AutoFilterValueProperty);
            set => base.SetValue(AutoFilterValueProperty, value);
        }

        public bool AllowAutoFilter
        {
            get => (bool)base.GetValue(AllowAutoFilterProperty);
            set => base.SetValue(AllowAutoFilterProperty, value);
        }

        public bool ImmediateUpdateAutoFilter
        {
            get => (bool)base.GetValue(ImmediateUpdateAutoFilterProperty);
            set => base.SetValue(ImmediateUpdateAutoFilterProperty, value);
        }

        public ColumnFilterMode ColumnFilterMode
        {
            get => (ColumnFilterMode)base.GetValue(ColumnFilterModeProperty);
            set => base.SetValue(ColumnFilterModeProperty, value);
        }

        public ColumnGroupInterval ColumnGroupInterval
        {
            get => (ColumnGroupInterval)base.GetValue(GroupIntervalProperty);
            set => base.SetValue(GroupIntervalProperty, value);
        }

        public DataTemplate HeaderTemplate
        {
            get => (DataTemplate)base.GetValue(HeaderTemplateProperty);
            set => base.SetValue(HeaderTemplateProperty, value);
        }

        public FixedStyle FixedStyle
        {
            get => (FixedStyle)base.GetValue(FixedStyleProperty);
            set => base.SetValue(FixedStyleProperty, value);
        }
        #endregion
    }
}
