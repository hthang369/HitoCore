// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.Core;
    using DevExpress.Data;
    using DevExpress.Data.Filtering;
    using DevExpress.Data.Filtering.Helpers;
    using DevExpress.Utils;
    using DevExpress.XamarinForms.Core;
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.Core.Themes;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using DevExpress.XamarinForms.DataGrid.Localization;
    using DevExpress.XamarinForms.DataGrid.Themes;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using System.Windows.Input;
    using Xamarin.Forms;
    using System.Linq;

    public class DataGridView : View, IDataControllerOwner, ICustomCellTextProvider, IGridControlTest, IGridDataProvider, IStyledElement
    {
        public const int InvalidRowHandle = -2147483648;
        public const double UnspecifiedHeight = -1.0;
        private int selectedRowSourceIndex = -1;
        private int updateLocker;
        private bool rebuildAfterUpdate;
        private readonly GridDataController dataController;
        private GridColumnCollection columns;
        private SwipeItemCollection startSwipeItems;
        private SwipeItemCollection endSwipeItems;
        private List<GridColumn> visibleColumns;
        private IList<GridColumn> autoGeneratedColumns;
        private DevExpress.XamarinForms.DataGrid.Internal.SortingColumnManager sortingColumnManager;
        private SelectionStrategyBase selectionStrategy;
        public static readonly BindableProperty ItemsSourceProperty;
        public static readonly BindableProperty RowHeightProperty;
        public static readonly BindableProperty SortModeProperty;
        public static readonly BindableProperty AllowCascadeUpdateProperty;
        public static readonly BindableProperty AllowCascadeTreeCreationProperty;
        public static readonly BindableProperty AutoGenerateColumnsModeProperty;
        public static readonly BindableProperty IsReadOnlyProperty;
        public static readonly BindableProperty SelectedRowHandleProperty;
        public static readonly BindableProperty SelectedDataObjectProperty;
        public static readonly BindableProperty ColumnHeaderHeightProperty;
        public static readonly BindableProperty IsColumnHeaderVisibleProperty;
        public static readonly BindableProperty ShowGroupedColumnsProperty;
        public static readonly BindableProperty IsPullToRefreshEnabledProperty;
        public static readonly BindableProperty PullToRefreshCommandProperty;
        public static readonly BindableProperty LoadMoreCommandProperty;
        public static readonly BindableProperty IsLoadMoreEnabledProperty;
        public static readonly BindableProperty IsRefreshingProperty;
        public static readonly BindableProperty IsUpdateLockedProperty;
        public static readonly BindableProperty AllowSortProperty;
        public static readonly BindableProperty AllowGroupCollapseProperty;
        public static readonly BindableProperty RowTapCommandProperty;
        public static readonly BindableProperty SelectionModeProperty;
        public static readonly BindableProperty EditorShowModeProperty;
        private static readonly BindableProperty AllowDeleteRowsProperty;
        private static readonly BindableProperty AllowResizeColumnsProperty;
        private static readonly BindableProperty AllowGroupProperty;
        [CompilerGenerated]
        private EventHandler PullToRefresh;
        [CompilerGenerated]
        private EventHandler LoadMore;
        [CompilerGenerated]
        private GridColumnDataEventHandler CustomUnboundColumnData;
        [CompilerGenerated]
        private AutoGeneratingColumnEventHandler AutoGeneratingColumn;
        [CompilerGenerated]
        private CustomizeCellEventHandler CustomizeCell;
        [CompilerGenerated]
        private CustomizeCellDisplayTextEventHandler customizeCellDisplayText;
        [CompilerGenerated]
        private CustomSummaryEventHandler CalculateCustomSummary;
        [CompilerGenerated]
        private RowEventHandler SelectionChanged;
        [CompilerGenerated]
        private RowTapEventHandler RowTap;
        [CompilerGenerated]
        private RowTapEventHandler RowDoubleTap;
        [CompilerGenerated]
        private RowTapEventHandler RowLongPress;
        [CompilerGenerated]
        private RowEditingEventHandler EndRowEdit;
        private EditRowViewModel currentEditRowViewModel;
        internal const int AutoFilterRowHandle = -999997;
        internal const double DefaultAutoFilterHeight = 44.0;
        public static readonly BindableProperty FilterStringProperty;
        private static readonly BindablePropertyKey ActualFilterStringPropertyKey;
        public static readonly BindableProperty ActualFilterStringProperty;
        internal static readonly BindableProperty IsAutoFilterPanelVisibleProperty;
        private GridFilter filter;
        private bool lockFilterStringChanged;
        public static readonly BindableProperty HeaderStyleProperty;
        public static readonly BindableProperty CellStyleProperty;
        public static readonly BindableProperty TotalSummaryStyleProperty;
        public static readonly BindableProperty GroupRowStyleProperty;
        public static readonly BindableProperty SwipeButtonStyleProperty;
        public static readonly BindableProperty FixedColumnSeparatorWidthProperty;
        public static readonly BindableProperty BorderThicknessProperty;
        public static readonly BindableProperty BorderColorProperty;
        public static readonly BindableProperty VerticalLineThicknessProperty;
        public static readonly BindableProperty IndicatorColorProperty;
        public static readonly BindableProperty TotalSummaryHeightProperty;
        public static readonly BindableProperty TotalSummaryVisibilityProperty;
        
        static DataGridView()
        {
            
            ItemsSourceProperty = GetBindableProperty<object>("ItemsSource", null, OnItemsSourceChanged);
            RowHeightProperty = GetBindableProperty<double>("RowHeight", -1.0, OnRowHeightChanged);
            SortModeProperty = GetBindableProperty<GridSortMode>("SortMode", GridSortMode.Single, OnSortModeChanged);
            AllowCascadeUpdateProperty = GetBindableProperty<bool>("AllowCascadeUpdate", true, null);
            AllowCascadeTreeCreationProperty = GetBindableProperty<bool>("AllowCascadeTreeCreation", false, null);
            AutoGenerateColumnsModeProperty = GetBindableProperty<AutoGenerateColumnsMode>("AutoGenerateColumnsMode", AutoGenerateColumnsMode.Auto, null);
            IsReadOnlyProperty = GetBindableProperty<bool>("IsReadOnly", false, OnReadOnlyChanged);
            SelectedRowHandleProperty = GetBindableProperty<int>("SelectedRowHandle", 0, OnSelectedRowHandleChanged);
            SelectedDataObjectProperty = GetBindableProperty<object>("SelectedDataObject", null, OnSelectedDataObjectChanged);
            ColumnHeaderHeightProperty = GetBindableProperty<double>("ColumnHeaderHeight", -1.0, OnColumnHeaderHeightChanged);
            IsColumnHeaderVisibleProperty = GetBindableProperty<bool>("IsColumnHeaderVisible", true, OnIsColumnHeaderVisibleChanged);
            ShowGroupedColumnsProperty = GetBindableProperty<bool>("ShowGroupedColumns", false, OnShowGroupedColumnsChanged);
            IsPullToRefreshEnabledProperty = GetBindableProperty<bool>("IsPullToRefreshEnabled", false, OnIsPullToRefreshEnabledChanged);
            PullToRefreshCommandProperty = GetBindableProperty<ICommand>("PullToRefreshCommand", null, OnPullToRefreshCommandChanged);
            LoadMoreCommandProperty = GetBindableProperty<ICommand>("LoadMoreCommand", null, OnLoadMoreCommandChanged);
            IsLoadMoreEnabledProperty = GetBindableProperty<bool>("IsLoadMoreEnabled", false, OnIsLoadMoreEnabledChanged);
            IsRefreshingProperty = GetBindableProperty<bool>("IsRefreshing", false, OnIsRefreshingChanged);
            IsUpdateLockedProperty = GetBindableProperty<bool>("IsUpdateLocked", false, OnIsUpdateLockedChanged);
            AllowSortProperty = GetBindableProperty<bool>("AllowSort", true, null);
            AllowGroupCollapseProperty = GetBindableProperty<bool>("AllowGroupCollapse", true, null);
            RowTapCommandProperty = GetBindableProperty<ICommand>("RowTapCommand", null, null);
            SelectionModeProperty = GetBindableProperty<SelectionMode>("SelectionMode", SelectionMode.Single, OnSelectionModeChanged);
            EditorShowModeProperty = GetBindableProperty<EditorShowMode>("EditorShowMode", EditorShowMode.Never, null);
            AllowDeleteRowsProperty = GetBindableProperty<bool>("AllowDeleteRows", true, null);
            AllowResizeColumnsProperty = GetBindableProperty<bool>("AllowResizeColumns", true, null);
            AllowGroupProperty = GetBindableProperty<bool>("AllowGroup", true, null);
            FilterStringProperty = GetBindableProperty<string>("FilterString", string.Empty, OnFilterStringChanged);
            ActualFilterStringPropertyKey = GetBindablePropertyKey<string>("ActualFilterString", string.Empty, null);
            ActualFilterStringProperty = ActualFilterStringPropertyKey.BindableProperty;
            IsAutoFilterPanelVisibleProperty = GetBindableProperty<bool>("IsAutoFilterPanelVisible", false, OnIsAutoFilterPanelVisibleChanged);
            HeaderStyleProperty = GetBindableProperty<HeaderStyle>("HeaderStyle", null, OnCustomStyleObjectChanged);
            CellStyleProperty = GetBindableProperty<CellStyle>("CellStyle", null, OnCustomStyleObjectChanged);
            TotalSummaryStyleProperty = GetBindableProperty<TotalSummaryStyle>("TotalSummaryStyle", null, OnCustomStyleObjectChanged);
            GroupRowStyleProperty = GetBindableProperty<GroupRowStyle>("GroupRowStyle", null, OnCustomStyleObjectChanged);
            SwipeButtonStyleProperty = GetBindableProperty<SwipeButtonStyle>("SwipeButtonStyle", null, OnCustomStyleObjectChanged);
            FixedColumnSeparatorWidthProperty = GetBindableProperty<double>("FixedColumnSeparatorWidth", -1.0, OnGridStylePropertyChanged);
            BorderThicknessProperty = GetBindableProperty<Thickness>("BorderThickness", new Thickness(0.0), OnGridStylePropertyChanged);
            BorderColorProperty = GetBindableProperty<Color>("BorderColor", Color.Default, OnGridStylePropertyChanged);
            VerticalLineThicknessProperty = GetBindableProperty<double>("VerticalLineThickness", -1.0, OnGridStylePropertyChanged);
            IndicatorColorProperty = GetBindableProperty<Color>("IndicatorColor", Color.Default, OnGridStylePropertyChanged);
            TotalSummaryHeightProperty = GetBindableProperty<double>("TotalSummaryHeight", -1.0, OnTotalSummaryHeightChanged);
            TotalSummaryVisibilityProperty = GetBindableProperty<VisibilityState>("TotalSummaryVisibility", VisibilityState.Default, OnTotalSummaryVisibilityChanged);
        }

        private static BindableProperty GetBindableProperty<TObject>(string propertyName, TObject defaultVal, BindableProperty.BindingPropertyChangedDelegate propertyDelegate)
        {
            try
            {
                ParameterExpression expression = Expression.Parameter(typeof(DataGridView), "o");
                ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
                return BindingUtils.Instance.CreateBindableProperty<DataGridView, TObject>(Expression.Lambda<Func<DataGridView, TObject>>((Expression)Expression.Property((Expression)expression, typeof(DataGridView).GetProperty(propertyName)), expressionArray1), defaultVal, BindingMode.OneWay, null, propertyDelegate, null, null, null);
            }
            catch(Exception ex)
            {

            }
            return null;
        }
        private static BindablePropertyKey GetBindablePropertyKey<TObject>(string propertyName, TObject defaultVal, BindableProperty.BindingPropertyChangedDelegate propertyDelegate)
        {
            try
            {
                ParameterExpression expression = Expression.Parameter(typeof(DataGridView), "o");
                ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
                return BindingUtils.Instance.CreateBindablePropertyReadOnly<DataGridView, TObject>(Expression.Lambda<Func<DataGridView, TObject>>((Expression)Expression.Property((Expression)expression, typeof(DataGridView).GetProperty(propertyName)), expressionArray1), defaultVal, BindingMode.OneWay, null, propertyDelegate, null);
            }
            catch (Exception ex)
            {

            }
            return null;
        }

        public DataGridView()
        {
            this.IsLoaded = false;
            this.UpdateSelectionStrategy();
            this.dataController = new GridDataController();
            this.dataController.SelectionChanged += new EventHandler(this.OnDataControllerSelectionChanged);
            this.dataController.DataChanged += new GridDataControllerDataChangedEventHandler(this.OnDataControllerDataChanged);
            this.dataController.CalculateCustomSummary += new CustomSummaryEventHandler(this.OnDataControllerCalculateCustomSummary);
            this.dataController.GroupRowCollapsing += new RowAllowEventHandler(this.OnDataControllerGroupRowCollapsing);
            this.dataController.GroupRowCollapsed += new RowEventHandler(this.OnDataControllerGroupRowCollapsed);
            this.dataController.GroupRowExpanding += new RowAllowEventHandler(this.OnDataControllerGroupRowExpanding);
            this.dataController.GroupRowExpanded += new RowEventHandler(this.OnDataControllerGroupRowExpanded);
            this.SortingColumnManager = Internal.SortingColumnManager.Create(this.Columns, this.dataController, this.SortMode, this.IsLoaded);
            this.InitFiltering();
            this.InitSummaries();
            this.InitStyles();
            ThemeLoader.Instance.LoadTheme();
        }
        
        private void AppendAutoGeneratedColumns()
        {
            if (this.autoGeneratedColumns == null)
            {
                this.autoGeneratedColumns = this.dataController.GenerateColumns();
                if (this.autoGeneratedColumns == null)
                {
                    this.autoGeneratedColumns = (IList<GridColumn>) new List<GridColumn>();
                }
                else
                {
                    int num = this.autoGeneratedColumns.Count;
                    for (int i = 0; i < num; i++)
                    {
                        GridColumn gridColumn = this.autoGeneratedColumns.ElementAt(i);
                        if ((this.Columns[gridColumn.FieldName] == null) && this.RaiseAutoGeneratingColumn(gridColumn))
                        {
                            this.Columns.Add(gridColumn);
                        }
                    }
                }
            }
        }
        
        internal void ApplyEditorResults(EditRowViewModel editRowViewModel)
        {
            try
            {
                IEditableRowData data = null;
                int rowHandle = editRowViewModel.RowData.RowHandle;
                if (!(editRowViewModel.RowData is IEditableRowData))
                {
                    data = this.dataController.BeginEditRow(rowHandle);
                    if (data == null)
                    {
                        return;
                    }
                }
                foreach (string str in editRowViewModel.Values.Keys)
                {
                    if (!this.Columns.GetColumnByFieldName(str).ActualIsReadOnly)
                    {
                        object obj2 = editRowViewModel.Values[str];
                        try
                        {
                            data.SetFieldValue(str, obj2);
                        }
                        catch
                        {
                        }
                    }
                }
                this.dataController.EndEditRow(data);
            }
            catch
            {
            }
        }
        
        private void AttachDataSource(object newDataSource)
        {
            this.UnsubscribeDataSourceEvents();
            if (newDataSource == null)
            {
                this.dataController.DataSource = null;
            }
            else
            {
                IGridDataSource dataSource = this.TryCreateDataSource(newDataSource);
                if (this.HasUnboundFields())
                {
                    UnboundColumnsDataSource source2 = new UnboundColumnsDataSource(dataSource);
                    source2.UpdateUnboundFields(this.Columns);
                    this.SubscribeDataSourceEventsCore(source2);
                    dataSource = source2;
                }
                this.dataController.DataSource = dataSource;
            }
            this.SubscribeDataSourceEvents();
        }
        
        public void BeginUpdate()
        {
            if (this.updateLocker < 0)
            {
                this.updateLocker = 0;
            }
            this.updateLocker++;
        }
        
        internal virtual bool CanGroupByColumn(GridColumn groupingColumn) => 
            ((this.VisibleColumns.Count != 1) || (this.VisibleColumns.ElementAt(0) != groupingColumn));
        
        internal bool CanLoadMoreExecute()
        {
            if (!this.IsLoadMoreEnabled || (this.LoadMoreCommand != null))
            {
                return (this.IsLoadMoreEnabled && ((this.LoadMoreCommand != null) && this.LoadMoreCommand.CanExecute(null)));
            }
            return true;
        }
        
        internal bool CanPullToRefreshExecute()
        {
            if (!this.IsPullToRefreshEnabled || (this.PullToRefreshCommand != null))
            {
                return (this.IsPullToRefreshEnabled && ((this.PullToRefreshCommand != null) && this.PullToRefreshCommand.CanExecute(null)));
            }
            return true;
        }
        
        internal void CellDoubleTap(int rowVisibleIndex, int columnIndex)
        {
            if (((rowVisibleIndex >= 0) && (columnIndex >= 0)) && (this.VisibleColumns.Count > columnIndex))
            {
                string fieldName = this.VisibleColumns.ElementAt(columnIndex).FieldName;
                int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(rowVisibleIndex);
                this.CloseEditorByTapOutsideCell(rowHandleByVisibleIndex, fieldName);
                CellIndex cellIndex = new CellIndex(rowHandleByVisibleIndex, fieldName) {
                    ColumnIndex = columnIndex
                };
                if (!cellIndex.Equals(CellIndex.InvalidIndex))
                {
                    this.RaiseRowDoubleTap(cellIndex);
                    if ((this.currentEditRowViewModel == null) && (this.EditorShowMode == DevExpress.XamarinForms.DataGrid.EditorShowMode.DoubleTap))
                    {
                        this.OpenEditor(cellIndex);
                    }
                }
            }
        }
        
        internal void CellLongPress(int rowVisibleIndex, int columnIndex)
        {
            if (((rowVisibleIndex >= 0) && (columnIndex >= 0)) && (this.VisibleColumns.Count > columnIndex))
            {
                string fieldName = this.VisibleColumns.ElementAt(columnIndex).FieldName;
                int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(rowVisibleIndex);
                this.CloseEditorByTapOutsideCell(rowHandleByVisibleIndex, fieldName);
                this.RaiseRowLongPress(rowHandleByVisibleIndex, fieldName);
            }
        }
        
        internal void CellTap(int rowVisibleIndex, int columnIndex)
        {
            if (((rowVisibleIndex >= 0) && (columnIndex >= 0)) && (this.VisibleColumns.Count > columnIndex))
            {
                string fieldName = this.VisibleColumns.ElementAt(columnIndex).FieldName;
                int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(rowVisibleIndex);
                int selectedRowHandle = this.SelectedRowHandle;
                CellIndex cellIndex = new CellIndex(rowHandleByVisibleIndex, fieldName) {
                    ColumnIndex = columnIndex
                };
                this.selectionStrategy.SetSelectedRowHandle(rowHandleByVisibleIndex);
                if (this.RowTapCommand != null)
                {
                    int sourceRowIndex = this.GetSourceRowIndex(rowHandleByVisibleIndex);
                    if (this.RowTapCommand.CanExecute((int) sourceRowIndex))
                    {
                        this.RowTapCommand.Execute((int) sourceRowIndex);
                    }
                }
                this.RaiseRowTap(rowHandleByVisibleIndex, fieldName);
                if ((!this.CloseEditorByTapOutsideCell(rowHandleByVisibleIndex, fieldName) && (this.currentEditRowViewModel == null)) && ((this.EditorShowMode == DevExpress.XamarinForms.DataGrid.EditorShowMode.Tap) || ((this.EditorShowMode == DevExpress.XamarinForms.DataGrid.EditorShowMode.TapSelectedRow) && (selectedRowHandle == rowHandleByVisibleIndex))))
                {
                    this.OpenEditor(cellIndex);
                }
            }
        }
        
        private void ChangeColumnSorting(string fieldName)
        {
            GridColumn column = this.Columns[fieldName];
            if (this.GetActualColumnAllowSort(column))
            {
                if (column.SortOrder == ColumnSortOrder.None)
                {
                    column.SortOrder = ColumnSortOrder.Ascending;
                }
                else if (column.SortOrder == ColumnSortOrder.Ascending)
                {
                    column.SortOrder = ColumnSortOrder.Descending;
                }
                else
                {
                    column.SortOrder = ColumnSortOrder.None;
                }
            }
        }
        
        public void ClearFilter()
        {
            this.filter.ClearFilter();
        }
        
        public void ClearGrouping()
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    enumerator.Current.IsGrouped = false;
                }
            }
        }
        
        public void ClearSorting()
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    enumerator.Current.SortOrder = ColumnSortOrder.None;
                }
            }
        }
        
        public void CloseEditor(bool applyChanges)
        {
            if (this.currentEditRowViewModel != null)
            {
                this.UnsubscribeEditFormValuesChangeEvent();
                int sourceRowIndex = this.GetSourceRowIndex(this.currentEditRowViewModel.RowData.RowHandle);
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.CloseInplaceEditor(applyChanges);
                }
                int rowHandle = this.GetRowHandle(sourceRowIndex);
                if (this.currentEditRowViewModel != null)
                {
                    this.RaiseEndRowEdit(rowHandle, applyChanges ? EditingRowAction.Apply : EditingRowAction.Cancel);
                    this.currentEditRowViewModel = null;
                }
            }
        }
        
        private bool CloseEditorByTapOutsideCell(int rowHandle, string fieldName)
        {
            if ((this.currentEditRowViewModel == null) || ((this.currentEditRowViewModel.CellIndex.FieldName == fieldName) && (this.currentEditRowViewModel.CellIndex.RowHandle == rowHandle)))
            {
                return false;
            }
            this.CloseEditor(true);
            return true;
        }
        
        public void CollapseAllGroups()
        {
            if (this.AllowGroupCollapse)
            {
                this.dataController.CollapseAllGroups();
                this.UpdateRowsInNative();
            }
        }
        
        public void CollapseGroupRow(int rowHandle)
        {
            if (this.AllowGroupCollapse)
            {
                this.dataController.CollapseGroup(rowHandle);
                this.UpdateRowsInNative();
            }
        }
        
        private void CopyCellStyleSetProperties(DevExpress.XamarinForms.DataGrid.CellStyle from, DevExpress.XamarinForms.DataGrid.CellStyle to)
        {
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.CellStyle.SelectionColorProperty))
            {
                to.SelectionColor = from.SelectionColor;
            }
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.CellStyle.SelectionFontColorProperty))
            {
                to.SelectionFontColor = from.SelectionFontColor;
            }
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.CellStyle.ImagePaddingProperty))
            {
                to.ImagePadding = from.ImagePadding;
            }
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.CellStyle.SwitchPaddingProperty))
            {
                to.SwitchPadding = from.SwitchPadding;
            }
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.CellStyle.CheckboxColorProperty))
            {
                to.CheckboxColor = from.CheckboxColor;
            }
        }
        
        private void CopyStyleBaseSetProperties(StyleBase from, StyleBase to)
        {
            if (from.IsSet(StyleBase.BackgroundColorProperty))
            {
                to.BackgroundColor = from.BackgroundColor;
            }
            if (from.IsSet(StyleBase.BorderColorProperty))
            {
                to.BorderColor = from.BorderColor;
            }
            if (from.IsSet(StyleBase.FontColorProperty))
            {
                to.FontColor = from.FontColor;
            }
            if (from.IsSet(StyleBase.FontSizeProperty))
            {
                to.FontSize = from.FontSize;
            }
            if (from.IsSet(StyleBase.FontFamilyProperty))
            {
                to.FontFamily = from.FontFamily;
            }
            if (from.IsSet(StyleBase.FontAttributesProperty))
            {
                to.FontAttributes = from.FontAttributes;
            }
            if (from.IsSet(StyleBase.HorizontalLineThicknessProperty))
            {
                to.HorizontalLineThickness = from.HorizontalLineThickness;
            }
            if (from.IsSet(StyleBase.PaddingProperty))
            {
                to.Padding = from.Padding;
            }
        }
        
        private void CopySwipeButtonStyleSetProperties(DevExpress.XamarinForms.DataGrid.SwipeButtonStyle from, DevExpress.XamarinForms.DataGrid.SwipeButtonStyle to)
        {
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.SwipeButtonStyle.WidthProperty))
            {
                to.Width = from.Width;
            }
            if (from.IsSet(DevExpress.XamarinForms.DataGrid.SwipeButtonStyle.ContentAlignmentProperty))
            {
                to.ContentAlignment = from.ContentAlignment;
            }
        }
        
        private GridColumnCollection CreateColumns() => 
            new GridColumnCollection();
        
        private RowTapEventArgs CreateRowTapEventArgs(int rowHandle, string fieldName)
        {
            IRowData row = this.GetRow(rowHandle);
            return new RowTapEventArgs(rowHandle, fieldName, row?.DataObject);
        }
        
        public void DeleteRow(int rowHandle)
        {
            this.dataController.DeleteRow(rowHandle);
        }
        
        string ICustomCellTextProvider.Customize(object value, string formattedText, int rowHandle, string fieldName)
        {
            if (!((ICustomCellTextProvider) this).CanCustomize)
            {
                return formattedText;
            }
            CustomizeCellDisplayTextEventArgs args = new CustomizeCellDisplayTextEventArgs {
                DisplayText = formattedText,
                Index = new CellIndex(rowHandle, fieldName),
                Value = value
            };
            this.RaiseCustomizeCellDisplayText(args);
            return args.DisplayText;
        }
        
        void IGridControlTest.CellDoubleTap(int rowVisibleIndex, int columnIndex)
        {
            this.CellDoubleTap(rowVisibleIndex, columnIndex);
        }
        
        void IGridControlTest.CellLongTap(int rowVisibleIndex, int columnIndex)
        {
            this.CellLongPress(rowVisibleIndex, columnIndex);
        }
        
        void IGridControlTest.CellTap(int rowVisibleIndex, int columnIndex)
        {
            this.CellTap(rowVisibleIndex, columnIndex);
        }
        
        void IGridControlTest.ChangeColumnSorting(string fieldName)
        {
            this.ChangeColumnSorting(fieldName);
        }
        
        DevExpress.XamarinForms.DataGrid.CellStyle IGridControlTest.GetActualCellStyle() => 
            this.GetActualCellStyle();
        
        DevExpress.XamarinForms.DataGrid.GroupRowStyle IGridControlTest.GetActualGroupRowStyle() => 
            this.GetActualGroupRowStyle();
        
        DevExpress.XamarinForms.DataGrid.HeaderStyle IGridControlTest.GetActualHeaderStyle() => 
            this.GetActualHeaderStyle();
        
        DevExpress.XamarinForms.DataGrid.SwipeButtonStyle IGridControlTest.GetActualSwipeButtonStyle() => 
            this.GetActualSwipeButtonStyle();
        
        DevExpress.XamarinForms.DataGrid.TotalSummaryStyle IGridControlTest.GetActualTotalSummaryStyle() => 
            this.GetActualTotalSummaryStyle();
        
        string IGridDataProvider.GetCellDisplayText(string fieldName, int visibleIndex)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            return this.GetCellDisplayText(rowHandleByVisibleIndex, fieldName);
        }
        
        object IGridDataProvider.GetCellValue(string fieldName, int visibleIndex) => 
            this.GetCellValue(this.GetRowHandleByVisibleIndex(visibleIndex), fieldName);
        
        Type IGridDataProvider.GetColumnType(string fieldName)
        {
            GridColumn column = this.Columns[fieldName];
            return ((column == null) ? typeof(object) : column.GetPreferredDataType());
        }
        
        string IGridDataProvider.GetDisplayText(object value, string fieldName, int visibleIndex)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            return this.GetDisplayText(value, rowHandleByVisibleIndex, fieldName);
        }
        
        GroupRowData IGridDataProvider.GetGroupRowData(int visibleIndex)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            if (rowHandleByVisibleIndex == -2147483648)
            {
                return null;
            }
            IGroupInfo groupInfo = this.dataController.GetGroupInfo(rowHandleByVisibleIndex);
            if (groupInfo == null)
            {
                return null;
            }
            string str = string.Empty;
            for (int i = 0; i < groupInfo.Summaries.Count; i++)
            {
                GridColumnSummary summary = groupInfo.Summaries.ElementAt(i);
                object summaryValue = null;
                try
                {
                    summaryValue = summary.GetSummaryValue();
                    if (summaryValue != null)
                    {
                        str = str + DisplayTextHelper.Instance.GetGroupSummaryString(this.GetDisplayFormatByFieldName(summary.FieldName), summary, summaryValue, this.GetCaptionByFieldName(summary.FieldName));
                        if (i != (groupInfo.Summaries.Count - 1))
                        {
                            str = str + "; ";
                        }
                    }
                }
                catch
                {
                    str = "";
                }
            }
            return ((groupInfo != null) ? new GroupRowData(this.GetGroupRowHeader(groupInfo), str, groupInfo.IsCollapsed) : null);
        }
        
        string[] IGridDataProvider.GetTotalSummary(int columnVisibleIndex)
        {
            List<string> list = new List<string>();
            if ((columnVisibleIndex >= 0) && (this.VisibleColumns.Count > columnVisibleIndex))
            {
                List<GridColumnSummary> totalSummaryForColumn = this.GetTotalSummaryForColumn(columnVisibleIndex);
                if ((totalSummaryForColumn == null) || (totalSummaryForColumn.Count == 0))
                {
                    return list.ToArray();
                }
                foreach (GridColumnSummary summary in totalSummaryForColumn)
                {
                    object summaryValue = summary.GetSummaryValue();
                    list.Add(DisplayTextHelper.Instance.GetTotalSummaryString(this.VisibleColumns.ElementAt(columnVisibleIndex).DisplayFormat, summary, summaryValue));
                }
            }
            return list.ToArray();
        }
        
        bool IGridDataProvider.IsGroupRow(int visibleIndex)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            return ((rowHandleByVisibleIndex != -2147483648) && (rowHandleByVisibleIndex < 0));
        }
        
        void IGridDataProvider.SetCellValue(string fieldName, int visibleIndex, object value)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            this.SetCellValue(rowHandleByVisibleIndex, fieldName, value);
        }
        
        void IStyledElement.OnCellStyleChanged()
        {
            this.UpdateNativeAppearance();
        }
        
        void IStyledElement.OnGroupRowStyleChanged()
        {
            this.UpdateNativeAppearance();
        }
        
        void IStyledElement.OnHeaderStyleChanged()
        {
            this.UpdateNativeAppearance();
        }
        
        void IStyledElement.OnSwipeButtonStyleChanged()
        {
            this.UpdateNativeAppearance();
        }
        
        void IStyledElement.OnTotalSummaryStyleChanged()
        {
            this.UpdateNativeAppearance();
        }
        
        public void EndUpdate()
        {
            this.updateLocker--;
            if (this.updateLocker < 0)
            {
                this.updateLocker = 0;
            }
            this.EndUpdateCore();
        }
        
        private void EndUpdateCore()
        {
            if (!this.IsLocked(false))
            {
                if (this.rebuildAfterUpdate)
                {
                    this.rebuildAfterUpdate = false;
                    IGridView gridView = this.GridView;
                    if (gridView == null)
                    {
                        IGridView local1 = gridView;
                    }
                    else
                    {
                        gridView.Rebuild(this);
                    }
                }
                else
                {
                    this.UpdateRowsInNative();
                    IGridView gridView = this.GridView;
                    if (gridView == null)
                    {
                        IGridView local2 = gridView;
                    }
                    else
                    {
                        gridView.UpdateTotalSummaries();
                    }
                }
            }
        }
        
        public void ExpandAllGroups()
        {
            if (this.AllowGroupCollapse)
            {
                this.dataController.ExpandAllGroups();
                this.UpdateRowsInNative();
            }
        }
        
        public void ExpandGroupRow(int rowHandle)
        {
            if (this.AllowGroupCollapse)
            {
                this.dataController.ExpandGroup(rowHandle);
                this.UpdateRowsInNative();
            }
        }
        
        public int FindRow(Predicate<IRowData> predicate) => 
            this.dataController.FindRow(predicate);
        
        internal int FindRowByDataObject(object dataObject)
        {
            Predicate<IRowData> predicate = delegate (IRowData row) {
                return object.Equals(row.DataObject, dataObject);
            };
            return this.FindRow(predicate);
        }
        
        public int FindRowByValue(string fieldName, object value)
        {
            Predicate<IRowData> predicate = delegate (IRowData row) {
                return object.Equals(row.GetFieldValue(fieldName), value);
            };
            return this.FindRow(predicate);
        }
        
        internal DevExpress.XamarinForms.DataGrid.CellStyle GetActualCellStyle()
        {
            DevExpress.XamarinForms.DataGrid.CellStyle to = this.CellStyleInternal.Clone() as DevExpress.XamarinForms.DataGrid.CellStyle;
            if ((to != null) && (this.CellStyle != null))
            {
                this.CopyStyleBaseSetProperties(this.CellStyle, to);
                this.CopyCellStyleSetProperties(this.CellStyle, to);
            }
            return to;
        }
        
        private bool GetActualColumnAllowSort(GridColumn column) => 
            ((column.AllowSort != DefaultBoolean.Default) ? column.AllowSort.Value() : this.AllowSort);
        
        internal DevExpress.XamarinForms.DataGrid.GroupRowStyle GetActualGroupRowStyle()
        {
            DevExpress.XamarinForms.DataGrid.GroupRowStyle to = this.GroupRowStyleInternal.Clone() as DevExpress.XamarinForms.DataGrid.GroupRowStyle;
            if ((to != null) && (this.GroupRowStyle != null))
            {
                this.CopyStyleBaseSetProperties(this.GroupRowStyle, to);
            }
            return to;
        }
        
        internal DevExpress.XamarinForms.DataGrid.HeaderStyle GetActualHeaderStyle()
        {
            DevExpress.XamarinForms.DataGrid.HeaderStyle to = this.HeaderStyleInternal.Clone() as DevExpress.XamarinForms.DataGrid.HeaderStyle;
            if ((to != null) && (this.HeaderStyle != null))
            {
                this.CopyStyleBaseSetProperties(this.HeaderStyle, to);
            }
            return to;
        }
        
        internal DevExpress.XamarinForms.DataGrid.SwipeButtonStyle GetActualSwipeButtonStyle()
        {
            DevExpress.XamarinForms.DataGrid.SwipeButtonStyle to = this.SwipeButtonStyleInternal.Clone() as DevExpress.XamarinForms.DataGrid.SwipeButtonStyle;
            if ((to != null) && (this.SwipeButtonStyle != null))
            {
                this.CopyStyleBaseSetProperties(this.SwipeButtonStyle, to);
                this.CopySwipeButtonStyleSetProperties(this.SwipeButtonStyle, to);
            }
            return to;
        }
        
        internal DevExpress.XamarinForms.DataGrid.TotalSummaryStyle GetActualTotalSummaryStyle()
        {
            DevExpress.XamarinForms.DataGrid.TotalSummaryStyle to = this.TotalSummaryStyleInternal.Clone() as DevExpress.XamarinForms.DataGrid.TotalSummaryStyle;
            if ((to != null) && (this.TotalSummaryStyle != null))
            {
                this.CopyStyleBaseSetProperties(this.TotalSummaryStyle, to);
            }
            return to;
        }
        
        private string GetCaptionByFieldName(string fieldName)
        {
            using (List<GridColumn>.Enumerator enumerator = this.visibleColumns.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    GridColumn current = enumerator.Current;
                    if (current.FieldName == fieldName)
                    {
                        return current.Caption;
                    }
                }
            }
            return string.Empty;
        }
        
        public string GetCellDisplayText(int rowHandle, GridColumn column) => 
            this.GetCellDisplayText(rowHandle, column.FieldName);
        
        public string GetCellDisplayText(int rowHandle, string fieldName)
        {
            object cellValue = this.GetCellValue(rowHandle, fieldName);
            return this.GetDisplayText(cellValue, rowHandle, fieldName);
        }
        
        public object GetCellValue(int rowHandle, GridColumn column) => 
            this.GetCellValue(rowHandle, column.FieldName);
        
        public object GetCellValue(int rowHandle, string fieldName)
        {
            IRowData row = this.dataController.GetRow(rowHandle, null);
            if (row != null)
            {
                return row.GetFieldValue(fieldName);
            }
            IRowData local1 = row;
            return null;
        }
        
        private string GetDisplayFormatByFieldName(string fieldName)
        {
            using (List<GridColumn>.Enumerator enumerator = this.visibleColumns.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    GridColumn current = enumerator.Current;
                    if (current.FieldName == fieldName)
                    {
                        return current.DisplayFormat;
                    }
                }
            }
            return string.Empty;
        }
        
        public string GetDisplayText(object value, int rowHandle, string fieldName)
        {
            try
            {
                GridColumn column = this.Columns[fieldName];
                if (column is PickerColumn)
                {
                    string actualDisplayText = (column as PickerColumn).GetActualDisplayText(value);
                    value = actualDisplayText;
                }
                else if (column is TextColumn)
                {
                    object obj1 = CustomizeCellTextHelper.Format(value, column.DisplayFormat, rowHandle, fieldName, this);
                    value = obj1;
                }
                return ((value != null) ? Convert.ToString(value) : string.Empty);
            }
            catch
            {
                return (string) (value as string);
            }
        }
        
        internal EditRowViewModel GetEditRowViewModel(CellIndex cellIndex, bool inplaceEditor)
        {
            IRowData row = this.dataController.GetRow(cellIndex.RowHandle, null);
            if (row == null)
            {
                return null;
            }
            EditRowViewModel model = new EditRowViewModel(this.dataController, this) {
                CellIndex = cellIndex
            };
            if (!inplaceEditor)
            {
                model.SubscribeDataControllerEvents();
                foreach (GridColumn column in this.Columns)
                {
                    if (!(column is TemplateColumn))
                    {
                        model.Values[column.FieldName] = row.GetFieldValue(column.FieldName);
                        model.ColumnReadOnly[column.FieldName] = column.ActualIsReadOnly;
                    }
                }
            }
            model.RowData = row;
            return model;
        }
        
        public IGroupInfo GetGroup(int groupRowHandle) => 
            this.dataController.GetGroupInfo(groupRowHandle);
        
        public string GetGroupRowHeader(IGroupInfo groupInfo)
        {
            GridColumn column = this.Columns[groupInfo.FieldName];
            string str = (column != null) ? column.ActualCaption : string.Empty;
            string displayFormat = (column != null) ? column.DisplayFormat : string.Empty;
            return string.Format(string.IsNullOrEmpty(column.GroupValueDisplayFormat) ? GridLocalizer.GetString(GridStringId.GroupCaptionDisplayFormat) : column.GroupValueDisplayFormat, str, DisplayTextHelper.Instance.GetDisplayText(displayFormat, groupInfo.Value));
        }
        
        public object GetGroupRowValue(int rowHandle) => 
            this.dataController.GetGroupValue(rowHandle);
        
        public IRowData GetRow(int rowHandle) => 
            this.dataController.GetRow(rowHandle, null);
        
        public int GetRowHandle(int sourceRowIndex) => 
            this.dataController.GetRowHandle(sourceRowIndex);
        
        internal int GetRowHandleByVisibleIndex(int visibleIndex) => 
            VisibleIndexHelper.GetRowHandleByVisibleIndex(visibleIndex, this.dataController);
        
        public int GetSourceRowIndex(int rowHandle) => 
            this.dataController.GetSourceRowIndex(rowHandle);
        
        private List<GridColumnSummary> GetTotalSummaryForColumn(int columnIndex)
        {
            List<GridColumnSummary> list = new List<GridColumnSummary>();
            if (((this.TotalSummaries != null) && (this.VisibleColumns.Count > columnIndex)) && (columnIndex >= 0))
            {
                string fieldName = this.VisibleColumns.ElementAt(columnIndex).FieldName;
                foreach (GridColumnSummary summary in this.TotalSummaries)
                {
                    if (summary.FieldName == fieldName)
                    {
                        list.Add(summary);
                    }
                }
            }
            return list;
        }
        
        private bool GetUpdatePanel(InternalCollectionChangedEventArgs e)
        {
            if (((e.OldItems == null) || (e.OldItems.Count <= 0)) || (this.TotalSummaries.Count != 0))
            {
                return ((e.NewItems != null) && (e.NewItems.Count == this.TotalSummaries.Count));
            }
            return true;
        }
        
        private int GetVisibleColumnIndex(string fieldName)
        {
            for (int i = 0; i < this.VisibleColumns.Count; i++)
            {
                if (fieldName == this.VisibleColumns.ElementAt(i).FieldName)
                {
                    return i;
                }
            }
            return -1;
        }
        
        internal int GetVisibleIndexByRowHandle(int rowHandle) => 
            VisibleIndexHelper.GetVisibleIndexByRowHandle(rowHandle, this.dataController);
        
        public void GroupBy(GridColumn column)
        {
            if ((column != null) && this.CanGroupByColumn(column))
            {
                column.IsGrouped = true;
            }
        }
        
        public void GroupBy(string fieldName)
        {
            this.GroupBy(this.Columns[fieldName]);
        }
        
        private void GroupSummaryItem_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "SummaryValue")
            {
                this.UpdateGroupSummaries();
            }
        }
        
        private bool HasUnboundFields()
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    if (enumerator.Current.IsUnbound)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
        
        private void InitFiltering()
        {
            this.filter = new GridFilter(this.Columns);
            this.SubscribeFilterEvents();
        }
        
        private void InitStyles()
        {
            DevExpress.XamarinForms.DataGrid.HeaderStyle style1 = new DevExpress.XamarinForms.DataGrid.HeaderStyle(this);
            style1.Parent = this;
            this.HeaderStyleInternal = style1;
            DevExpress.XamarinForms.DataGrid.CellStyle style2 = new DevExpress.XamarinForms.DataGrid.CellStyle(this);
            style2.Parent = this;
            this.CellStyleInternal = style2;
            DevExpress.XamarinForms.DataGrid.TotalSummaryStyle style3 = new DevExpress.XamarinForms.DataGrid.TotalSummaryStyle(this);
            style3.Parent = this;
            this.TotalSummaryStyleInternal = style3;
            DevExpress.XamarinForms.DataGrid.GroupRowStyle style4 = new DevExpress.XamarinForms.DataGrid.GroupRowStyle(this);
            style4.Parent = this;
            this.GroupRowStyleInternal = style4;
            DevExpress.XamarinForms.DataGrid.SwipeButtonStyle style5 = new DevExpress.XamarinForms.DataGrid.SwipeButtonStyle(this);
            style5.Parent = this;
            this.SwipeButtonStyleInternal = style5;
            ThemeManager.ThemeUpdated += new EventHandler(this.ThemeManager_ThemeUpdated);
        }
        
        private void InitSummaries()
        {
            this.TotalSummaries = new SummaryCollection();
            this.TotalSummaries.InternalCollectionChanged += new InternalCollectionChangedEventHandler(this.OnTotalSummariesCollectionChanged);
            this.GroupSummaries = new SummaryCollection();
            this.GroupSummaries.InternalCollectionChanged += new InternalCollectionChangedEventHandler(this.OnGroupSummariesCollectionChanged);
        }
        
        private bool IsColumnVisibleInHeaders(GridColumn column) => 
            (!column.IsGrouped || this.ShowGroupedColumns);
        
        private bool IsLocked(bool rebuildAction = false)
        {
            if ((this.updateLocker <= 0) && !this.IsUpdateLocked)
            {
                return false;
            }
            if (rebuildAction)
            {
                this.rebuildAfterUpdate = true;
            }
            return true;
        }
        
        private void LoadMoreCommandCanExecuteChanged(object sender, EventArgs e)
        {
            this.UpdeateLoadMoreInNative();
        }
        
        private void OnAutoFilterPanelVisibilityChanged(bool oldValue, bool newValue)
        {
        }
        
        private static void OnColumnHeaderHeightChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).UpdateColumnHeaderSettings();
        }
        
        private void OnColumnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (GridColumn.IsPropertyAffectsUnboundFields(e.PropertyName))
            {
                this.UpdateUnboundFields();
            }
            if (e.PropertyName == GridColumn.IsVisibleProperty.PropertyName)
            {
                this.UpdateVisibleColumns(false);
                this.UpdateUnboundFields();
            }
            if (e.PropertyName == GridColumn.WidthProperty.PropertyName)
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.Rebuild(this);
                }
            }
            if (e.PropertyName == GridColumn.FixedStyleProperty.PropertyName)
            {
                this.UpdateVisibleColumns(true);
            }
            if (e.PropertyName == GridColumn.GroupValueDisplayFormatProperty.PropertyName)
            {
                GridColumn column = sender as GridColumn;
                if ((column != null) && column.IsGrouped)
                {
                    IGridView gridView = this.GridView;
                    if (gridView == null)
                    {
                        IGridView local2 = gridView;
                    }
                    else
                    {
                        gridView.UpdateRows();
                    }
                }
            }
        }
        
        private void OnColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GridColumn column1 in e.NewItems)
                {
                    column1.BindingContext = base.BindingContext;
                    column1.IsParentReadOnly = this.IsReadOnly;
                    column1.CustomCellTextProvider = this;
                }
            }
            this.UpdateVisibleColumns(false);
        }
        
        private void OnCreateUnboundFieldFunction(object sender, CreateUnboundFieldFunctionEventArgs e)
        {
            GridColumn column = this.columns[e.FieldName];
            if (column != null)
            {
                e.Function = column.CreateUnboundFieldFunction();
                if (e.Function == null)
                {
                    e.Function = delegate (IRowData row) {
                        return this.RaiseGetCustomUnboundColumnData(row, column);
                    };
                }
            }
        }
        
        private void OnCreateUnboundFieldSetter(object sender, CreateUnboundFieldFunctionEventArgs e)
        {
            GridColumn column = this.columns[e.FieldName];
            if (column != null)
            {
                e.Setter = delegate (IRowData row, object value) {
                    this.RaiseSetCustomUnboundColumnData(row, column, value);
                };
            }
        }
        
        private static void OnCustomStyleObjectChanged(BindableObject obj, object oldValue, object newValue)
        {
            StyleBase base2 = newValue as StyleBase;
            DataGridView view = obj as DataGridView;
            if ((base2 != null) && (view != null))
            {
                if (base2.StyledElement == null)
                {
                    base2.StyledElement = view;
                }
                view.UpdateNativeAppearance();
            }
        }
        
        private void OnDataControllerCalculateCustomSummary(object sender, CustomSummaryEventArgs e)
        {
            if (this.CalculateCustomSummary == null)
            {
                CustomSummaryEventHandler calculateCustomSummary = this.CalculateCustomSummary;
            }
            else
            {
                this.CalculateCustomSummary(this, e);
            }
        }
        
        private void OnDataControllerDataChanged(object sender, GridDataControllerDataChangedEventArgs args)
        {
            if (args.ChangeType == GridDataControllerDataChangedType.GroupingChanged)
            {
                this.UpdateVisibleColumns(true);
            }
            else if (args.ChangeType != GridDataControllerDataChangedType.SortingChanged)
            {
                if (!this.IsLocked(false))
                {
                    this.UpdateRowsInNative();
                }
            }
            else if (!this.IsLocked(false))
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.UpdateHeaders(this);
                }
                this.UpdateRowsInNative();
            }
        }
        
        private void OnDataControllerGroupRowCollapsed(object sender, RowEventArgs e)
        {
        }
        
        private void OnDataControllerGroupRowCollapsing(object sender, RowAllowEventArgs e)
        {
        }
        
        private void OnDataControllerGroupRowExpanded(object sender, RowEventArgs e)
        {
        }
        
        private void OnDataControllerGroupRowExpanding(object sender, RowAllowEventArgs e)
        {
        }
        
        private void OnDataControllerSelectionChanged(object sender, EventArgs e)
        {
            this.IsLocked(false);
        }
        
        private void OnFilterPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            CriteriaOperator actualFilterExpression = this.filter.ActualFilterExpression;
            if (e.PropertyName != "IsActive")
            {
                this.lockFilterStringChanged = true;
                try
                {
                    if (object.Equals(actualFilterExpression, null))
                    {
                        this.ActualFilterString = string.Empty;
                        this.FilterString = string.Empty;
                    }
                    else
                    {
                        this.ActualFilterString = actualFilterExpression.ToString();
                        this.FilterString = object.Equals(this.filter.FilterExpression, null) ? string.Empty : this.filter.FilterExpression.ToString();
                    }
                }
                finally
                {
                    this.lockFilterStringChanged = false;
                }
            }
            this.UpdateFilter(actualFilterExpression, this.filter.IsActive);
        }
        
        private void OnFilterStringChanged(string oldValue, string newValue)
        {
            if (!this.lockFilterStringChanged)
            {
                this.lockFilterStringChanged = true;
                try
                {
                    OperandValue[] valueArray;
                    this.FilterExpression = CriteriaParser.Parse(this.FilterString, out valueArray);
                }
                finally
                {
                    this.lockFilterStringChanged = false;
                }
            }
        }
        
        private static void OnFilterStringChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnFilterStringChanged((string) ((string) oldValue), (string) ((string) newValue));
        }
        
        private void OnGridStylePropertyChanged()
        {
            if (!ThemeManager.IsRefreshing)
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.UpdateGridStyle(this);
                }
            }
        }
        
        private static void OnGridStylePropertyChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnGridStylePropertyChanged();
        }
        
        private void OnGroupSummariesCollectionChanged(object sender, InternalCollectionChangedEventArgs e)
        {
            this.UpdateGroupSummaries();
            this.UpdateSummaryItemsPropertyChangedSubscriptions(e, new PropertyChangedEventHandler(this.GroupSummaryItem_PropertyChanged));
        }
        
        private static void OnIsAutoFilterPanelVisibleChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnAutoFilterPanelVisibilityChanged((bool) ((bool) oldValue), (bool) ((bool) newValue));
        }
        
        private static void OnIsColumnHeaderVisibleChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).UpdateColumnHeaderSettings();
        }
        
        private void OnIsLoadMoreEnabledChanged()
        {
            this.UpdeateLoadMoreInNative();
        }
        
        private static void OnIsLoadMoreEnabledChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnIsLoadMoreEnabledChanged();
        }
        
        private void OnIsPullToRefreshEnabledChanged()
        {
            this.UpdeatePullToRefreshInNative();
        }
        
        private static void OnIsPullToRefreshEnabledChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnIsPullToRefreshEnabledChanged();
        }
        
        private void OnIsReadOnlyChanged(bool oldValue, bool newValue)
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    enumerator.Current.IsParentReadOnly = newValue;
                }
            }
        }
        
        private void OnIsRefreshingChanged()
        {
            if (!this.IsRefreshing)
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.EndRefreshing();
                }
            }
        }
        
        private static void OnIsRefreshingChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnIsRefreshingChanged();
        }
        
        private void OnIsUpdateLockedChanged()
        {
            this.EndUpdateCore();
        }
        
        private static void OnIsUpdateLockedChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnIsUpdateLockedChanged();
        }
        
        private void OnItemsSourceChanged(object oldValue, object newValue)
        {
            this.BeginUpdate();
            this.AttachDataSource(newValue);
            this.ResetSelection();
            this.ResetAutoGeneratedColumns();
            this.TryAutoGenerateColumns();
            this.SortingColumnManager.SetColumnsCollection(this.columns, this.IsLoaded);
            this.ResetColumnsComparers();
            this.SortingColumnManager.GroupAndSortData();
            this.EndUpdate();
        }
        
        private static void OnItemsSourceChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnItemsSourceChanged(oldValue, newValue);
        }
        
        private void OnLoadMoreCommandChanged(ICommand oldValue, ICommand newValue)
        {
            if (oldValue != null)
            {
                oldValue.CanExecuteChanged -= new EventHandler(this.LoadMoreCommandCanExecuteChanged);
            }
            if (newValue != null)
            {
                newValue.CanExecuteChanged += new EventHandler(this.LoadMoreCommandCanExecuteChanged);
            }
        }
        
        private static void OnLoadMoreCommandChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnLoadMoreCommandChanged(oldValue as ICommand, newValue as ICommand);
        }
        
        protected override void OnParentSet()
        {
            if (base.Parent != null)
            {
                this.IsLoaded = true;
                this.UpdateVisibleColumns(false);
                this.SortingColumnManager = DevExpress.XamarinForms.DataGrid.Internal.SortingColumnManager.Create(this.Columns, this.dataController, this.SortMode, this.IsLoaded);
                this.SortingColumnManager.GroupAndSortData();
                this.ResetSelection();
            }
            base.OnParentSet();
        }
        
        protected override void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            base.OnPropertyChanged(propertyName);
            if (propertyName == VisualElement.BackgroundColorProperty.PropertyName)
            {
                this.OnGridStylePropertyChanged();
            }
        }
        
        private void OnPullToRefreshCommandChanged(ICommand oldValue, ICommand newValue)
        {
            if (oldValue != null)
            {
                oldValue.CanExecuteChanged -= new EventHandler(this.PullToRefreshCommandCanExecuteChanged);
            }
            if (newValue != null)
            {
                newValue.CanExecuteChanged += new EventHandler(this.PullToRefreshCommandCanExecuteChanged);
            }
        }
        
        private static void OnPullToRefreshCommandChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnPullToRefreshCommandChanged(oldValue as ICommand, newValue as ICommand);
        }
        
        private static void OnReadOnlyChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnIsReadOnlyChanged((bool) ((bool) oldValue), (bool) ((bool) newValue));
        }
        
        private void OnRowHeightChanged(double oldValue, double newValue)
        {
        }
        
        private static void OnRowHeightChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnRowHeightChanged((double) ((double) oldValue), (double) ((double) newValue));
        }
        
        private void OnSelectedDataObjectChanged(object oldValue, object newValue)
        {
            this.selectionStrategy.OnSelectedDataObjectChanged(newValue);
        }
        
        private static void OnSelectedDataObjectChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnSelectedDataObjectChanged(oldValue, newValue);
        }
        
        private void OnSelectedRowHandleChanged(int oldValue, int newValue)
        {
            this.selectionStrategy.OnSelectedRowHandleChanged(newValue);
        }
        
        private static void OnSelectedRowHandleChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnSelectedRowHandleChanged((int) ((int) oldValue), (int) ((int) newValue));
        }
        
        private void OnSelectionModeChanged()
        {
            this.UpdateSelectionStrategy();
        }
        
        private static void OnSelectionModeChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnSelectionModeChanged();
        }
        
        private void OnShowGroupedColumnsChanged()
        {
            this.UpdateVisibleColumns(false);
        }
        
        private static void OnShowGroupedColumnsChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnShowGroupedColumnsChanged();
        }
        
        private void OnSortModeChanged(GridSortMode oldValue, GridSortMode newValue)
        {
            this.SortingColumnManager = DevExpress.XamarinForms.DataGrid.Internal.SortingColumnManager.Create(this.Columns, this.dataController, newValue, this.IsLoaded);
        }
        
        private static void OnSortModeChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).OnSortModeChanged((GridSortMode) oldValue, (GridSortMode) newValue);
        }
        
        private void OnTotalSummariesCollectionChanged(object sender, InternalCollectionChangedEventArgs e)
        {
            this.UpdateTotalSummaries(this.GetUpdatePanel(e));
            this.UpdateSummaryItemsPropertyChangedSubscriptions(e, new PropertyChangedEventHandler(this.TotalSummaryItem_PropertyChanged));
        }
        
        private static void OnTotalSummaryHeightChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).UpdateTotalSummaryPanel();
        }
        
        private static void OnTotalSummaryVisibilityChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((DataGridView) obj).UpdateTotalSummaryPanel();
        }
        
        private void OnValueChanged(object sender, ObservableDictionary<string, object>.ObservableDictionaryEventHandlerArgs e)
        {
            if ((this.currentEditRowViewModel != null) && (this.dataController.DataSource is UnboundColumnsDataSource))
            {
                this.UnsubscribeEditFormValuesChangeEvent();
                try
                {
                    string key = e.Key;
                    foreach (string str2 in new List<string>((IEnumerable<string>) this.currentEditRowViewModel.Values.Keys))
                    {
                        if (str2 == key)
                        {
                            this.SyncUnboundValue(str2);
                            continue;
                        }
                        GridColumn column = this.Columns[str2];
                        if ((column != null) && column.IsUnbound)
                        {
                            this.UpdateUnboundValue(str2);
                        }
                    }
                }
                finally
                {
                    this.SubscribeEditFormValuesChangeEvent();
                }
            }
        }
        
        public void OpenEditor(CellIndex cellIndex)
        {
            if (!cellIndex.Equals(CellIndex.InvalidIndex))
            {
                this.OpenEditorCore(cellIndex);
            }
        }
        
        private void OpenEditorCore(CellIndex cellIndex)
        {
            this.OpenInplaceEditor(cellIndex);
        }
        
        private void OpenInplaceEditor(CellIndex cellIndex)
        {
            GridColumn column = this.Columns[cellIndex.FieldName];
            if ((column != null) && !column.ActualIsReadOnly)
            {
                this.currentEditRowViewModel = this.GetEditRowViewModel(cellIndex, true);
                this.SubscribeEditFormValuesChangeEvent();
                int columnIndex = (cellIndex.ColumnIndex >= 0) ? cellIndex.ColumnIndex : this.GetVisibleColumnIndex(cellIndex.FieldName);
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.OpenInplaceEditor(this.currentEditRowViewModel, this.GetVisibleIndexByRowHandle(cellIndex.RowHandle), columnIndex);
                }
            }
        }
        
        private void PullToRefreshCommandCanExecuteChanged(object sender, EventArgs e)
        {
            this.UpdeatePullToRefreshInNative();
        }
        
        private bool RaiseAutoGeneratingColumn(GridColumn gridColumn)
        {
            if (this.AutoGeneratingColumn == null)
            {
                return true;
            }
            AutoGeneratingColumnEventArgs e = new AutoGeneratingColumnEventArgs(gridColumn);
            this.AutoGeneratingColumn(this, e);
            return !e.Cancel;
        }
        
        protected internal virtual void RaiseCustomizeCell(CustomizeCellEventArgs args)
        {
            if (this.CustomizeCell != null)
            {
                this.CustomizeCell(args);
            }
        }
        
        protected internal virtual void RaiseCustomizeCellDisplayText(CustomizeCellDisplayTextEventArgs args)
        {
            if ((this.customizeCellDisplayText != null) && (args != null))
            {
                args.Source = this;
                this.customizeCellDisplayText(args);
            }
        }
        
        private void RaiseEndRowEdit(int rowHandle, EditingRowAction action)
        {
            if (this.EndRowEdit != null)
            {
                RowEditingEventArgs e = new RowEditingEventArgs(rowHandle, this.GetSourceRowIndex(rowHandle), action);
                this.EndRowEdit(this, e);
            }
        }
        
        private object RaiseGetCustomUnboundColumnData(IRowData row, GridColumn column)
        {
            if (this.CustomUnboundColumnData == null)
            {
                return null;
            }
            GridColumnDataEventArgs e = new GridColumnDataEventArgs(this, column, row, null, true);
            this.CustomUnboundColumnData(this, e);
            return e.Value;
        }
        
        private void RaiseLoadMore()
        {
            if (this.LoadMore != null)
            {
                this.LoadMore(this, EventArgs.Empty);
            }
        }
        
        private void RaisePullToRefresh()
        {
            if (this.PullToRefresh != null)
            {
                this.PullToRefresh(this, EventArgs.Empty);
            }
        }
        
        private void RaiseRowDoubleTap(CellIndex cellIndex)
        {
            if (this.RowDoubleTap != null)
            {
                RowTapEventArgs e = this.CreateRowTapEventArgs(cellIndex.RowHandle, cellIndex.FieldName);
                this.RowDoubleTap(this, e);
            }
        }
        
        private void RaiseRowLongPress(int rowHandle, string fieldName)
        {
            if (this.RowLongPress != null)
            {
                RowTapEventArgs e = this.CreateRowTapEventArgs(rowHandle, fieldName);
                this.RowLongPress(this, e);
            }
        }
        
        private void RaiseRowTap(int rowHandle, string fieldName)
        {
            if (this.RowTap != null)
            {
                RowTapEventArgs e = this.CreateRowTapEventArgs(rowHandle, fieldName);
                this.RowTap(this, e);
            }
        }
        
        private void RaiseSelectionChanged()
        {
            if (this.SelectionChanged != null)
            {
                RowEventArgs e = new RowEventArgs(this.SelectedRowHandle);
                this.SelectionChanged(this, e);
            }
        }
        
        private void RaiseSetCustomUnboundColumnData(IRowData row, GridColumn column, object value)
        {
            if (this.CustomUnboundColumnData != null)
            {
                GridColumnDataEventArgs e = new GridColumnDataEventArgs(this, column, row, value, false);
                this.CustomUnboundColumnData(this, e);
            }
        }
        
        private void ResetAutoGeneratedColumns()
        {
            this.UnsubscribeColumnsEvents();
            try
            {
                this.autoGeneratedColumns = null;
                for (int i = this.Columns.Count - 1; i >= 0; i--)
                {
                    if (this.Columns.ElementAt(i).IsAutoGenerated)
                    {
                        this.Columns.RemoveAt(i);
                    }
                }
            }
            finally
            {
                this.SubscribeColumnsEvents();
            }
        }
        
        private void ResetColumnsComparers()
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    enumerator.Current.ResetComparers();
                }
            }
        }
        
        protected virtual void ResetSelection()
        {
            this.selectionStrategy.ResetSelection();
        }
        
        public void ScrollToRow(int rowHandle)
        {
            IGridView gridView = this.GridView;
            if (gridView == null)
            {
                IGridView local1 = gridView;
            }
            else
            {
                gridView.ScrollToRow(this.GetVisibleIndexByRowHandle(rowHandle));
            }
        }
        
        public void SetCellValue(int rowHandle, GridColumn column, object value)
        {
            this.SetCellValue(rowHandle, column.FieldName, value);
        }
        
        public void SetCellValue(int rowHandle, string fieldName, object value)
        {
            IEditableRowData rowData = this.dataController.BeginEditRow(rowHandle);
            if (rowData != null)
            {
                GridColumn column = this.Columns[fieldName];
                if (column is PickerColumn)
                {
                    object obj1 = ((PickerColumn) column).CorrectCellValue(value);
                    value = obj1;
                }
                rowData.SetFieldValue(fieldName, value);
                this.dataController.EndEditRow(rowData);
            }
        }
        
        public void SortBy(GridColumn column)
        {
            this.SortBy(column, ColumnSortOrder.Ascending);
        }
        
        public void SortBy(string fieldName)
        {
            this.SortBy(this.Columns[fieldName], ColumnSortOrder.Ascending);
        }
        
        public void SortBy(GridColumn column, ColumnSortOrder sortOrder)
        {
            this.SortBy(column, sortOrder, 0);
        }
        
        public void SortBy(GridColumn column, ColumnSortOrder sortOrder, int sortIndex)
        {
            if (column != null)
            {
                column.SortOrder = sortOrder;
                column.SortIndex = sortIndex;
            }
        }
        
        internal void StartLoadMore()
        {
            this.IsRefreshing = true;
            this.RaiseLoadMore();
            if (this.LoadMoreCommand != null)
            {
                this.LoadMoreCommand.Execute(null);
            }
        }
        
        internal void StartPullToRefresh()
        {
            this.IsRefreshing = true;
            this.RaisePullToRefresh();
            if (this.PullToRefreshCommand != null)
            {
                this.PullToRefreshCommand.Execute(null);
            }
        }
        
        private void SubscribeColumnsEvents()
        {
            if (this.columns != null)
            {
                this.columns.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged);
                this.columns.ColumnPropertyChanged += new PropertyChangedEventHandler(this.OnColumnPropertyChanged);
            }
        }
        
        private void SubscribeDataSourceEvents()
        {
            UnboundColumnsDataSource dataSource = this.dataController.DataSource as UnboundColumnsDataSource;
            if (dataSource != null)
            {
                this.SubscribeDataSourceEventsCore(dataSource);
            }
        }
        
        private void SubscribeDataSourceEventsCore(UnboundColumnsDataSource dataSource)
        {
            dataSource.CreateUnboundFieldFunction += new CreateUnboundFieldFunctionEventHandler(this.OnCreateUnboundFieldFunction);
            dataSource.CreateUnboundFieldSetter += new CreateUnboundFieldFunctionEventHandler(this.OnCreateUnboundFieldSetter);
        }
        
        private void SubscribeEditFormValuesChangeEvent()
        {
            if (this.currentEditRowViewModel != null)
            {
                this.currentEditRowViewModel.Values.OnValueChanged += new EventHandler<ObservableDictionary<string, object>.ObservableDictionaryEventHandlerArgs>(this.OnValueChanged);
            }
        }
        
        private void SubscribeFilterEvents()
        {
            this.filter.PropertyChanged += new PropertyChangedEventHandler(this.OnFilterPropertyChanged);
        }
        
        private void SyncUnboundValue(string fieldName)
        {
            UnboundColumnsDataSource dataSource = this.dataController.DataSource as UnboundColumnsDataSource;
            if ((dataSource != null) && (this.currentEditRowViewModel != null))
            {
                object obj2 = null;
                if (this.currentEditRowViewModel.Values.TryGetValue(fieldName, out obj2))
                {
                    Action<IRowData, object> action = dataSource.TryGetUnboundFieldSetter(fieldName);
                    EditorRowData data = new EditorRowData(this.currentEditRowViewModel.RowData, this.currentEditRowViewModel.Values);
                    if ((action != null) && (data != null))
                    {
                        action(data, obj2);
                    }
                }
            }
        }
        
        internal void TapCollapseButton(int visibleIndex)
        {
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            if (this.dataController.IsGroupCollapsed(rowHandleByVisibleIndex))
            {
                this.dataController.ExpandGroup(rowHandleByVisibleIndex);
            }
            else
            {
                this.dataController.CollapseGroup(rowHandleByVisibleIndex);
            }
            this.UpdateRowsInNative();
        }
        
        internal void TapInHeader(string fieldName)
        {
            this.ChangeColumnSorting(fieldName);
        }
        
        private void ThemeManager_ThemeUpdated(object sender, EventArgs e)
        {
            this.UpdateNativeAppearance();
        }
        
        private void TotalSummaryItem_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "SummaryValue")
            {
                this.UpdateTotalSummaries(false);
            }
        }
        
        private void TryAutoGenerateColumns()
        {
            if ((this.AutoGenerateColumnsMode != DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode.None) && (this.autoGeneratedColumns == null))
            {
                this.UnsubscribeColumnsEvents();
                try
                {
                    if (this.AutoGenerateColumnsMode == DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode.Auto)
                    {
                        if (this.Columns.Count <= 0)
                        {
                            this.AppendAutoGeneratedColumns();
                        }
                        else
                        {
                            this.autoGeneratedColumns = (IList<GridColumn>) new List<GridColumn>();
                        }
                    }
                    else if (this.AutoGenerateColumnsMode == DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode.Add)
                    {
                        this.AppendAutoGeneratedColumns();
                    }
                    else if (this.AutoGenerateColumnsMode == DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode.Replace)
                    {
                        this.Columns.Clear();
                        this.AppendAutoGeneratedColumns();
                    }
                }
                finally
                {
                    this.SubscribeColumnsEvents();
                }
                using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.IsParentReadOnly = this.IsReadOnly;
                    }
                }
                this.UpdateUnboundFields();
                this.UpdateVisibleColumns(true);
            }
        }
        
        private IGridDataSource TryCreateDataSource(object newDataSource)
        {
            IGridDataSource source = GridDataSourceFactory.Instance.Create(newDataSource);
            return ((source == null) ? null : source);
        }
        
        private void UnsubscribeColumnsEvents()
        {
            if (this.columns != null)
            {
                this.columns.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged);
                this.columns.ColumnPropertyChanged -= new PropertyChangedEventHandler(this.OnColumnPropertyChanged);
            }
        }
        
        private void UnsubscribeDataSourceEvents()
        {
            UnboundColumnsDataSource dataSource = this.dataController.DataSource as UnboundColumnsDataSource;
            if (dataSource != null)
            {
                dataSource.CreateUnboundFieldFunction -= new CreateUnboundFieldFunctionEventHandler(this.OnCreateUnboundFieldFunction);
                dataSource.CreateUnboundFieldSetter -= new CreateUnboundFieldFunctionEventHandler(this.OnCreateUnboundFieldSetter);
            }
        }
        
        private void UnsubscribeEditFormValuesChangeEvent()
        {
            if (this.currentEditRowViewModel != null)
            {
                this.currentEditRowViewModel.Values.OnValueChanged -= new EventHandler<ObservableDictionary<string, object>.ObservableDictionaryEventHandlerArgs>(this.OnValueChanged);
            }
        }
        
        private void UnsubscribeFilterEvents()
        {
            this.filter.PropertyChanged -= new PropertyChangedEventHandler(this.OnFilterPropertyChanged);
        }
        
        private void UpdateColumnHeaderSettings()
        {
            IGridView gridView = this.GridView;
            if (gridView == null)
            {
                IGridView local1 = gridView;
            }
            else
            {
                gridView.UpdateHeaderSettings(this);
            }
        }
        
        private void UpdateFilter(CriteriaOperator actualFilterExpression, bool isActive)
        {
            try
            {
                if (object.Equals(actualFilterExpression, null) || !isActive)
                {
                    this.dataController.Predicate = null;
                }
                else
                {
                    ExpressionEvaluator evaluator = new ExpressionEvaluator(new CustomEvaluatorContextDescriptor((IEnumerable<GridColumn>) this.Columns, this), actualFilterExpression, false);
                    this.dataController.Predicate = delegate (IRowData row) {
                        return evaluator.Fit(row);
                    };
                }
            }
            catch
            {
                this.dataController.Predicate = null;
            }
        }
        
        private void UpdateGroupSummaries()
        {
            this.dataController.GroupSummaries.Clear();
            foreach (GridColumnSummary summary in this.GroupSummaries)
            {
                summary.IsGroupSummary = true;
                this.dataController.GroupSummaries.Add(summary);
            }
            this.dataController.UpdateGroupSummaries();
            if (!this.IsLocked(false))
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.Rebuild(this);
                }
            }
        }
        
        private void UpdateNativeAppearance()
        {
            if (!ThemeManager.IsRefreshing)
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.UpdateAppearance(this);
                }
            }
        }
        
        internal CellData UpdateOrCreateCellData(int visibleIndex, string fieldName, object reuseCellData)
        {
            CellData data1 = reuseCellData as CellData;
            CellData data = data1 ?? new CellData();
            int rowHandleByVisibleIndex = this.GetRowHandleByVisibleIndex(visibleIndex);
            IRowData row = this.dataController.GetRow(rowHandleByVisibleIndex, null);
            if (row != null)
            {
                data.Index = new CellIndex(rowHandleByVisibleIndex, fieldName);
                data.Source = row.DataObject;
                data.Value = row.GetFieldValue(fieldName);
            }
            return data;
        }
        
        private void UpdateRowsInNative()
        {
            IGridView gridView = this.GridView;
            if (gridView == null)
            {
                IGridView local1 = gridView;
            }
            else
            {
                gridView.UpdateRows();
            }
            IGridView view2 = this.GridView;
            if (view2 == null)
            {
                IGridView local2 = view2;
            }
            else
            {
                view2.SetFocusedRowIndex(this.GetVisibleIndexByRowHandle(this.SelectedRowHandle));
            }
        }
        
        private void UpdateSelectedDataObject()
        {
            IRowData row = this.GetRow(this.SelectedRowHandle);
            if (row != null)
            {
                this.SelectedDataObject = row.DataObject;
            }
            else
            {
                this.SelectedDataObject = null;
            }
        }
        
        private void UpdateSelectionStrategy()
        {
            DevExpress.XamarinForms.DataGrid.SelectionMode selectionMode = this.SelectionMode;
            if (selectionMode == DevExpress.XamarinForms.DataGrid.SelectionMode.None)
            {
                this.selectionStrategy = new SelectionStrategyNone(this);
            }
            else if (selectionMode == DevExpress.XamarinForms.DataGrid.SelectionMode.Single)
            {
                this.selectionStrategy = new SelectionStrategySingle(this);
            }
        }
        
        private void UpdateSummaryItemsPropertyChangedSubscriptions(InternalCollectionChangedEventArgs e, PropertyChangedEventHandler eventHandler)
        {
            if (e.NewItems != null)
            {
                foreach (GridColumnSummary summary in e.NewItems)
                {
                    if (summary != null)
                    {
                        summary.PropertyChanged += eventHandler;
                    }
                }
            }
            if (e.OldItems != null)
            {
                foreach (GridColumnSummary summary2 in e.OldItems)
                {
                    if (summary2 != null)
                    {
                        summary2.PropertyChanged -= eventHandler;
                    }
                }
            }
        }
        
        private void UpdateTotalSummaries(bool updatePanel)
        {
            this.dataController.TotalSummaries.Clear();
            foreach (GridColumnSummary summary in this.TotalSummaries)
            {
                this.dataController.TotalSummaries.Add(summary);
            }
            if ((this.TotalSummaryVisibility != VisibilityState.Never) && !this.IsLocked(false))
            {
                if (!updatePanel || (this.TotalSummaryVisibility != VisibilityState.Default))
                {
                    IGridView gridView = this.GridView;
                    if (gridView == null)
                    {
                        IGridView local2 = gridView;
                    }
                    else
                    {
                        gridView.UpdateTotalSummaries();
                    }
                }
                else
                {
                    IGridView gridView = this.GridView;
                    if (gridView == null)
                    {
                        IGridView local1 = gridView;
                    }
                    else
                    {
                        gridView.UpdateTotalSummaryPanel(this);
                    }
                }
            }
        }
        
        private void UpdateTotalSummaryPanel()
        {
            if (!this.IsLocked(true))
            {
                IGridView gridView = this.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.UpdateTotalSummaryPanel(this);
                }
            }
        }
        
        private void UpdateUnboundFields()
        {
            UnboundColumnsDataSource dataSource = this.dataController.DataSource as UnboundColumnsDataSource;
            if (dataSource != null)
            {
                dataSource.UpdateUnboundFields(this.Columns);
            }
        }
        
        private void UpdateUnboundValue(string fieldName)
        {
            UnboundColumnsDataSource dataSource = this.dataController.DataSource as UnboundColumnsDataSource;
            if ((dataSource != null) && (this.currentEditRowViewModel != null))
            {
                object obj2 = dataSource.TryGetUnboundField(fieldName)(new EditorRowData(this.currentEditRowViewModel.RowData, this.currentEditRowViewModel.Values));
                if (!object.Equals(obj2, this.currentEditRowViewModel.Values[fieldName]))
                {
                    this.currentEditRowViewModel.Values[fieldName] = obj2;
                    this.currentEditRowViewModel.Raise();
                }
            }
        }
        
        private void UpdateVisibleColumns(bool raiseNotificationToNative = false)
        {
            if (this.IsLoaded)
            {
                this.TryAutoGenerateColumns();
                List<GridColumn> list = new List<GridColumn>();
                List<GridColumn> list2 = new List<GridColumn>();
                List<GridColumn> list3 = new List<GridColumn>();
                int num = this.columns.Count;
                for (int i = 0; i < num; i++)
                {
                    GridColumn column = this.columns.ElementAt(i);
                    column.HasFixedSeparator = false;
                    if (column.IsVisible && this.IsColumnVisibleInHeaders(column))
                    {
                        if (column.FixedStyle == FixedStyle.Start)
                        {
                            list2.Add(column);
                        }
                        else if (column.FixedStyle == FixedStyle.End)
                        {
                            list3.Add(column);
                        }
                        else
                        {
                            list.Add(column);
                        }
                    }
                }
                if (list2.Count > 0)
                {
                    list2.ElementAt((int)(list2.Count - 1)).HasFixedSeparator = true;
                }
                if (list3.Count > 0)
                {
                    list3.ElementAt(0).HasFixedSeparator = true;
                }
                list.InsertRange(0, (IEnumerable<GridColumn>) list2);
                list.AddRange((IEnumerable<GridColumn>) list3);
                if (!ListHelper.AreEqual<GridColumn>((IList<GridColumn>) this.visibleColumns, (IList<GridColumn>) list) | raiseNotificationToNative)
                {
                    this.visibleColumns = list;
                    if (!this.IsLocked(true))
                    {
                        IGridView gridView = this.GridView;
                        if (gridView == null)
                        {
                            IGridView local1 = gridView;
                        }
                        else
                        {
                            gridView.Rebuild(this);
                        }
                    }
                }
            }
        }
        
        private void UpdeateLoadMoreInNative()
        {
            IGridView gridView = this.GridView;
            if (gridView == null)
            {
                IGridView local1 = gridView;
            }
            else
            {
                gridView.UpdateLoadMore(this.IsLoadMoreEnabled);
            }
        }
        
        private void UpdeatePullToRefreshInNative()
        {
            IGridView gridView = this.GridView;
            if (gridView == null)
            {
                IGridView local1 = gridView;
            }
            else
            {
                gridView.UpdatePullToRefresh(this.IsPullToRefreshEnabled);
            }
        }
        
        public object ItemsSource
        {
            get => 
                base.GetValue(ItemsSourceProperty);
            set
            {
                if (value == null)
                {
                    base.ClearValue(ItemsSourceProperty);
                }
                else
                {
                    base.SetValue(ItemsSourceProperty, value);
                }
            }
        }
        
        public double RowHeight
        {
            get => 
                ((double) ((double) base.GetValue(RowHeightProperty)));
            set => 
                base.SetValue(RowHeightProperty, (double) value);
        }
        
        public GridSortMode SortMode
        {
            get => 
                ((GridSortMode) base.GetValue(SortModeProperty));
            set => 
                base.SetValue(SortModeProperty, value);
        }
        
        public bool AllowCascadeUpdate
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowCascadeUpdateProperty)));
            set => 
                base.SetValue(AllowCascadeUpdateProperty, (bool) value);
        }
        
        public bool AllowCascadeTreeCreation
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowCascadeTreeCreationProperty)));
            set => 
                base.SetValue(AllowCascadeTreeCreationProperty, (bool) value);
        }
        
        public DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode AutoGenerateColumnsMode
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.AutoGenerateColumnsMode) base.GetValue(AutoGenerateColumnsModeProperty));
            set => 
                base.SetValue(AutoGenerateColumnsModeProperty, value);
        }
        
        public bool IsReadOnly
        {
            get => 
                ((bool) ((bool) base.GetValue(IsReadOnlyProperty)));
            set => 
                base.SetValue(IsReadOnlyProperty, (bool) value);
        }
        
        public int SelectedRowHandle
        {
            get => 
                ((int) ((int) base.GetValue(SelectedRowHandleProperty)));
            set => 
                base.SetValue(SelectedRowHandleProperty, (int) value);
        }
        
        public object SelectedDataObject
        {
            get => 
                base.GetValue(SelectedDataObjectProperty);
            set => 
                base.SetValue(SelectedDataObjectProperty, value);
        }
        
        public double ColumnHeaderHeight
        {
            get => 
                ((double) ((double) base.GetValue(ColumnHeaderHeightProperty)));
            set => 
                base.SetValue(ColumnHeaderHeightProperty, (double) value);
        }
        
        public bool IsColumnHeaderVisible
        {
            get => 
                ((bool) ((bool) base.GetValue(IsColumnHeaderVisibleProperty)));
            set => 
                base.SetValue(IsColumnHeaderVisibleProperty, (bool) value);
        }
        
        public bool ShowGroupedColumns
        {
            get => 
                ((bool) ((bool) base.GetValue(ShowGroupedColumnsProperty)));
            set => 
                base.SetValue(ShowGroupedColumnsProperty, (bool) value);
        }
        
        public bool IsPullToRefreshEnabled
        {
            get => 
                ((bool) ((bool) base.GetValue(IsPullToRefreshEnabledProperty)));
            set => 
                base.SetValue(IsPullToRefreshEnabledProperty, (bool) value);
        }
        
        public ICommand PullToRefreshCommand
        {
            get => 
                ((ICommand) base.GetValue(PullToRefreshCommandProperty));
            set => 
                base.SetValue(PullToRefreshCommandProperty, value);
        }
        
        public ICommand LoadMoreCommand
        {
            get => 
                ((ICommand) base.GetValue(LoadMoreCommandProperty));
            set => 
                base.SetValue(LoadMoreCommandProperty, value);
        }
        
        public bool IsLoadMoreEnabled
        {
            get => 
                ((bool) ((bool) base.GetValue(IsLoadMoreEnabledProperty)));
            set => 
                base.SetValue(IsLoadMoreEnabledProperty, (bool) value);
        }
        
        public bool IsRefreshing
        {
            get => 
                ((bool) ((bool) base.GetValue(IsRefreshingProperty)));
            set => 
                base.SetValue(IsRefreshingProperty, (bool) value);
        }
        
        public bool IsUpdateLocked
        {
            get => 
                ((bool) ((bool) base.GetValue(IsUpdateLockedProperty)));
            set => 
                base.SetValue(IsUpdateLockedProperty, (bool) value);
        }
        
        public bool AllowSort
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowSortProperty)));
            set => 
                base.SetValue(AllowSortProperty, (bool) value);
        }
        
        private bool AllowDeleteRows
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowDeleteRowsProperty)));
            set => 
                base.SetValue(AllowDeleteRowsProperty, (bool) value);
        }
        
        private bool AllowResizeColumns
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowResizeColumnsProperty)));
            set => 
                base.SetValue(AllowResizeColumnsProperty, (bool) value);
        }
        
        private bool AllowGroup
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowGroupProperty)));
            set => 
                base.SetValue(AllowGroupProperty, (bool) value);
        }
        
        public bool AllowGroupCollapse
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowGroupCollapseProperty)));
            set => 
                base.SetValue(AllowGroupCollapseProperty, (bool) value);
        }
        
        public ICommand RowTapCommand
        {
            get => 
                ((ICommand) base.GetValue(RowTapCommandProperty));
            set => 
                base.SetValue(RowTapCommandProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.SelectionMode SelectionMode
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.SelectionMode) base.GetValue(SelectionModeProperty));
            set => 
                base.SetValue(SelectionModeProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.EditorShowMode EditorShowMode
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.EditorShowMode) base.GetValue(EditorShowModeProperty));
            set => 
                base.SetValue(EditorShowModeProperty, value);
        }
        
        public Color IndicatorColor
        {
            get => 
                ((Color) base.GetValue(IndicatorColorProperty));
            set => 
                base.SetValue(IndicatorColorProperty, value);
        }
        
        public GridColumnCollection Columns
        {
            get
            {
                if (this.columns == null)
                {
                    this.columns = this.CreateColumns();
                    this.SubscribeColumnsEvents();
                }
                return this.columns;
            }
        }
        
        public SwipeItemCollection StartSwipeItems
        {
            get
            {
                if (this.startSwipeItems == null)
                {
                    this.startSwipeItems = new SwipeItemCollection(this);
                }
                return this.startSwipeItems;
            }
        }
        
        public SwipeItemCollection EndSwipeItems
        {
            get
            {
                if (this.endSwipeItems == null)
                {
                    this.endSwipeItems = new SwipeItemCollection(this);
                }
                return this.endSwipeItems;
            }
        }
        
        internal SwipeItemCollection SwipeItems
        {
            get
            {
                SwipeItemCollection items = new SwipeItemCollection(this);
                if ((this.startSwipeItems != null) && (this.startSwipeItems.Count > 0))
                {
                    foreach (SwipeItem item in this.startSwipeItems)
                    {
                        item.Location = SwipeButtonLocation.Start;
                        items.Add(item);
                    }
                }
                if ((this.endSwipeItems != null) && (this.endSwipeItems.Count > 0))
                {
                    foreach (SwipeItem item2 in this.endSwipeItems)
                    {
                        item2.Location = SwipeButtonLocation.End;
                        items.Add(item2);
                    }
                }
                return items;
            }
        }
        
        public IReadOnlyList<GridColumn> VisibleColumns =>
            ((IReadOnlyList<GridColumn>) this.visibleColumns);
        
        private DevExpress.XamarinForms.DataGrid.Internal.SortingColumnManager SortingColumnManager
        {
            get => 
                this.sortingColumnManager;
            set
            {
                if (!object.ReferenceEquals(this.sortingColumnManager, value))
                {
                    if (this.sortingColumnManager != null)
                    {
                        this.sortingColumnManager.Dispose();
                    }
                    this.sortingColumnManager = value;
                }
            }
        }
        
        bool IGridControlTest.IsLocked =>
            this.IsLocked(false);
        
        public bool IsGrouped =>
            this.dataController.IsGrouped;
        
        private bool IsLoaded { get; set; }
        
        public int RowCount =>
            this.dataController.RowCount;
        
        int IGridControlTest.GroupCount =>
            this.dataController.GroupCount;
        
        IGridDataController IDataControllerOwner.DataController =>
            this.dataController;
        
        [Browsable(false), EditorBrowsable((EditorBrowsableState) EditorBrowsableState.Never)]
        public IGridView GridView { get; set; }
        
        bool ICustomCellTextProvider.CanCustomize =>
            (this.customizeCellDisplayText != null);
        
        EditRowViewModel IGridControlTest.EditRowViewModel =>
            this.currentEditRowViewModel;
        
        public string FilterString
        {
            get => 
                ((string) ((string) base.GetValue(FilterStringProperty)));
            set => 
                base.SetValue(FilterStringProperty, value);
        }
        
        public string ActualFilterString
        {
            get => 
                ((string) ((string) base.GetValue(ActualFilterStringProperty)));
            private set => 
                base.SetValue(ActualFilterStringPropertyKey, value);
        }
        
        public CriteriaOperator FilterExpression
        {
            get => 
                this.filter.FilterExpression;
            set =>
                this.filter.FilterExpression = value;
        }
        
        internal bool IsAutoFilterPanelVisible
        {
            get => 
                ((bool) ((bool) base.GetValue(IsAutoFilterPanelVisibleProperty)));
            set => 
                base.SetValue(IsAutoFilterPanelVisibleProperty, (bool) value);
        }
        
        int IGridDataProvider.VisibleRowCount =>
            this.dataController.VisibleRowCount;
        
        public DevExpress.XamarinForms.DataGrid.HeaderStyle HeaderStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.HeaderStyle) base.GetValue(HeaderStyleProperty));
            set => 
                base.SetValue(HeaderStyleProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.CellStyle CellStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.CellStyle) base.GetValue(CellStyleProperty));
            set => 
                base.SetValue(CellStyleProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.TotalSummaryStyle TotalSummaryStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.TotalSummaryStyle) base.GetValue(TotalSummaryStyleProperty));
            set => 
                base.SetValue(TotalSummaryStyleProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.GroupRowStyle GroupRowStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.GroupRowStyle) base.GetValue(GroupRowStyleProperty));
            set => 
                base.SetValue(GroupRowStyleProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.SwipeButtonStyle SwipeButtonStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.SwipeButtonStyle) base.GetValue(SwipeButtonStyleProperty));
            set => 
                base.SetValue(SwipeButtonStyleProperty, value);
        }
        
        public double FixedColumnSeparatorWidth
        {
            get => 
                ((double) ((double) base.GetValue(FixedColumnSeparatorWidthProperty)));
            set => 
                base.SetValue(FixedColumnSeparatorWidthProperty, (double) value);
        }
        
        public Thickness BorderThickness
        {
            get => 
                ((Thickness) base.GetValue(BorderThicknessProperty));
            set => 
                base.SetValue(BorderThicknessProperty, value);
        }
        
        public Color BorderColor
        {
            get => 
                ((Color) base.GetValue(BorderColorProperty));
            set => 
                base.SetValue(BorderColorProperty, value);
        }
        
        public double VerticalLineThickness
        {
            get => 
                ((double) ((double) base.GetValue(VerticalLineThicknessProperty)));
            set => 
                base.SetValue(VerticalLineThicknessProperty, (double) value);
        }
        
        private DevExpress.XamarinForms.DataGrid.HeaderStyle HeaderStyleInternal { get; set; }
        
        private DevExpress.XamarinForms.DataGrid.CellStyle CellStyleInternal { get; set; }
        
        private DevExpress.XamarinForms.DataGrid.TotalSummaryStyle TotalSummaryStyleInternal { get; set; }
        
        private DevExpress.XamarinForms.DataGrid.GroupRowStyle GroupRowStyleInternal { get; set; }
        
        private DevExpress.XamarinForms.DataGrid.SwipeButtonStyle SwipeButtonStyleInternal { get; set; }
        
        DevExpress.XamarinForms.DataGrid.CellStyle IGridControlTest.CellStyleInternal =>
            this.CellStyleInternal;
        
        DevExpress.XamarinForms.DataGrid.GroupRowStyle IGridControlTest.GroupRowStyleInternal =>
            this.GroupRowStyleInternal;
        
        DevExpress.XamarinForms.DataGrid.HeaderStyle IGridControlTest.HeaderStyleInternal =>
            this.HeaderStyleInternal;
        
        DevExpress.XamarinForms.DataGrid.TotalSummaryStyle IGridControlTest.TotalSummaryStyleInternal =>
            this.TotalSummaryStyleInternal;
        
        DevExpress.XamarinForms.DataGrid.SwipeButtonStyle IGridControlTest.SwipeButtonStyleInternal =>
            this.SwipeButtonStyleInternal;
        
        public SummaryCollection TotalSummaries { get; private set; }
        
        public SummaryCollection GroupSummaries { get; private set; }
        
        public double TotalSummaryHeight
        {
            get => 
                ((double) ((double) base.GetValue(TotalSummaryHeightProperty)));
            set => 
                base.SetValue(TotalSummaryHeightProperty, (double) value);
        }
        
        internal bool IsTotalSummaryVisible =>
            ((this.TotalSummaryVisibility != VisibilityState.Default) ? (this.TotalSummaryVisibility == VisibilityState.Always) : (this.TotalSummaries.Count > 0));
        
        public VisibilityState TotalSummaryVisibility
        {
            get => 
                ((VisibilityState) base.GetValue(TotalSummaryVisibilityProperty));
            set => 
                base.SetValue(TotalSummaryVisibilityProperty, value);
        }
        
        private class EditorRowData : IRowData
        {
            private readonly IRowData sourceRowData;
            private readonly ObservableDictionary<string, object> values;
            
            public EditorRowData(IRowData sourceRowData, ObservableDictionary<string, object> values)
            {
                this.sourceRowData = sourceRowData;
                this.values = values;
            }
            
            public object GetFieldValue(string fieldName)
            {
                object obj2;
                return (!this.values.TryGetValue(fieldName, out obj2) ? this.sourceRowData.GetFieldValue(fieldName) : obj2);
            }
            
            public T GetFieldValueGeneric<T>(string fieldName)
            {
                object obj2;
                return (!this.values.TryGetValue(fieldName, out obj2) ? this.sourceRowData.GetFieldValueGeneric<T>(fieldName) : ((T) obj2));
            }
            
            public int RowHandle
            {
                get => 
                    this.sourceRowData.RowHandle;
                set
                {
                }
            }
            
            public object DataObject =>
                this.sourceRowData.DataObject;
        }
        
        private abstract class SelectionStrategyBase
        {
            public SelectionStrategyBase(DevExpress.XamarinForms.DataGrid.DataGridView dataGridView)
            {
                this.DataGridView = dataGridView;
            }
            
            public abstract void OnSelectedDataObjectChanged(object newValue);
            public abstract void OnSelectedRowHandleChanged(int newValue);
            public abstract void ResetSelection();
            public abstract void SetSelectedRowHandle(int rowHandle);
            
            protected DevExpress.XamarinForms.DataGrid.DataGridView DataGridView { get; set; }
        }
        
        private class SelectionStrategyNone : DataGridView.SelectionStrategyBase
        {
            public SelectionStrategyNone(DataGridView dataGridView) : base(dataGridView)
            {
                base.DataGridView.SelectedRowHandle = -2147483648;
                base.DataGridView.SelectedDataObject = null;
                base.DataGridView.RaiseSelectionChanged();
                IGridView gridView = base.DataGridView.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.SetFocusedRowIndex(-2147483648);
                }
            }
            
            public override void OnSelectedDataObjectChanged(object newValue)
            {
                base.DataGridView.SelectedDataObject = null;
            }
            
            public override void OnSelectedRowHandleChanged(int newValue)
            {
                base.DataGridView.SelectedRowHandle = -2147483648;
            }
            
            public override void ResetSelection()
            {
                base.DataGridView.dataController.ResetSelection();
            }
            
            public override void SetSelectedRowHandle(int rowHandle)
            {
            }
        }
        
        private class SelectionStrategySingle : DataGridView.SelectionStrategyBase
        {
            public SelectionStrategySingle(DataGridView dataGridView) : base(dataGridView)
            {
            }
            
            public override void OnSelectedDataObjectChanged(object newValue)
            {
                base.DataGridView.SelectedRowHandle = base.DataGridView.FindRowByDataObject(newValue);
                if (base.DataGridView.SelectedRowHandle == -2147483648)
                {
                    base.DataGridView.SelectedDataObject = null;
                }
            }
            
            public override void OnSelectedRowHandleChanged(int newValue)
            {
                base.DataGridView.dataController.SelectedRow = newValue;
                base.DataGridView.UpdateSelectedDataObject();
                int sourceRowIndex = base.DataGridView.dataController.GetSourceRowIndex(newValue);
                if (sourceRowIndex != base.DataGridView.selectedRowSourceIndex)
                {
                    base.DataGridView.selectedRowSourceIndex = sourceRowIndex;
                    base.DataGridView.RaiseSelectionChanged();
                }
                IGridView gridView = base.DataGridView.GridView;
                if (gridView == null)
                {
                    IGridView local1 = gridView;
                }
                else
                {
                    gridView.SetFocusedRowIndex(base.DataGridView.GetVisibleIndexByRowHandle(newValue));
                }
            }
            
            public override void ResetSelection()
            {
                base.DataGridView.dataController.ResetSelection();
                if (base.DataGridView.RowCount <= 0)
                {
                    base.DataGridView.SelectedRowHandle = -2147483648;
                }
                else if (base.DataGridView.SelectedRowHandle == 0)
                {
                    base.DataGridView.UpdateSelectedDataObject();
                }
                else
                {
                    base.DataGridView.SelectedRowHandle = 0;
                }
            }
            
            public override void SetSelectedRowHandle(int rowHandle)
            {
                base.DataGridView.SelectedRowHandle = rowHandle;
            }
        }
    }
}
