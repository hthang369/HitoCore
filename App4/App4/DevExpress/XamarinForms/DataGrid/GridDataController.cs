// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.XamarinForms.Core.ConditionalFormatting.Native;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Threading;
    using System.Threading.Tasks;
    
    public class GridDataController : IGridDataController, IReadWriteDataProcessingLocker, IGridDataSource, ISortGroupDataSettings, IPropertyTypeProvider
    {
        private InnerGridDataSource dataSource = new InnerGridDataSource();
        private Type dataObjectType;
        private SortDescriptor<IRowData> comparer;
        private GroupDescriptor<IRowData> groupBy;
        private Predicate<IRowData> predicate;
        private FilteredGridDataSource filteredDataSource;
        private SortedGridDataSource sortedDataSource;
        private GroupedGridDataSource groupedDataSource;
        private readonly GridColumnSummaryCollection totalSummaries;
        private readonly GridColumnSummaryCollection groupSummaries;
        private readonly GridColumnSummaryCollection conditionalFormatSummaries;
        private bool areGroupsInitiallyCollapsed;
        private GridDataControllerDataChangedEventHandler onBeforeDataChanged;
        private GridDataControllerDataChangedEventHandler onDataChanged;
        private CustomSummaryEventHandler onCalculateCustomSummary;
        private EventHandler onSelectionChanged;
        [CompilerGenerated]
        public event RowAllowEventHandler GroupRowCollapsing;
        [CompilerGenerated]
        public event RowAllowEventHandler GroupRowExpanding;
        [CompilerGenerated]
        public event RowEventHandler GroupRowCollapsed;
        [CompilerGenerated]
        public event RowEventHandler GroupRowExpanded;
        private NotifyCollectionChangedEventHandler onRowCollectionChanged;
        private CancellationTokenSource cancellation;
        private NotifyCollectionChangedEventHandler onGroupCollectionChanged;
        private List<ICancellableReader> readers = new List<ICancellableReader>();
        
        public event GridDataControllerDataChangedEventHandler BeforeDataChanged
        {
            add
            {
                this.onBeforeDataChanged = (GridDataControllerDataChangedEventHandler) Delegate.Combine((Delegate) this.onBeforeDataChanged, (Delegate) value);
            }
            remove
            {
                this.onBeforeDataChanged = (GridDataControllerDataChangedEventHandler) Delegate.Remove((Delegate) this.onBeforeDataChanged, (Delegate) value);
            }
        }
        
        public event CustomSummaryEventHandler CalculateCustomSummary
        {
            add
            {
                this.onCalculateCustomSummary = (CustomSummaryEventHandler) Delegate.Combine((Delegate) this.onCalculateCustomSummary, (Delegate) value);
            }
            remove
            {
                this.onCalculateCustomSummary = (CustomSummaryEventHandler) Delegate.Remove((Delegate) this.onCalculateCustomSummary, (Delegate) value);
            }
        }
        
        public event GridDataControllerDataChangedEventHandler DataChanged
        {
            add
            {
                if ((this.onDataChanged == null) || !Enumerable.Contains<Delegate>(this.onDataChanged.GetInvocationList(), (Delegate) value))
                {
                    this.onDataChanged = (GridDataControllerDataChangedEventHandler) Delegate.Combine((Delegate) this.onDataChanged, (Delegate) value);
                }
            }
            remove
            {
                this.onDataChanged = (GridDataControllerDataChangedEventHandler) Delegate.Remove((Delegate) this.onDataChanged, (Delegate) value);
            }
        }
        
        event NotifyCollectionChangedEventHandler IGridDataSource.GroupCollectionChanged
        {
            add
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
        }
        
        event NotifyCollectionChangedEventHandler IGridDataSource.RowCollectionChanged
        {
            add
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
        }
        
        public event EventHandler SelectionChanged
        {
            add
            {
                this.onSelectionChanged = (EventHandler) Delegate.Combine((Delegate) this.onSelectionChanged, (Delegate) value);
            }
            remove
            {
                this.onSelectionChanged = (EventHandler) Delegate.Remove((Delegate) this.onSelectionChanged, (Delegate) value);
            }
        }
        
        public GridDataController()
        {
            this.totalSummaries = new GridColumnSummaryCollection(this);
            this.groupSummaries = new GridColumnSummaryCollection(this);
            this.conditionalFormatSummaries = new GridColumnSummaryCollection(this);
            this.UpdateActualDataSource();
        }
        
        public IEditableRowData AddNewRow() => 
            this.ActualDataSource.CreateNewRow();
        
        public void BeginCancellableRead(ICancellableReader reader)
        {
            List<ICancellableReader> readers = this.readers;
            lock (readers)
            {
                this.readers.Add(reader);
            }
        }
        
        public IEditableRowData BeginEditRow(int rowHandle) => 
            (this.GetRow(rowHandle, null) as IEditableRowData);
        
        public void CancelReaders()
        {
            List<ICancellableReader> readers = this.readers;
            lock (readers)
            {
                int num = this.readers.Count;
                int num2 = 0;
                while (true)
                {
                    if (num2 >= num)
                    {
                        this.readers.Clear();
                        break;
                    }
                    this.readers.ElementAt(num2).Cancel();
                    num2++;
                }
            }
        }
        
        public void CollapseAllGroups()
        {
            if (this.IsGrouped)
            {
                this.groupedDataSource.CollapseAllGroups();
            }
        }
        
        public void CollapseGroup(int rowHandle)
        {
            if (this.IsGrouped)
            {
                this.groupedDataSource.CollapseGroup(rowHandle);
            }
        }
        
        private SummaryType ConvertSummaryType(ConditionalFormatSummaryType summaryType)
        {
            switch (summaryType)
            {
                case ConditionalFormatSummaryType.Max:
                    return SummaryType.Max;
                
                case ConditionalFormatSummaryType.Average:
                    return SummaryType.Average;
                
                case ConditionalFormatSummaryType.SortedList:
                    return (SummaryType.Custom | SummaryType.Sum);
            }
            return SummaryType.Min;
        }
        
        public void DeleteRow(int rowHandle)
        {
            int num;
            this.UnsubscribeDataSourceEvents();
            try
            {
                num = this.ActualDataSource.DeleteRow(rowHandle);
            }
            finally
            {
                this.SubscribeDataSourceEvents();
            }
            if (num != -2147483648)
            {
                object[] changedItems = new object[] { (int) rowHandle };
                CustomNotifyCollectionChangedEventArgs e = new CustomNotifyCollectionChangedEventArgs((NotifyCollectionChangedAction) NotifyCollectionChangedAction.Remove, changedItems, rowHandle);
                this.OnDataSourceRowCollectionChanged(this, e);
            }
        }
        
        internal Type DetectDataObjectType()
        {
            IRowData data = this.TryGetFirstRowData();
            if ((data == null) || (data.DataObject == null))
            {
                return this.TryDetectDataObjectTypeByDataSource(this.DataSource.ActualDataSourceType);
            }
            return data.DataObject.GetType();
        }
        
        void IGridDataController.RaiseCalculateCustomSummary(CustomSummaryEventArgs args)
        {
            this.RaiseCalculateCustomSummary(args);
        }
        
        int IGridDataSource.AddNewRow(IEditableRowData rowData) => 
            this.ActualDataSource.AddNewRow(rowData);
        
        IEditableRowData IGridDataSource.CreateNewRow() => 
            this.ActualDataSource.CreateNewRow();
        
        int IGridDataSource.DeleteRow(int rowHandle) => 
            this.ActualDataSource.DeleteRow(rowHandle);
        
        public void EndCancellableRead(ICancellableReader reader)
        {
            List<ICancellableReader> readers = this.readers;
            lock (readers)
            {
                int index = this.readers.IndexOf(reader);
                if (index >= 0)
                {
                    this.readers.RemoveAt(index);
                }
            }
        }
        
        public int EndEditNewRow(IEditableRowData rowData) => 
            ((rowData != null) ? this.ActualDataSource.AddNewRow(rowData) : -2147483648);
        
        public void EndEditRow(IEditableRowData rowData)
        {
            if (rowData != null)
            {
                this.ActualDataSource.NotifyRowReplaced(rowData.RowHandle);
                this.ResetSummaries();
                this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceRowChanged);
            }
        }
        
        public void ExpandAllGroups()
        {
            if (this.IsGrouped)
            {
                this.groupedDataSource.ExpandAllGroups();
            }
        }
        
        public void ExpandGroup(int rowHandle)
        {
            if (this.IsGrouped)
            {
                this.groupedDataSource.ExpandGroup(rowHandle);
            }
        }
        
        public int FindRow(Predicate<IRowData> predicate)
        {
            if (predicate != null)
            {
                IRowData reuseRow = null;
                int rowCount = this.RowCount;
                for (int i = 0; i < rowCount; i++)
                {
                    reuseRow = this.GetRow(i, reuseRow);
                    if (predicate(reuseRow))
                    {
                        return i;
                    }
                }
            }
            return -2147483648;
        }
        
        public IList<GridColumn> GenerateColumns() => 
            this.ActualDataSource.GenerateColumns();
        
        public IGroupInfo GetGroup(int groupHandle) => 
            (!this.IsGrouped ? null : this.GroupedDataSource.GetGroup(groupHandle));
        
        public int GetGroupedRowCount(int rowHandle) => 
            (!this.IsGrouped ? 0 : this.groupedDataSource.GetGroupedRowCount(rowHandle));
        
        public IGroupInfo GetGroupInfo(int rowHandle) => 
            (!this.IsGrouped ? null : this.groupedDataSource.GetGroupInfo(rowHandle));
        
        public object GetGroupValue(int rowHandle) => 
            (!this.IsGrouped ? null : this.groupedDataSource.GetGroupValue(rowHandle));
        
        public PropertyAccessor GetPropertyAccessor(string name)
        {
            if (this.dataObjectType == null)
            {
                this.dataObjectType = this.DetectDataObjectType();
            }
            return ((this.dataObjectType != null) ? PropertyAccessor.Create(this.dataObjectType, name, this) : null);
        }
        
        public Type GetPropertyType(string propertyName)
        {
            Type type = typeof(string);
            IRowData data = this.TryGetFirstRowData();
            if ((data == null) || (data.DataObject == null))
            {
                return type;
            }
            object fieldValue = data.GetFieldValue(propertyName);
            if (fieldValue == null)
            {
                return type;
            }
            return fieldValue.GetType();
        }
        
        public IRowData GetRow(int rowHandle, IRowData reuseRow) => 
            this.ActualDataSource.GetRow(rowHandle, reuseRow);
        
        public Task<IRowData> GetRowAsync(int rowHandle)
        {
            if (this.ActualDataSource.IsGetRowReady)
            {
                return Task.FromResult<IRowData>(this.GetRow(rowHandle, null));
            }
            CancellationTokenSource cancellation = this.cancellation;
            if (cancellation != null)
            {
                cancellation.Cancel();
            }
            cancellation = new CancellationTokenSource();
            CancellationToken token = cancellation.Token;
            this.cancellation = cancellation;
            return Task.Run<IRowData>(delegate {
                return this.GetRowCore(rowHandle, token);
            }, token);
        }
        
        private IRowData GetRowCore(int rowHandle, CancellationToken cancel)
        {
            cancel.ThrowIfCancellationRequested();
            return this.GetRow(rowHandle, null);
        }
        
        public Task<int> GetRowCountAsync()
        {
            if (this.ActualDataSource.IsRowCountReady)
            {
                return Task.FromResult<int>(this.RowCount);
            }
            CancellationTokenSource cancellation = this.cancellation;
            if (cancellation != null)
            {
                cancellation.Cancel();
            }
            cancellation = new CancellationTokenSource();
            CancellationToken token = cancellation.Token;
            this.cancellation = cancellation;
            return Task.Run<int>(delegate {
                return this.GetRowCountCore(token);
            }, token);
        }
        
        private int GetRowCountCore(CancellationToken cancel)
        {
            cancel.ThrowIfCancellationRequested();
            return this.RowCount;
        }
        
        public int GetRowHandle(int sourceRowIndex) => 
            this.ActualDataSource.GetRowHandle(sourceRowIndex);
        
        public int GetSourceRowIndex(int rowHandle) => 
            this.ActualDataSource.GetSourceRowHandle(rowHandle);
        
        public object GetTotalSummaryValue(string fieldName, ConditionalFormatSummaryType summaryType)
        {
            SummaryType type = this.ConvertSummaryType(summaryType);
            GridColumnSummary summary = this.TryGetSummary(this.TotalSummaries, fieldName, type);
            if (summary == null)
            {
                summary = this.TryGetSummary(this.ConditionalFormatSummaries, fieldName, type);
                if (summary == null)
                {
                    GridColumnSummary summary1 = new GridColumnSummary(fieldName);
                    summary1.Type = type;
                    summary = summary1;
                    this.ConditionalFormatSummaries.Add(summary);
                }
            }
            return summary.SummaryValue;
        }
        
        private int GetVisibleRowCount()
        {
            if (this.GroupCount == 0)
            {
                return this.RowCount;
            }
            int num = 0;
            for (int i = 0; i < this.GroupCount; i++)
            {
                IGroupInfo groupInfo = this.GetGroupInfo(~i);
                num += 1 + (groupInfo.IsCollapsed ? 0 : groupInfo.RowCount);
            }
            return num;
        }
        
        private bool IsEmptyDataSource(IGridDataSource dataSource) => 
            (dataSource is EmptyGridDataSource);
        
        public bool IsGroupCollapsed(int rowHandle) => 
            (this.IsGrouped && this.groupedDataSource.IsGroupRowCollapsed(rowHandle));
        
        public bool IsGroupRow(int rowHandle) => 
            (this.IsGrouped && this.groupedDataSource.IsGroupRow(rowHandle));
        
        private void OnActualDataSourceSelectionChanged(object sender, EventArgs e)
        {
            this.RaiseSelectionChanged();
        }
        
        private void OnDataSourceRowCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action != ((NotifyCollectionChangedAction) ((int) NotifyCollectionChangedAction.Move)))
            {
                this.ResetSummaries();
            }
            this.RaiseRowCollectionChanged(e);
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceRowInserted);
                    return;
                
                case NotifyCollectionChangedAction.Remove:
                    this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceRowDeleted);
                    return;
                
                case NotifyCollectionChangedAction.Replace:
                    this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceRowChanged);
                    return;
                
                case NotifyCollectionChangedAction.Move:
                    break;
                
                case NotifyCollectionChangedAction.Reset:
                    this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceChanged);
                    break;
                
                default:
                    return;
            }
        }
        
        private void OnGroupRowCollapsed(object sender, RowEventArgs e)
        {
            this.RaiseGroupRowCollapsed(e);
        }
        
        private void OnGroupRowCollapsing(object sender, RowAllowEventArgs e)
        {
            this.RaiseGroupRowCollapsing(e);
        }
        
        private void OnGroupRowExpanded(object sender, RowEventArgs e)
        {
            this.RaiseGroupRowExpanded(e);
        }
        
        private void OnGroupRowExpanding(object sender, RowAllowEventArgs e)
        {
            this.RaiseGroupRowExpanding(e);
        }
        
        private void OnSortParametersChanged()
        {
            this.UpdateGrouper(false);
            this.UpdateSorter(false);
            this.ResetSortedIndicesSummaries();
            this.UpdateActualDataSource();
            this.RaiseSelectionChanged();
            this.RaiseDataChanged(GridDataControllerDataChangedType.SortingChanged);
        }
        
        private void OnSortParametersChanging()
        {
            this.RaiseBeforeDataChanged(GridDataControllerDataChangedType.SortingChanged);
        }
        
        protected internal virtual void RaiseBeforeDataChanged(GridDataControllerDataChangedType type)
        {
            if (this.onBeforeDataChanged != null)
            {
                GridDataControllerDataChangedEventArgs args = new GridDataControllerDataChangedEventArgs {
                    ChangeType = type
                };
                this.onDataChanged(this, args);
            }
        }
        
        protected internal virtual void RaiseCalculateCustomSummary(CustomSummaryEventArgs args)
        {
            if (this.onCalculateCustomSummary != null)
            {
                this.onCalculateCustomSummary(this, args);
            }
        }
        
        protected internal virtual void RaiseDataChanged(GridDataControllerDataChangedType type)
        {
            if (this.onDataChanged != null)
            {
                GridDataControllerDataChangedEventArgs args = new GridDataControllerDataChangedEventArgs {
                    ChangeType = type
                };
                this.onDataChanged(this, args);
            }
        }
        
        protected virtual void RaiseGroupRowCollapsed(RowEventArgs args)
        {
            if (this.GroupRowCollapsed != null)
            {
                this.GroupRowCollapsed(this, args);
            }
        }
        
        protected virtual bool RaiseGroupRowCollapsing(RowAllowEventArgs args)
        {
            if (this.GroupRowCollapsing == null)
            {
                return true;
            }
            this.GroupRowCollapsing(this, args);
            return args.Allow;
        }
        
        protected virtual void RaiseGroupRowExpanded(RowEventArgs args)
        {
            if (this.GroupRowExpanded != null)
            {
                this.GroupRowExpanded(this, args);
            }
        }
        
        protected virtual bool RaiseGroupRowExpanding(RowAllowEventArgs args)
        {
            if (this.GroupRowExpanding == null)
            {
                return true;
            }
            this.GroupRowExpanding(this, args);
            return args.Allow;
        }
        
        protected virtual void RaiseRowCollectionChanged(NotifyCollectionChangedEventArgs e)
        {
            if (this.onRowCollectionChanged != null)
            {
                this.onRowCollectionChanged(this, e);
            }
        }
        
        protected virtual void RaiseSelectionChanged()
        {
            this.RaiseSelectionChangedCore();
        }
        
        protected virtual void RaiseSelectionChangedCore()
        {
            if (this.onSelectionChanged != null)
            {
                this.onSelectionChanged(this, EventArgs.Empty);
            }
        }
        
        public void RefreshData()
        {
            this.ActualDataSource.RefreshData();
        }
        
        public void ResetSelection()
        {
            this.ActualDataSource.ResetSelection();
        }
        
        private void ResetSortedIndicesSummaries()
        {
            this.ConditionalFormatSummaries.ResetSortedIndicesSummaries();
        }
        
        private void ResetSummaries()
        {
            this.TotalSummaries.Reset();
            if (this.GroupedDataSource != null)
            {
                this.GroupedDataSource.ResetGroupSummaries();
            }
            this.ConditionalFormatSummaries.Reset();
        }
        
        public int RevealRowHandle(int rowHandle) => 
            (!this.IsGrouped ? rowHandle : this.groupedDataSource.RevealRowHandle(rowHandle));
        
        private void SubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged += new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
            }
        }
        
        private void SubscribeGroupedDataSourceEvents()
        {
            if (this.GroupedDataSource != null)
            {
                this.GroupedDataSource.GroupRowCollapsing += new RowAllowEventHandler(this.OnGroupRowCollapsing);
                this.GroupedDataSource.GroupRowCollapsed += new RowEventHandler(this.OnGroupRowCollapsed);
                this.GroupedDataSource.GroupRowExpanding += new RowAllowEventHandler(this.OnGroupRowExpanding);
                this.GroupedDataSource.GroupRowExpanded += new RowEventHandler(this.OnGroupRowExpanded);
            }
        }
        
        private Type TryDetectDataObjectTypeByDataSource(Type type)
        {
            TypeInfo typeInfo = IntrospectionExtensions.GetTypeInfo(type);
            if (typeInfo.IsGenericType)
            {
                Type[] typeArray = typeInfo.GenericTypeArguments;
                if (((typeArray != null) && (typeArray.Length == 1)) && IntrospectionExtensions.GetTypeInfo(typeof(GenericListGridDataSource<>).MakeGenericType(typeArray)).IsAssignableFrom(IntrospectionExtensions.GetTypeInfo(this.DataSource.ActualDataSourceType)))
                {
                    return typeArray[0];
                }
            }
            if ((typeInfo.BaseType == null) || (typeInfo.BaseType == typeof(object)))
            {
                return null;
            }
            return this.TryDetectDataObjectTypeByDataSource(typeInfo.BaseType);
        }
        
        internal IRowData TryGetFirstRowData()
        {
            IGridDataSource dataSource = this.DataSource;
            return ((dataSource.RowCount > 0) ? dataSource.GetRow(0, null) : null);
        }
        
        private GridColumnSummary TryGetSummary(GridColumnSummaryCollection summaries, string fieldName, SummaryType type)
        {
            using (IEnumerator<GridColumnSummary> enumerator = summaries.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    GridColumnSummary current = enumerator.Current;
                    if ((current.Type == type) && (current.FieldName == fieldName))
                    {
                        return current;
                    }
                }
            }
            return null;
        }
        
        private void UnsubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
            }
        }
        
        private void UnsubscribeGroupedDataSourceEvents()
        {
            if (this.GroupedDataSource != null)
            {
                this.GroupedDataSource.GroupRowCollapsing -= new RowAllowEventHandler(this.OnGroupRowCollapsing);
                this.GroupedDataSource.GroupRowCollapsed -= new RowEventHandler(this.OnGroupRowCollapsed);
                this.GroupedDataSource.GroupRowExpanding -= new RowAllowEventHandler(this.OnGroupRowExpanding);
                this.GroupedDataSource.GroupRowExpanded -= new RowEventHandler(this.OnGroupRowExpanded);
            }
        }
        
        private void UpdateActualDataSource()
        {
        }
        
        private bool UpdateFilter()
        {
            if ((this.IsEmptyDataSource(this.DataSource) || (this.Predicate == null)) || this.DataSource.SupportsFiltering)
            {
                if (this.filteredDataSource == null)
                {
                    return false;
                }
                this.filteredDataSource = null;
                return true;
            }
            bool flag = false;
            if (this.filteredDataSource == null)
            {
                this.filteredDataSource = new FilteredGridDataSource();
                this.filteredDataSource.Locker = this;
                flag = true;
            }
            if (!object.ReferenceEquals(this.filteredDataSource.DataSource, this.DataSource))
            {
                this.filteredDataSource.DataSource = this.dataSource;
                flag = true;
            }
            if (!object.ReferenceEquals(this.filteredDataSource.Predicate, this.Predicate))
            {
                this.filteredDataSource.Predicate = this.Predicate;
                flag = true;
            }
            return flag;
        }
        
        private bool UpdateGrouper(bool forceRegroup)
        {
            if (this.GroupBy == null)
            {
                if (this.groupedDataSource == null)
                {
                    return false;
                }
                if (this.groupedDataSource.IsGroupRow(this.groupedDataSource.SelectedRow))
                {
                    this.SelectedRow = this.groupedDataSource.SelectedRow + 1;
                }
                this.UnsubscribeGroupedDataSourceEvents();
                this.groupedDataSource = null;
                return true;
            }
            bool flag = false;
            this.sortedDataSource = null;
            if (this.groupedDataSource == null)
            {
                this.groupedDataSource = new GroupedGridDataSource();
                this.SubscribeGroupedDataSourceEvents();
                this.groupedDataSource.OnGroupSummariesChanged(this.GroupSummaries);
                this.groupedDataSource.Locker = this;
                flag = true;
            }
            this.groupedDataSource.AreGroupsInitiallyCollapsed = this.AreGroupsInitiallyCollapsed;
            if (!object.ReferenceEquals(this.groupedDataSource.DataSource, this.FilteredDataSource))
            {
                this.groupedDataSource.DataSource = this.FilteredDataSource;
                flag = true;
            }
            if (!object.ReferenceEquals(this.groupedDataSource.GroupBy, this.GroupBy))
            {
                this.groupedDataSource.GroupBy = this.GroupBy;
                flag = true;
            }
            if (!object.Equals(this.groupedDataSource.Comparer, this.Comparer))
            {
                this.groupedDataSource.Comparer = this.Comparer;
                flag = true;
            }
            if (forceRegroup)
            {
                this.groupedDataSource.ResetIndexMap();
                flag = true;
            }
            return (flag | forceRegroup);
        }
        
        public void UpdateGroupSummaries()
        {
            if (this.groupedDataSource != null)
            {
                this.groupedDataSource.OnGroupSummariesChanged(this.GroupSummaries);
            }
        }
        
        private bool UpdateSorter(bool forceSort)
        {
            if (((this.Comparer == null) || this.DataSource.SupportsSorting) || (this.GroupBy != null))
            {
                if (this.sortedDataSource == null)
                {
                    return false;
                }
                IList<int> indexMap = this.sortedDataSource.IndexMap;
                int num = (indexMap != null) ? this.sortedDataSource.SelectedRow : -1;
                this.sortedDataSource = null;
                if ((num >= 0) && (num < indexMap.Count))
                {
                    this.ActualDataSource.SelectedRow = indexMap.ElementAt(num);
                }
                return true;
            }
            bool flag = false;
            if (this.sortedDataSource == null)
            {
                this.sortedDataSource = new SortedGridDataSource();
                this.sortedDataSource.Locker = this;
                flag = true;
            }
            if (!object.Equals(this.sortedDataSource.Comparer, this.Comparer))
            {
                this.sortedDataSource.Comparer = this.Comparer;
                flag = true;
            }
            if (!object.ReferenceEquals(this.sortedDataSource.DataSource, this.FilteredDataSource))
            {
                this.sortedDataSource.DataSource = this.FilteredDataSource;
                flag = true;
            }
            if (forceSort)
            {
                this.sortedDataSource.ResetIndexMap();
                flag = true;
            }
            return flag;
        }
        
        public GridColumnSummaryCollection TotalSummaries =>
            this.totalSummaries;
        
        public GridColumnSummaryCollection GroupSummaries =>
            this.groupSummaries;
        
        public GridColumnSummaryCollection ConditionalFormatSummaries =>
            this.conditionalFormatSummaries;
        
        public bool IsGrouped =>
            object.ReferenceEquals(this.ActualDataSource, this.groupedDataSource);
        
        public int SelectedRow
        {
            get
            {
                try
                {
                    return this.ActualDataSource.SelectedRow;
                }
                catch
                {
                    return -1;
                }
            }
            set
            {
                if (this.SelectedRow != value)
                {
                    try
                    {
                        this.ActualDataSource.ForceSetSelectedRow(value);
                    }
                    catch
                    {
                    }
                    this.RaiseSelectionChanged();
                }
            }
        }
        
        public IGridDataSource DataSource
        {
            get => 
                this.dataSource.DataSource;
            set
            {
                if (!object.ReferenceEquals(this.dataSource.DataSource, value))
                {
                    this.RaiseBeforeDataChanged(GridDataControllerDataChangedType.DataSourceChanged);
                    this.UnsubscribeDataSourceEvents();
                    this.dataObjectType = null;
                    this.dataSource = new InnerGridDataSource();
                    this.dataSource.DataSource = value;
                    this.UpdateFilter();
                    this.UpdateSorter(true);
                    this.UpdateGrouper(true);
                    this.UpdateActualDataSource();
                    this.ResetSummaries();
                    this.SubscribeDataSourceEvents();
                    this.SelectedRow = 0;
                    this.RaiseDataChanged(GridDataControllerDataChangedType.DataSourceChanged);
                }
            }
        }
        
        public Type ActualDataSourceType =>
            ((this.DataSource != null) ? this.DataSource.ActualDataSourceType : base.GetType());
        
        private IInnerGridDataSource ActualDataSource =>
            this.SortedDataSource;
        
        private IInnerGridDataSource FilteredDataSource =>
            ((this.filteredDataSource == null) ? ((IInnerGridDataSource) this.dataSource) : ((IInnerGridDataSource) this.filteredDataSource));
        
        private IInnerGridDataSource SortedDataSource =>
            ((this.groupedDataSource == null) ? ((this.sortedDataSource == null) ? this.FilteredDataSource : this.sortedDataSource) : this.groupedDataSource);
        
        internal GroupedGridDataSource GroupedDataSource =>
            this.groupedDataSource;
        
        public SortDescriptor<IRowData> Comparer
        {
            get => 
                this.comparer;
            set
            {
                if (!object.Equals(this.comparer, value))
                {
                    this.OnSortParametersChanging();
                    this.comparer = value;
                    this.OnSortParametersChanged();
                }
            }
        }
        
        public GroupDescriptor<IRowData> GroupBy
        {
            get => 
                this.groupBy;
            set
            {
                if (!object.Equals(this.groupBy, value))
                {
                    this.RaiseBeforeDataChanged(GridDataControllerDataChangedType.GroupingChanged);
                    this.groupBy = value;
                    this.UpdateGrouper(true);
                    this.UpdateSorter(false);
                    this.ResetSortedIndicesSummaries();
                    this.UpdateActualDataSource();
                    this.RaiseSelectionChanged();
                    this.RaiseDataChanged(GridDataControllerDataChangedType.GroupingChanged);
                }
            }
        }
        
        public Predicate<IRowData> Predicate
        {
            get => 
                this.predicate;
            set
            {
                if (!object.ReferenceEquals(this.predicate, value))
                {
                    this.RaiseBeforeDataChanged(GridDataControllerDataChangedType.FilterChanged);
                    this.predicate = value;
                    if (this.UpdateFilter())
                    {
                        this.UpdateGrouper(true);
                        this.UpdateSorter(true);
                        this.ResetSummaries();
                    }
                    this.UpdateActualDataSource();
                    this.RaiseSelectionChanged();
                    this.RaiseDataChanged(GridDataControllerDataChangedType.FilterChanged);
                }
            }
        }
        
        public bool AreGroupsInitiallyCollapsed
        {
            get => 
                this.areGroupsInitiallyCollapsed;
            set
            {
                if (this.AreGroupsInitiallyCollapsed != value)
                {
                    this.areGroupsInitiallyCollapsed = value;
                    if (this.GroupedDataSource != null)
                    {
                        this.GroupedDataSource.AreGroupsInitiallyCollapsed = this.AreGroupsInitiallyCollapsed;
                    }
                }
            }
        }
        
        public bool SupportsSorting =>
            true;
        
        public bool SupportsGrouping =>
            true;
        
        public bool SupportsFiltering =>
            true;
        
        public int RowCount =>
            this.ActualDataSource.RowCount;
        
        public int VisibleRowCount =>
            this.GetVisibleRowCount();
        
        public int GroupCount =>
            (this.IsGrouped ? this.GroupedDataSource.GroupCount : 0);
    }
}
