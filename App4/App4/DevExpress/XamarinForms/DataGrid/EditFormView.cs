// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.ComponentModel;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using Xamarin.Forms;
    
    public class EditFormView : View
    {
        public static readonly BindableProperty DataGridViewProperty;
        public static readonly BindableProperty ItemProperty;
        public static readonly BindableProperty CheckboxColorProperty;
        public static readonly BindableProperty PaddingProperty;
        public static readonly BindableProperty ItemPaddingProperty;
        public static readonly BindableProperty FontColorProperty;
        public static readonly BindableProperty FontSizeProperty;
        public static readonly BindableProperty FontFamilyProperty;
        public static readonly BindableProperty FontAttributesProperty;
        
        static EditFormView()
        {
            ParameterExpression expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
            DataGridViewProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, DevExpress.XamarinForms.DataGrid.DataGridView>(Expression.Lambda<Func<EditFormView, DevExpress.XamarinForms.DataGrid.DataGridView>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("DataGridView")), expressionArray1), null, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
            ItemProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, object>(Expression.Lambda<Func<EditFormView, object>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("Item")), expressionArray2), null, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            CheckboxColorProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, Color>(Expression.Lambda<Func<EditFormView, Color>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("CheckboxColor")), expressionArray3), Color.Default, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            Thickness defaultValue = new Thickness();
            PaddingProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, Thickness>(Expression.Lambda<Func<EditFormView, Thickness>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("Padding")), expressionArray4), defaultValue, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray5 = new ParameterExpression[] { expression };
            defaultValue = new Thickness();
            ItemPaddingProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, Thickness>(Expression.Lambda<Func<EditFormView, Thickness>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("ItemPadding")), expressionArray5), defaultValue, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray6 = new ParameterExpression[] { expression };
            FontColorProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, Color>(Expression.Lambda<Func<EditFormView, Color>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("FontColor")), expressionArray6), Color.Default, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray7 = new ParameterExpression[] { expression };
            FontSizeProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, double>(Expression.Lambda<Func<EditFormView, double>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("FontSize")), expressionArray7), 0.0, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray8 = new ParameterExpression[] { expression };
            FontFamilyProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, string>(Expression.Lambda<Func<EditFormView, string>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("FontFamily")), expressionArray8), string.Empty, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(EditFormView), "o");
            ParameterExpression[] expressionArray9 = new ParameterExpression[] { expression };
            FontAttributesProperty = BindingUtils.Instance.CreateBindableProperty<EditFormView, Xamarin.Forms.FontAttributes>(Expression.Lambda<Func<EditFormView, Xamarin.Forms.FontAttributes>>((Expression) Expression.Property((Expression) expression, typeof(EditFormView).GetProperty("FontAttributes")), expressionArray9), 0, BindingMode.OneWay, null, null, null, null, null);
        }
        
        public void Commit()
        {
            IEditFormController editFormController = this.EditFormController;
            if (editFormController == null)
            {
                IEditFormController local1 = editFormController;
            }
            else
            {
                editFormController.Commit();
            }
        }
        
        public DevExpress.XamarinForms.DataGrid.DataGridView DataGridView
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.DataGridView) base.GetValue(DataGridViewProperty));
            set => 
                base.SetValue(DataGridViewProperty, value);
        }
        
        public object Item
        {
            get => 
                base.GetValue(ItemProperty);
            set => 
                base.SetValue(ItemProperty, value);
        }
        
        public Thickness Padding
        {
            get => 
                ((Thickness) base.GetValue(PaddingProperty));
            set => 
                base.SetValue(PaddingProperty, value);
        }
        
        public Thickness ItemPadding
        {
            get => 
                ((Thickness) base.GetValue(ItemPaddingProperty));
            set => 
                base.SetValue(ItemPaddingProperty, value);
        }
        
        public Color CheckboxColor
        {
            get => 
                ((Color) base.GetValue(CheckboxColorProperty));
            set => 
                base.SetValue(CheckboxColorProperty, value);
        }
        
        public Color FontColor
        {
            get => 
                ((Color) base.GetValue(FontColorProperty));
            set => 
                base.SetValue(FontColorProperty, value);
        }
        
        public double FontSize
        {
            get => 
                ((double) ((double) base.GetValue(FontSizeProperty)));
            set => 
                base.SetValue(FontSizeProperty, (double) value);
        }
        
        public string FontFamily
        {
            get => 
                ((string) ((string) base.GetValue(FontFamilyProperty)));
            set => 
                base.SetValue(FontFamilyProperty, value);
        }
        
        public Xamarin.Forms.FontAttributes FontAttributes
        {
            get => 
                ((Xamarin.Forms.FontAttributes) base.GetValue(FontAttributesProperty));
            set => 
                base.SetValue(FontAttributesProperty, value);
        }
        
        [Browsable(false), EditorBrowsable((EditorBrowsableState) EditorBrowsableState.Never)]
        public IEditFormController EditFormController { get; set; }
    }
}
