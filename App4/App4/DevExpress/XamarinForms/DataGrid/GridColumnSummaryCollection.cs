// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.Compatibility.System;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.Collections.ObjectModel;
    
    public class GridColumnSummaryCollection : ObservableCollection<GridColumnSummary>, System.ICloneable
    {
        private readonly IGridDataController controller;
        private int rowHandleFrom;
        private int rowHandleTo;
        private InnerGroupInfo groupInfo;
        
        public GridColumnSummaryCollection(IGridDataController controller)
        {
            this.controller = controller;
            this.RowHandleFrom = -1;
            this.RowHandleTo = -1;
        }
        
        private void AttachItem(GridColumnSummary item)
        {
            if (item != null)
            {
                item.Controller = this.controller;
                item.RowHandleFrom = this.RowHandleFrom;
                item.RowHandleTo = this.RowHandleTo;
            }
        }
        
        protected override void ClearItems()
        {
            int num = base.Count;
            for (int i = 0; i < num; i++)
            {
                this.DetachItem(base[i]);
            }
            base.ClearItems();
        }
        
        public GridColumnSummaryCollection Clone()
        {
            GridColumnSummaryCollection summarys = new GridColumnSummaryCollection(this.controller);
            int num = base.Count;
            for (int i = 0; i < num; i++)
            {
                summarys.Add(base[i].Clone());
            }
            return summarys;
        }
        
        private void DetachItem(GridColumnSummary item)
        {
            if (item != null)
            {
                item.Controller = null;
                item.RowHandleFrom = -1;
                item.RowHandleTo = -1;
            }
        }
        
        object System.ICloneable.Clone() => 
            this.Clone();
        
        protected override void InsertItem(int index, GridColumnSummary item)
        {
            base.InsertItem(index, item);
            this.AttachItem(item);
        }
        
        protected override void RemoveItem(int index)
        {
            this.DetachItem(base[index]);
            base.RemoveItem(index);
        }
        
        internal void Reset()
        {
            int num = base.Count;
            for (int i = 0; i < num; i++)
            {
                base[i].Reset();
            }
        }
        
        internal void ResetSortedIndicesSummaries()
        {
            int num = base.Count;
            for (int i = 0; i < num; i++)
            {
                if (base[i].Type == (SummaryType.Custom | SummaryType.Sum))
                {
                    base[i].Reset();
                }
            }
        }
        
        protected override void SetItem(int index, GridColumnSummary item)
        {
            this.DetachItem(base[index]);
            base.SetItem(index, item);
            this.AttachItem(item);
        }
        
        internal int RowHandleFrom
        {
            get => 
                this.rowHandleFrom;
            set
            {
                if (this.RowHandleFrom != value)
                {
                    this.rowHandleFrom = value;
                    for (int i = 0; i < base.Count; i++)
                    {
                        base[i].RowHandleFrom = value;
                        base[i].Reset();
                    }
                }
            }
        }
        
        internal int RowHandleTo
        {
            get => 
                this.rowHandleTo;
            set
            {
                if (this.RowHandleTo != value)
                {
                    this.rowHandleTo = value;
                    for (int i = 0; i < base.Count; i++)
                    {
                        base[i].RowHandleTo = value;
                        base[i].Reset();
                    }
                }
            }
        }
        
        internal InnerGroupInfo GroupInfo
        {
            get => 
                this.groupInfo;
            set
            {
                if (!object.ReferenceEquals(this.groupInfo, value))
                {
                    this.groupInfo = value;
                    for (int i = 0; i < base.Count; i++)
                    {
                        base[i].GroupInfo = this.groupInfo;
                        base[i].Reset();
                    }
                }
            }
        }
    }
}
