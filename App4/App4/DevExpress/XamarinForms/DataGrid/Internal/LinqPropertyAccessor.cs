// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Linq.Expressions;
    using System.Reflection;
    
    public class LinqPropertyAccessor : PropertyAccessor
    {
        private readonly PropertyInfo property;
        private readonly FieldInfo field;
        private readonly Func<object, object> getter;
        private readonly Dictionary<Type, object> genericGetters;
        private Type propertyType;
        
        public LinqPropertyAccessor(Type objectType, string propertyName, PropertyInfo property, FieldInfo field) : base(objectType, propertyName)
        {
            this.genericGetters = new Dictionary<Type, object>();
            this.property = property;
            this.field = field;
            ParameterExpression expression = Expression.Parameter(typeof(object), "d");
            ParameterExpression result = Expression.Variable(typeof(object), "final");
            Expression expression3 = this.GenerateGetPropertyExpression(result, (Expression) expression, base.PropertyName);
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { result };
            Expression[] expressionArray2 = new Expression[] { expression3, (Expression) result };
            BlockExpression expression4 = Expression.Block(expressionArray1, expressionArray2);
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            this.getter = Expression.Lambda<Func<object, object>>((Expression) expression4, expressionArray3).Compile();
            if (property != null)
            {
                this.propertyType = property.get_PropertyType();
            }
            else if (field != null)
            {
                this.propertyType = field.get_FieldType();
            }
        }
        
        private Func<object, T> CreateGenericGetter<T>()
        {
            ParameterExpression expression = Expression.Parameter(typeof(object), "d");
            ParameterExpression result = Expression.Variable(typeof(T), "final");
            Expression expression3 = this.GenerateGetPropertyExpressionGeneric<T>(result, (Expression) expression, base.PropertyName);
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { result };
            Expression[] expressionArray2 = new Expression[] { expression3, (Expression) result };
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            return Expression.Lambda<Func<object, T>>((Expression) Expression.Block(expressionArray1, expressionArray2), expressionArray3).Compile();
        }
        
        private Expression GenerateGetPropertyExpression(ParameterExpression result, Expression instance, string propertyName)
        {
            UnaryExpression expression = Expression.Convert((Expression) Expression.PropertyOrField((Expression) Expression.Convert(instance, base.ObjectType), propertyName), typeof(object));
            return (Expression) Expression.Assign((Expression) result, (Expression) expression);
        }
        
        private Expression GenerateGetPropertyExpressionGeneric<T>(ParameterExpression result, Expression instance, string propertyName)
        {
            MemberExpression expression = Expression.PropertyOrField((Expression) Expression.Convert(instance, base.ObjectType), propertyName);
            return (Expression) Expression.Assign((Expression) result, (Expression) expression);
        }
        
        private Func<object, T> GetGenericGetter<T>()
        {
            object obj2;
            Type type = typeof(T);
            if (!this.genericGetters.TryGetValue(type, ref obj2))
            {
                obj2 = this.CreateGenericGetter<T>();
                this.genericGetters.set_Item(type, obj2);
            }
            return (Func<object, T>) obj2;
        }
        
        public override object GetValue(object obj) => 
            this.getter(obj);
        
        public override T GetValueGeneric<T>(object obj) => 
            this.GetGenericGetter<T>()(obj);
        
        public override void SetValue(object obj, object value)
        {
            if (this.property != null)
            {
                ReflectionPropertyAccessor.SetPropertyValue(obj, value, this.property);
            }
            else if (this.field != null)
            {
                FieldPropertyAccessor.SetFieldValue(obj, value, this.field);
            }
        }
        
        public override Type PropertyType =>
            this.propertyType;
    }
}
