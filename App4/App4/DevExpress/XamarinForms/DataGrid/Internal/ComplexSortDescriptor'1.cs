// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using System;
    using System.Collections.Generic;
    
    public class ComplexSortDescriptor<T> : SortDescriptor<T>, IComparer<T>
    {
        private readonly List<SortDescriptor<T>> descriptors;
        
        public ComplexSortDescriptor()
        {
            this.descriptors = new List<SortDescriptor<T>>();
        }
        
        public void Add(SortDescriptor<T> descriptor)
        {
            this.descriptors.Add(descriptor);
        }
        
        public override int Compare(T firstValue, T secondValue) => 
            base.Comparer.Compare(firstValue, secondValue);
        
        public override bool Equals(object obj)
        {
            ComplexSortDescriptor<T> descriptor = obj as ComplexSortDescriptor<T>;
            if (descriptor == null)
            {
                if (this.descriptors.get_Count() != 1)
                {
                    return false;
                }
                SortDescriptor<T> descriptor2 = obj as SortDescriptor<T>;
                return ((descriptor2 != null) ? object.Equals(descriptor2, this.descriptors.get_Item(0)) : false);
            }
            int num = this.descriptors.get_Count();
            if (descriptor.descriptors.get_Count() != num)
            {
                return false;
            }
            for (int i = 0; i < num; i++)
            {
                if (!object.Equals(descriptor.descriptors.get_Item(i), this.descriptors.get_Item(i)))
                {
                    return false;
                }
            }
            return true;
        }
        
        public override int GetHashCode()
        {
            int num = this.descriptors.get_Count();
            int num2 = ~num;
            for (int i = 0; i < num; i++)
            {
                num2 ^= this.descriptors.get_Item(i).GetHashCode();
            }
            return num2;
        }
        
        int IComparer<T>.Compare(T firstValue, T secondValue)
        {
            int num = this.descriptors.get_Count();
            if (num <= 0)
            {
                throw new InvalidOperationException();
            }
            for (int i = 0; i < num; i++)
            {
                int num3 = this.descriptors.get_Item(i).Compare(firstValue, secondValue);
                if (num3 != 0)
                {
                    return num3;
                }
            }
            return 0;
        }
        
        public SortDescriptor<T> TryConvertToSingle() => 
            ((this.descriptors.get_Count() > 0) ? ((this.descriptors.get_Count() != 1) ? this : this.descriptors.get_Item(0)) : null);
        
        public IReadOnlyList<SortDescriptor<T>> Descriptors =>
            ((IReadOnlyList<SortDescriptor<T>>) this.descriptors);
        
        public override IComparer<T> AscendingComparer
        {
            get => 
                this;
            set
            {
            }
        }
        
        public override bool IsSingleColumn =>
            (this.Descriptors.get_Count() == 1);
        
        public override ColumnSortOrder SortOrder
        {
            get
            {
                int num = this.Descriptors.get_Count();
                return ((num > 0) ? ((num != 1) ? ColumnSortOrder.Ascending : this.Descriptors.get_Item(0).SortOrder) : ColumnSortOrder.None);
            }
            set
            {
            }
        }
    }
}
