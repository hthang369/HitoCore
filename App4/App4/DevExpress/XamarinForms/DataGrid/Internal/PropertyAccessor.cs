// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    
    public abstract class PropertyAccessor
    {
        private readonly Type objectType;
        private readonly string propertyName;
        private static bool isRunningiOS = (PlatformHelper.Platform == PlatformHelper.Platforms.iOS);
        
        protected PropertyAccessor(Type objectType, string propertyName)
        {
            this.objectType = objectType;
            this.propertyName = propertyName;
        }
        
        public static PropertyAccessor Create(Type objectType, string propertyName, IPropertyTypeProvider typeProvider)
        {
            PropertyAccessor accessor = CreateSimple(objectType, propertyName, typeProvider);
            if (accessor == null)
            {
                accessor = CreateComplex(objectType, propertyName, typeProvider);
            }
            return accessor;
        }
        
        private static PropertyAccessor CreateComplex(Type objectType, string propertyName, IPropertyTypeProvider typeProvider)
        {
            char[] chArray1 = new char[] { '.' };
            string[] properties = propertyName.Split(chArray1);
            return ((properties.Length > 1) ? new ComplexPropertyAccessor(objectType, properties, typeProvider) : null);
        }
        
        private static PropertyAccessor CreateFromField(Type objectType, string propertyName, FieldInfo field)
        {
            if (field == null)
            {
                return null;
            }
            PropertyAccessor accessor = !isRunningiOS ? ((PropertyAccessor) new LinqPropertyAccessor(objectType, propertyName, null, field)) : ((PropertyAccessor) new FieldPropertyAccessor(objectType, propertyName, field));
            accessor.IsReadOnly = field.IsInitOnly;
            return accessor;
        }
        
        private static PropertyAccessor CreateFromProperty(Type objectType, string propertyName, PropertyInfo property, IPropertyTypeProvider typeProvider)
        {
            if ((objectType != null) && (objectType.FullName == "System.Data.DataRow"))
            {
                return new DataRowPropertyAccessor(objectType, propertyName, typeProvider);
            }
            if (property == null)
            {
                return null;
            }
            PropertyAccessor accessor = !isRunningiOS ? ((PropertyAccessor) new LinqPropertyAccessor(objectType, propertyName, property, null)) : ((PropertyAccessor) new ReflectionPropertyAccessor(objectType, propertyName, property));
            accessor.IsReadOnly = !property.CanWrite;
            if (!accessor.IsReadOnly && !property.SetMethod.IsPublic)
            {
                accessor.IsReadOnly = true;
            }
            return accessor;
        }
        
        public static PropertyAccessor CreateSimple(Type objectType, string propertyName, IPropertyTypeProvider typeProvider)
        {
            PropertyAccessor accessor = CreateFromProperty(objectType, propertyName, RuntimeReflectionExtensions.GetRuntimeProperty(objectType, propertyName), typeProvider);
            return ((accessor == null) ? CreateFromField(objectType, propertyName, RuntimeReflectionExtensions.GetRuntimeField(objectType, propertyName)) : accessor);
        }
        
        public abstract object GetValue(object obj);
        public abstract T GetValueGeneric<T>(object obj);
        public abstract void SetValue(object obj, object value);
        
        protected internal Type ObjectType =>
            this.objectType;
        
        public bool IsReadOnly { get; protected set; }
        
        public string PropertyName =>
            this.propertyName;
        
        public abstract Type PropertyType { get; }
    }
}
