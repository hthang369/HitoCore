// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    
    public static class IListExtensions
    {
        public static int BinarySearch<T>(this IList<T> list, T item) => 
            list.BinarySearch<T>(0, list.get_Count(), item, ((IComparer<T>) Comparer<T>.get_Default()));
        
        public static int BinarySearch<T>(this IList<T> list, int index, int count, T item, IComparer<T> comparer)
        {
            if (comparer == null)
            {
                comparer = (IComparer<T>) Comparer<T>.get_Default();
            }
            ReverseOrderedList<T> list2 = list as ReverseOrderedList<T>;
            return ((list2 != null) ? list2.BinarySearchOriginalComparer(index, count, item, comparer) : BinarySearchCore<T>(list, index, count, item, comparer));
        }
        
        private static int BinarySearchCore<T>(IList<T> list, int index, int count, T item, IComparer<T> comparer)
        {
            int num = index;
            int num2 = (num + count) - 1;
            while (num <= num2)
            {
                int num3 = num + ((num2 - num) >> 1);
                int num4 = comparer.Compare(item, list.get_Item(num3));
                if (num4 == 0)
                {
                    return num3;
                }
                if (num4 > 0)
                {
                    num = num3 + 1;
                    continue;
                }
                num2 = num3 - 1;
            }
            return ~num;
        }
        
        public static void InsertRange<T>(this IList<T> list, int index, IEnumerable<T> items)
        {
            List<T> list2 = list as List<T>;
            if (list2 != null)
            {
                list2.InsertRange(index, items);
            }
            else
            {
                foreach (T local in items)
                {
                    index++;
                    list.Insert(index, local);
                }
            }
        }
        
        public static void RemoveRange<T>(this IList<T> list, int index, int count)
        {
            List<T> list2 = list as List<T>;
            if (list2 != null)
            {
                list2.RemoveRange(index, count);
            }
            else
            {
                for (int i = 0; i < count; i++)
                {
                    list.RemoveAt(i);
                }
            }
        }
    }
}
