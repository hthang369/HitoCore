// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.Collections.Generic;
    
    public class ComplexPropertyAccessor : PropertyAccessor
    {
        private readonly string[] propertyNames;
        private readonly PropertyAccessor[] accessors;
        private Type propertyType;
        private IPropertyTypeProvider propertyTypeProvider;
        
        public ComplexPropertyAccessor(Type objectType, string[] properties, IPropertyTypeProvider typeProvider) : base(objectType, properties[0])
        {
            this.propertyNames = properties;
            this.accessors = this.CreateAccessors();
            this.propertyTypeProvider = typeProvider;
            if (this.accessors.Length != 0)
            {
                PropertyAccessor accessor = this.accessors[this.accessors.Length - 1];
                this.propertyType = accessor.PropertyType;
                base.IsReadOnly = accessor.IsReadOnly;
            }
        }
        
        private PropertyAccessor[] CreateAccessors()
        {
            List<PropertyAccessor> list = new List<PropertyAccessor>();
            Type objectType = base.ObjectType;
            int length = this.propertyNames.Length;
            int index = 0;
            while (true)
            {
                if (index < length)
                {
                    PropertyAccessor accessor = CreateSimple(objectType, this.propertyNames[index], this.propertyTypeProvider);
                    if (accessor != null)
                    {
                        objectType = accessor.PropertyType;
                        list.Add(accessor);
                        index++;
                        continue;
                    }
                }
                return list.ToArray();
            }
        }
        
        public override object GetValue(object obj)
        {
            if (obj == null)
            {
                return null;
            }
            int length = this.accessors.Length;
            for (int i = 0; i < length; i++)
            {
                object obj1 = this.accessors[i].GetValue(obj);
                obj = obj1;
                if (obj == null)
                {
                    return null;
                }
            }
            return obj;
        }
        
        public override T GetValueGeneric<T>(object obj) => 
            ((T) this.GetValue(obj));
        
        public override void SetValue(object obj, object value)
        {
            if (obj != null)
            {
                int length = this.accessors.Length;
                for (int i = 0; i < length; i++)
                {
                    if (i == (length - 1))
                    {
                        this.accessors[i].SetValue(obj, value);
                        return;
                    }
                    object obj1 = this.accessors[i].GetValue(obj);
                    obj = obj1;
                    if (obj == null)
                    {
                        return;
                    }
                }
            }
        }
        
        public override Type PropertyType =>
            this.propertyType;
    }
}
