// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Data;
    
    public class DataTableGridDataSource : IGridDataSource, IGridColumnsProvider
    {
        private int selectedRow = -1;
        private System.Data.DataTable dataTable;
        private NotifyCollectionChangedEventHandler onRowCollectionChanged;
        private NotifyCollectionChangedEventHandler onGroupCollectionChanged;
        
        event NotifyCollectionChangedEventHandler IGridDataSource.GroupCollectionChanged
        {
            add
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
        }
        
        event NotifyCollectionChangedEventHandler IGridDataSource.RowCollectionChanged
        {
            add
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
        }
        
        public int AddNewRow(IEditableRowData rowData)
        {
            this.DataTable.Rows.Add((DataRow) rowData.DataObject);
            return (this.DataTable.Rows.Count - 1);
        }
        
        public IEditableRowData CreateNewRow()
        {
            DataRowIRowData data1 = new DataRowIRowData();
            data1.DataRow = this.DataTable.NewRow();
            return data1;
        }
        
        public int DeleteRow(int rowHandle)
        {
            this.dataTable.Rows.RemoveAt(rowHandle);
            return rowHandle;
        }
        
        IGroupInfo IGridDataSource.GetGroup(int groupHandle) => 
            null;
        
        public IList<GridColumn> GenerateColumns()
        {
            List<GridColumn> list = new List<GridColumn>();
            if (this.DataTable != null)
            {
                DataColumnCollection columns = this.DataTable.Columns;
                int num = columns.Count;
                for (int i = 0; i < num; i++)
                {
                    GridColumn column = this.TryCreateColumn(columns[i]);
                    if (column != null)
                    {
                        list.Add(column);
                    }
                }
            }
            return (IList<GridColumn>) list;
        }
        
        public IRowData GetRow(int rowHandle, IRowData reuseRow)
        {
            if (this.DataTable == null)
            {
                return null;
            }
            if ((rowHandle < 0) || (rowHandle >= this.RowCount))
            {
                return null;
            }
            DataRowIRowData data = reuseRow as DataRowIRowData;
            if (data == null)
            {
                data = new DataRowIRowData();
            }
            data.RowHandle = rowHandle;
            data.DataRow = this.DataTable.Rows[rowHandle];
            return data;
        }
        
        private void OnDataSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.RaiseRowCollectionChanged(e);
        }
        
        protected virtual void RaiseRowCollectionChanged(NotifyCollectionChangedEventArgs e)
        {
            if (this.onRowCollectionChanged != null)
            {
                this.onRowCollectionChanged(this, e);
            }
        }
        
        private void SubscribeDataSourceEvents()
        {
            INotifyCollectionChanged dataTable = this.DataTable as INotifyCollectionChanged;
            if (dataTable != null)
            {
                dataTable.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnDataSourceCollectionChanged);
            }
        }
        
        private GridColumn TryCreateColumn(DataColumn dataColumn)
        {
            GridColumn column = GridColumnAutoGenerator.TryCreateColumnByValueType(dataColumn.DataType, dataColumn.ColumnName);
            if (column == null)
            {
                return null;
            }
            column.Caption = dataColumn.Caption;
            column.IsReadOnly = dataColumn.ReadOnly;
            return column;
        }
        
        private void UnsubscribeDataSourceEvents()
        {
            INotifyCollectionChanged dataTable = this.DataTable as INotifyCollectionChanged;
            if (dataTable != null)
            {
                dataTable.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnDataSourceCollectionChanged);
            }
        }
        
        public System.Data.DataTable DataTable
        {
            get => 
                this.dataTable;
            set
            {
                if (!object.ReferenceEquals(this.dataTable, value))
                {
                    this.UnsubscribeDataSourceEvents();
                    this.dataTable = value;
                    this.SelectedRow = 0;
                    this.SubscribeDataSourceEvents();
                }
            }
        }
        
        public bool SupportsFiltering =>
            false;
        
        public bool SupportsGrouping =>
            false;
        
        public bool SupportsSorting =>
            false;
        
        public int RowCount =>
            ((this.DataTable != null) ? this.DataTable.Rows.Count : 0);
        
        public int SelectedRow
        {
            get
            {
                int rowCount = this.RowCount;
                return ((rowCount > 0) ? ((this.selectedRow < rowCount) ? ((this.selectedRow >= 0) ? this.selectedRow : -1) : (rowCount - 1)) : -1);
            }
            set => 
                this.selectedRow = value;
        }
        
        public Type ActualDataSourceType =>
            base.GetType();
        
        int IGridDataSource.GroupCount =>
            0;
    }
}
