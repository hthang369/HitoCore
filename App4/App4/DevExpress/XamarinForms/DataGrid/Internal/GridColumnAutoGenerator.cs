// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Xamarin.Forms;
    
    public class GridColumnAutoGenerator
    {
        private void AppendColumns(IEnumerable<FieldInfo> fields, List<GridColumn> result)
        {
            foreach (FieldInfo info in fields)
            {
                GridColumn column = this.TryCreateColumn(info);
                if (column != null)
                {
                    result.Add(column);
                }
            }
        }
        
        private void AppendColumns(IEnumerable<PropertyInfo> properties, List<GridColumn> result)
        {
            foreach (PropertyInfo info in properties)
            {
                GridColumn column = this.TryCreateColumn(info);
                if (column != null)
                {
                    result.Add(column);
                }
            }
        }
        
        private void AppendColumns(Type type, List<GridColumn> result)
        {
            this.AppendColumns(IntrospectionExtensions.GetTypeInfo(type).get_DeclaredProperties(), result);
            this.AppendColumns(IntrospectionExtensions.GetTypeInfo(type).get_DeclaredFields(), result);
        }
        
        public IList<GridColumn> GenerateColumns(Type type)
        {
            List<GridColumn> result = new List<GridColumn>();
            this.AppendColumns(type, result);
            return (IList<GridColumn>) result;
        }
        
        private GridColumn TryCreateColumn(FieldInfo field)
        {
            if (field.get_IsStatic() || !field.get_IsPublic())
            {
                return null;
            }
            return TryCreateColumnByValueType(field.get_FieldType(), field.get_Name());
        }
        
        private GridColumn TryCreateColumn(PropertyInfo property)
        {
            if (!property.get_CanRead())
            {
                return null;
            }
            MethodInfo info = property.get_GetMethod();
            if (((info == null) || info.get_IsStatic()) || !info.get_IsPublic())
            {
                return null;
            }
            return TryCreateColumnByValueType(property.get_PropertyType(), property.get_Name());
        }
        
        public static GridColumn TryCreateColumnByValueType(Type type, string fieldName)
        {
            GridColumn column = TryCreateColumnByValueTypeCore(type);
            if (column != null)
            {
                column.FieldName = fieldName;
                column.IsAutoGenerated = true;
                column.DisplayFormat = TryCreateDisplayFormat(type);
            }
            return column;
        }
        
        private static GridColumn TryCreateColumnByValueTypeCore(Type type) => 
            (!IntrospectionExtensions.GetTypeInfo(type).get_IsEnum() ? (!GridColumn.NumbersComparer.IsNumberType(type) ? ((type != typeof(DateTime)) ? ((type != typeof(bool)) ? ((type != typeof(string)) ? ((type != typeof(ImageSource)) ? null : new ImageColumn()) : new TextColumn()) : new SwitchColumn()) : new DateColumn()) : new NumberColumn()) : new PickerColumn());
        
        private static string TryCreateDisplayFormat(Type type)
        {
            if (type == typeof(DateTime))
            {
                return "{0:d}";
            }
            if (type == typeof(decimal))
            {
                return "{0:c2}";
            }
            if ((type == typeof(float)) || (type == typeof(double)))
            {
                return "{0:f2}";
            }
            return string.Empty;
        }
    }
}
