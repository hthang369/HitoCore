// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Runtime.CompilerServices;
    
    public abstract class TransformationGridDataSource : IInnerGridDataSource, IGridDataSource, IGridDataSourceSupportSortCache
    {
        private IInnerGridDataSource dataSource;
        private IList<int> indexMap;
        private readonly GridDataSourceSelection selection = new GridDataSourceSelection();
        private NotifyCollectionChangedEventHandler onRowCollectionChanged;
        private NotifyCollectionChangedEventHandler onGroupCollectionChanged;
        private EventHandler onSelectionChanged;
        private object indexMapLocker = new object();
        
        event NotifyCollectionChangedEventHandler IGridDataSource.GroupCollectionChanged
        {
            add
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
        }
        
        event NotifyCollectionChangedEventHandler IGridDataSource.RowCollectionChanged
        {
            add
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
        }
        
        public event EventHandler SelectionChanged
        {
            add
            {
                this.onSelectionChanged = (EventHandler) Delegate.Combine((Delegate) this.onSelectionChanged, (Delegate) value);
            }
            remove
            {
                this.onSelectionChanged = (EventHandler) Delegate.Remove((Delegate) this.onSelectionChanged, (Delegate) value);
            }
        }
        
        public int AddNewRow(IEditableRowData rowData) => 
            ((this.DataSource == null) ? -2147483648 : this.DataSource.AddNewRow(rowData));
        
        public void BeginSort()
        {
            if (this.DataSource != null)
            {
                this.DataSource.BeginSort();
            }
        }
        
        protected virtual int CalculateRowCount()
        {
            if (this.DataSource == null)
            {
                return 0;
            }
            this.EnsureIndexMapReady();
            return this.IndexMap.get_Count();
        }
        
        protected abstract CreateIndexMapResult CreateIndexMap();
        public IEditableRowData CreateNewRow() => 
            this.DataSource?.CreateNewRow();
        
        public int DeleteRow(int rowHandle)
        {
            if (this.DataSource == null)
            {
                return -2147483648;
            }
            int num = this.TranslateRowIndex(rowHandle);
            return ((num >= 0) ? this.DataSource.DeleteRow(num) : -2147483648);
        }
        
        public void EndSort()
        {
            if (this.DataSource != null)
            {
                this.DataSource.EndSort();
            }
        }
        
        protected internal void EnsureIndexMapReady()
        {
            object indexMapLocker = this.indexMapLocker;
            lock (indexMapLocker)
            {
                if (this.IndexMap == null)
                {
                    CreateIndexMapResult result = this.CreateIndexMap();
                    this.ReplaceIndexMap(result.IndexMap);
                    if (result.ShouldResetSelection)
                    {
                        this.ResetSelection(result.IndexMap.get_Count());
                    }
                    else
                    {
                        this.SetSelectedRowCore(result.NewSelectionRow, false);
                    }
                }
            }
        }
        
        public void ForceSetSelectedRow(int rowHandle)
        {
            this.SetSelectedRowCore(rowHandle, true);
        }
        
        public IList<GridColumn> GenerateColumns() => 
            this.DataSource?.GenerateColumns();
        
        public virtual IGroupInfo GetGroup(int groupHandle) => 
            null;
        
        private int GetImmediateSourceRowHandle(int rowHandle) => 
            this.TranslateRowIndex(rowHandle);
        
        public IRowData GetRow(int rowHandle, IRowData reuseRow)
        {
            if (this.DataSource == null)
            {
                return null;
            }
            int num = this.TranslateRowIndex(rowHandle);
            if (num < 0)
            {
                return null;
            }
            IRowData row = this.DataSource.GetRow(num, reuseRow);
            reuseRow = row;
            reuseRow.RowHandle = rowHandle;
            return reuseRow;
        }
        
        public abstract int GetRowHandle(int sourceRowIndex);
        public int GetSourceRowHandle(int rowHandle)
        {
            int num = this.TranslateRowIndex(rowHandle);
            IInnerGridDataSource dataSource = this.DataSource;
            return ((dataSource == null) ? num : dataSource.GetSourceRowHandle(num));
        }
        
        protected bool IsSelectedSourceRow(int rowHandle) => 
            (rowHandle == this.Selection.SourceIndex.Value);
        
        public int NotifyRowReplaced(int rowHandle) => 
            this.DataSource.NotifyRowReplaced(this.TranslateRowIndex(rowHandle));
        
        protected virtual int OnDataSourceCollectionChangedCore(object sender, NotifyCollectionChangedEventArgs e) => 
            this.OnDataSourceCollectionReset();
        
        protected int OnDataSourceCollectionReset()
        {
            this.ResetIndexMap();
            CustomNotifyCollectionChangedEventArgs e = new CustomNotifyCollectionChangedEventArgs((NotifyCollectionChangedAction) NotifyCollectionChangedAction.Reset) {
                RowHandle = -2147483648
            };
            this.RaiseRowCollectionChanged(e);
            return e.RowHandle;
        }
        
        protected void OnDataSourceRowCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            int rowHandle = this.OnDataSourceCollectionChangedCore(sender, e);
            CustomNotifyCollectionChangedEventArgs.SetRowHandle(e, rowHandle);
        }
        
        public void PopulateColumnValues<T>(int[] rowHandles, string fieldName, T[] values, IFieldValueVisitor fieldValueVisitor)
        {
            this.DataSource.PopulateColumnValues<T>(rowHandles, fieldName, values, fieldValueVisitor);
        }
        
        public void PopulateSourceRowHandles(int[] rowHandles)
        {
            int length = rowHandles.Length;
            for (int i = 0; i < length; i++)
            {
                rowHandles[i] = this.TranslateRowIndex(rowHandles[i]);
            }
        }
        
        protected virtual void RaiseGroupCollectionChanged(CustomNotifyCollectionChangedEventArgs e)
        {
            if (this.onGroupCollectionChanged != null)
            {
                this.onGroupCollectionChanged(this, e);
            }
        }
        
        protected virtual void RaiseRowCollectionChanged(CustomNotifyCollectionChangedEventArgs e)
        {
            if (this.onRowCollectionChanged != null)
            {
                this.onRowCollectionChanged(this, e);
            }
        }
        
        protected virtual void RaiseSelectionChanged()
        {
            if (this.onSelectionChanged != null)
            {
                this.onSelectionChanged(this, EventArgs.Empty);
            }
        }
        
        public void RefreshData()
        {
            this.ResetIndexMap();
            if (this.DataSource != null)
            {
                this.DataSource.RefreshData();
            }
        }
        
        protected void ReplaceIndexMap(IList<int> value)
        {
            this.indexMap = value;
        }
        
        protected internal virtual void ResetIndexMap()
        {
            object indexMapLocker = this.indexMapLocker;
            lock (indexMapLocker)
            {
                this.ReplaceIndexMap(null);
                if (this.Locker != null)
                {
                    this.Locker.CancelReaders();
                }
            }
        }
        
        public virtual void ResetSelection()
        {
            this.SelectedRow = 0;
        }
        
        protected void ResetSelection(int recordCount)
        {
            if (recordCount > 0)
            {
                this.ResetSelection();
            }
            else
            {
                this.Selection.Reset();
                if (this.DataSource != null)
                {
                    this.DataSource.Selection.Reset();
                }
                this.RaiseSelectionChanged();
            }
        }
        
        protected void SetSelectedRowCore(int rowHandle, bool force)
        {
            this.Selection.Index.Value = rowHandle;
            int immediateSourceRowHandle = this.GetImmediateSourceRowHandle(rowHandle);
            this.Selection.SourceIndex.Value = immediateSourceRowHandle;
            if (this.DataSource != null)
            {
                if (force)
                {
                    this.DataSource.ForceSetSelectedRow(immediateSourceRowHandle);
                }
                else
                {
                    this.DataSource.SelectedRow = immediateSourceRowHandle;
                }
            }
            this.RaiseSelectionChanged();
        }
        
        private void SubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged += new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
            }
        }
        
        protected virtual int TranslateRowIndex(int rowHandle)
        {
            this.EnsureIndexMapReady();
            if ((rowHandle < 0) || (rowHandle >= this.IndexMap.get_Count()))
            {
                return -1;
            }
            return this.IndexMap.get_Item(rowHandle);
        }
        
        private void UnsubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
            }
        }
        
        protected virtual void UpdateIndexMap()
        {
            this.ResetIndexMap();
        }
        
        public GridDataSourceSelection Selection =>
            this.selection;
        
        public IReadWriteDataProcessingLocker Locker { get; set; }
        
        public int SelectedRow
        {
            get
            {
                this.EnsureIndexMapReady();
                return this.selection.Index.Value;
            }
            set
            {
                if (this.SelectedRow != value)
                {
                    this.SetSelectedRowCore(value, false);
                }
            }
        }
        
        public Type ActualDataSourceType =>
            ((this.DataSource == null) ? base.GetType() : this.DataSource.ActualDataSourceType);
        
        public IInnerGridDataSource DataSource
        {
            get => 
                this.dataSource;
            set
            {
                if (!object.ReferenceEquals(this.dataSource, value))
                {
                    if (this.dataSource != null)
                    {
                        this.selection.Unlink();
                    }
                    if (value != null)
                    {
                        this.selection.Link(value.Selection);
                    }
                    this.UnsubscribeDataSourceEvents();
                    this.dataSource = value;
                    this.SubscribeDataSourceEvents();
                    this.ResetIndexMap();
                }
            }
        }
        
        protected internal IList<int> IndexMap =>
            this.indexMap;
        
        public virtual bool IsRowCountReady =>
            ((this.DataSource == null) || (this.DataSource.IsRowCountReady && (this.IndexMap != null)));
        
        public virtual bool IsGetRowReady =>
            ((this.DataSource == null) || (this.DataSource.IsRowCountReady && (this.IndexMap != null)));
        
        public int RowCount =>
            this.CalculateRowCount();
        
        public virtual bool SupportsSorting =>
            ((this.DataSource != null) ? this.DataSource.SupportsSorting : false);
        
        public virtual bool SupportsGrouping =>
            ((this.DataSource != null) ? this.DataSource.SupportsGrouping : false);
        
        public virtual bool SupportsFiltering =>
            ((this.DataSource != null) ? this.DataSource.SupportsFiltering : false);
        
        public virtual int GroupCount =>
            0;
    }
}
