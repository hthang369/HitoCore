// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    
    public class NotificationObject : INotifyPropertyChanged
    {
        [CompilerGenerated]
        private PropertyChangedEventHandler PropertyChanged;
        
        public event PropertyChangedEventHandler PropertyChanged
        {
            [CompilerGenerated] add
            {
                PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                while (true)
                {
                    PropertyChangedEventHandler comparand = propertyChanged;
                    PropertyChangedEventHandler handler3 = (PropertyChangedEventHandler) Delegate.Combine((Delegate) comparand, (Delegate) value);
                    propertyChanged = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, handler3, comparand);
                    if (object.ReferenceEquals(propertyChanged, comparand))
                    {
                        return;
                    }
                }
            }
            [CompilerGenerated] remove
            {
                PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                while (true)
                {
                    PropertyChangedEventHandler comparand = propertyChanged;
                    PropertyChangedEventHandler handler3 = (PropertyChangedEventHandler) Delegate.Remove((Delegate) comparand, (Delegate) value);
                    propertyChanged = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, handler3, comparand);
                    if (object.ReferenceEquals(propertyChanged, comparand))
                    {
                        return;
                    }
                }
            }
        }
        
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
