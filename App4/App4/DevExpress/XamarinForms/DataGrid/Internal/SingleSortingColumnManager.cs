// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    
    internal class SingleSortingColumnManager : SortingColumnManager
    {
        public SingleSortingColumnManager(ISortGroupDataSettings dataController) : base(dataController)
        {
        }
        
        protected override SortDescriptor<IRowData> CreateSortComparer()
        {
            if (base.Columns != null)
            {
                using (IEnumerator<GridColumn> enumerator = base.Columns.GetEnumerator())
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }
                        GridColumn current = enumerator.Current;
                        if ((current.SortOrder != ColumnSortOrder.None) && !current.IsGrouped)
                        {
                            return current.SortComparer;
                        }
                    }
                }
            }
            return null;
        }
        
        private GridColumn FindSortedColumn()
        {
            if (base.Columns == null)
            {
                return null;
            }
            GridColumn column = null;
            foreach (GridColumn column2 in base.Columns)
            {
                if (column2.SortIndex == -1)
                {
                    continue;
                }
                if (column2.SortOrder != ColumnSortOrder.None)
                {
                    if (column != null)
                    {
                        if (column == null)
                        {
                            continue;
                        }
                        if (column2.SortIndex > column.SortIndex)
                        {
                            continue;
                        }
                    }
                    column = column2;
                }
            }
            return column;
        }
        
        protected override void PrepareSorting(GridColumn addedColumn)
        {
            if ((addedColumn == null) || (addedColumn.SortOrder == ColumnSortOrder.None))
            {
                this.UpdateSortSettings(this.FindSortedColumn());
            }
            else
            {
                this.UpdateSortSettings(addedColumn);
            }
        }
        
        protected override void SortIndexChanged(GridColumn sender, int sortIndex)
        {
            this.UpdateSortSettings(this.FindSortedColumn());
            base.GroupAndSortData();
        }
        
        protected override void SortOrderChanged(GridColumn sender, ColumnSortOrder sortOrder)
        {
            this.UpdateSortSettings(sender);
            base.GroupAndSortData();
        }
        
        private void UpdateSortSettings(GridColumn sortedColumn)
        {
            if ((base.Columns != null) && !base.IsProcessing)
            {
                base.IsProcessing = true;
                foreach (GridColumn column in base.Columns)
                {
                    if (object.ReferenceEquals(column, sortedColumn))
                    {
                        column.SortIndex = 1;
                        continue;
                    }
                    column.SortIndex = -1;
                    column.SortOrder = ColumnSortOrder.None;
                }
                base.IsProcessing = false;
            }
        }
    }
}
