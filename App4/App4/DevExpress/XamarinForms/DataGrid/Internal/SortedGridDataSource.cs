// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using System;
    using System.Collections.Generic;
    
    public class SortedGridDataSource : SortedGridDataSourceBase
    {
        protected override void AssignSortDescriptor(SortDescriptor<IRowData> value)
        {
            if ((base.Comparer == null) || (value == null))
            {
                base.AssignSortDescriptor(value);
            }
            else if (!object.ReferenceEquals(base.Comparer.AscendingComparer, value.AscendingComparer))
            {
                base.AssignSortDescriptor(value);
            }
            else
            {
                base.SetSortDescriptorCore(value);
                this.OnSortParametersChanged();
            }
        }
        
        protected internal override IComparer<int> CreateComparer(bool compareRowHandles)
        {
            if ((base.DataSource == null) || (base.Comparer == null))
            {
                return null;
            }
            SortedGridDataSourceBase.RowComparer comparer1 = new SortedGridDataSourceBase.RowComparer();
            comparer1.DataSource = base.DataSource;
            comparer1.Comparer = base.Comparer.AscendingComparer;
            return comparer1;
        }
        
        protected override CreateIndexMapResult CreateIndexMap()
        {
            CreateIndexMapResult result = base.CreateIndexMap();
            if ((base.Comparer != null) && base.Comparer.IsSingleColumn)
            {
                IList<int> list = this.CreateReversedIndexMapIfNeed(result.IndexMap);
                if ((list.GetType() != result.IndexMap.GetType()) && (result.NewSelectionRow >= 0))
                {
                    result.NewSelectionRow = (list.Count - result.NewSelectionRow) - 1;
                }
                result.IndexMap = list;
            }
            return result;
        }
        
        private IList<int> CreateReversedIndexMapIfNeed(IList<int> map)
        {
            if (map == null)
            {
                return null;
            }
            ReverseOrderedList<int> list = map as ReverseOrderedList<int>;
            return ((list == null) ? ((base.Comparer.SortOrder != ColumnSortOrder.Ascending) ? new ReverseOrderedList<int>(map) : map) : ((base.Comparer.SortOrder != ColumnSortOrder.Ascending) ? map : list.OriginalList));
        }
        
        private void OnSortParametersChanged()
        {
            if (base.IndexMap != null)
            {
                if (!base.Comparer.IsSingleColumn)
                {
                    this.ResetIndexMap();
                }
                else if (base.Comparer.SortOrder != ColumnSortOrder.None)
                {
                    this.ReverseIndexMap();
                }
                else
                {
                    int num = base.IndexMap.GetItem(base.SelectedRow);
                    this.ResetIndexMap();
                    base.SelectedRow = num;
                }
            }
        }
        
        private void ReverseIndexMap()
        {
            if (base.IndexMap != null)
            {
                IList<int> list = this.CreateReversedIndexMapIfNeed(base.IndexMap);
                if ((list.GetType() != base.IndexMap.GetType()) && (base.SelectedRow >= 0))
                {
                    base.SelectedRow = (base.IndexMap.Count - base.SelectedRow) - 1;
                }
                base.ReplaceIndexMap(list);
            }
        }
    }
}
