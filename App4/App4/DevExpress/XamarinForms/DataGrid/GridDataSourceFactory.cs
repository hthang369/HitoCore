// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Reflection;
    
    internal class GridDataSourceFactory
    {
        private static GridDataSourceFactory instance;
        
        public IGridDataSource Create(object obj)
        {
            if (obj == null)
            {
                return null;
            }
            IGridDataSource source = obj as IGridDataSource;
            if (source != null)
            {
                return source;
            }
            TypeInfo typeInfo = IntrospectionExtensions.GetTypeInfo(obj.GetType());
            source = this.TryCreateFromGenericList(obj, typeInfo);
            if (source != null)
            {
                return source;
            }
            source = this.TryCreateFromIList(obj, typeInfo);
            return ((source == null) ? null : source);
        }
        
        private bool IsImplementsIListT(TypeInfo typeInfo)
        {
            using (IEnumerator<Type> enumerator = typeInfo.get_ImplementedInterfaces().GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    TypeInfo info = IntrospectionExtensions.GetTypeInfo(enumerator.Current);
                    if (info.get_IsGenericType() && (info.GetGenericTypeDefinition() == typeof(IList<>)))
                    {
                        return true;
                    }
                }
            }
            return false;
        }
        
        private IGridDataSource TryCreateFromGenericList(object obj, TypeInfo typeInfo)
        {
            if (!typeInfo.get_IsGenericType() || !this.IsImplementsIListT(typeInfo))
            {
                return null;
            }
            Type[] typeArray = typeInfo.get_GenericTypeArguments();
            if (typeArray.Length == 0)
            {
                return null;
            }
            Type type1 = typeof(GenericListGridDataSource<>).MakeGenericType(typeArray);
            object obj2 = Activator.CreateInstance(type1);
            RuntimeReflectionExtensions.GetRuntimeProperty(type1, "List").SetValue(obj2, obj);
            return (obj2 as IGridDataSource);
        }
        
        private IGridDataSource TryCreateFromIList(object obj, TypeInfo typeInfo)
        {
            if (!IntrospectionExtensions.GetTypeInfo((Type) typeof(IList)).IsAssignableFrom(typeInfo))
            {
                return null;
            }
            ObjectListGridDataSource source1 = new ObjectListGridDataSource();
            source1.List = obj as IList;
            return source1;
        }
        
        public static GridDataSourceFactory Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new GridDataSourceFactory();
                }
                return instance;
            }
        }
    }
}
