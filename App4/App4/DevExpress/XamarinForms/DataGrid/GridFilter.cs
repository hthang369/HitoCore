// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.Data;
    using DevExpress.Data.Filtering;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    
    internal class GridFilter : NotificationObject
    {
        private readonly GridColumnCollection columns;
        private readonly ObservableCollection<GridAutoFilter> autoFilters;
        private readonly ObservableCollection<GridAutoFilter> columnFilters;
        private CriteriaOperator filterExpression;
        private bool isActive = true;
        
        internal GridFilter(GridColumnCollection columns)
        {
            this.columns = columns;
            this.columns.add_CollectionChanged(new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged));
            this.columns.ColumnPropertyChanged += new PropertyChangedEventHandler(this.OnColumnPropertyChanged);
            this.autoFilters = new ObservableCollection<GridAutoFilter>();
            this.columnFilters = new ObservableCollection<GridAutoFilter>();
            this.autoFilters.add_CollectionChanged(new NotifyCollectionChangedEventHandler(this.OnCollectionChanged));
            this.columnFilters.add_CollectionChanged(new NotifyCollectionChangedEventHandler(this.OnCollectionChanged));
        }
        
        private CriteriaOperator AppendFilters(CriteriaOperator where, IList<GridAutoFilter> filters)
        {
            int num = filters.get_Count();
            for (int i = 0; i < num; i++)
            {
                CriteriaOperator operator1 = CriteriaOperator.And(where, filters.get_Item(i).FilterExpression);
                where = operator1;
            }
            return where;
        }
        
        internal void ClearFilter()
        {
            this.ColumnFilters.Clear();
            using (IEnumerator<GridColumn> enumerator = this.columns.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    enumerator.Current.AutoFilterValue = null;
                }
            }
            this.AutoFilters.Clear();
            this.FilterExpression = null;
        }
        
        private CriteriaOperator CreateAutoFilterExpression(GridColumn column)
        {
            object autoFilterValue = column.AutoFilterValue;
            if (column.ActualAutoFilterCondition == AutoFilterCondition.Equals)
            {
                if (column.FilterMode == ColumnFilterMode.DisplayText)
                {
                    autoFilterValue = DisplayTextHelper.Instance.GetDisplayText(column.DisplayFormat, autoFilterValue);
                }
                if (!(column is DateColumn) || !(autoFilterValue is DateTime))
                {
                    return new BinaryOperator(column.FieldName, autoFilterValue, BinaryOperatorType.Equal);
                }
                DateTime beginExpression = (DateTime) (((DateTime) autoFilterValue).get_Date() + new TimeSpan(0, 0, 0));
                return new BetweenOperator(column.FieldName, beginExpression, (DateTime) (((DateTime) autoFilterValue).get_Date() + new TimeSpan(0x17, 0x3b, 0x3b)));
            }
            string str = autoFilterValue.ToString().Trim();
            if (string.IsNullOrEmpty(str))
            {
                return null;
            }
            if (column.ActualAutoFilterCondition == AutoFilterCondition.Contains)
            {
                CriteriaOperator[] operatorArray1 = new CriteriaOperator[] { new OperandProperty(column.FieldName), str };
                return new FunctionOperator(FunctionOperatorType.Contains, operatorArray1);
            }
            if ((str.get_Chars(0) == '_') || (str.get_Chars(0) == '%'))
            {
                CriteriaOperator[] operatorArray2 = new CriteriaOperator[] { new OperandProperty(column.FieldName), str.Substring(1) };
                return new FunctionOperator(FunctionOperatorType.Contains, operatorArray2);
            }
            CriteriaOperator[] operands = new CriteriaOperator[] { new OperandProperty(column.FieldName), str };
            return new FunctionOperator(FunctionOperatorType.StartsWith, operands);
        }
        
        private GridAutoFilter GetFilter(GridColumn column)
        {
            for (int i = 0; i < this.autoFilters.get_Count(); i++)
            {
                if (object.ReferenceEquals(this.autoFilters.get_Item(i).Column, column))
                {
                    return this.autoFilters.get_Item(i);
                }
            }
            return null;
        }
        
        private void OnAutoFilterChanged()
        {
            base.OnPropertyChanged("ActualFilterExpression");
        }
        
        private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            base.OnPropertyChanged("ActualFilterExpression");
        }
        
        private void OnColumnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (GridColumn.IsPropertyAffectsFilter(e.get_PropertyName()))
            {
                this.UpdateAutoFilter(sender as GridColumn);
            }
        }
        
        private void OnColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.get_Action())
            {
                case NotifyCollectionChangedAction.Add:
                    this.UpdateAutoFilter(this.columns.get_Item(e.get_NewStartingIndex()));
                    return;
                
                case NotifyCollectionChangedAction.Remove:
                    this.RemoveFilter((GridColumn) e.get_OldItems().get_Item(0));
                    return;
                
                case NotifyCollectionChangedAction.Replace:
                    if ((e.get_OldItems() != null) && (e.get_OldItems().get_Count() > 0))
                    {
                        this.RemoveFilter(e.get_OldItems().get_Item(0) as GridColumn);
                    }
                    this.UpdateAutoFilter(this.columns.get_Item(e.get_NewStartingIndex()));
                    break;
                
                case NotifyCollectionChangedAction.Move:
                    break;
                
                case NotifyCollectionChangedAction.Reset:
                    this.autoFilters.Clear();
                    return;
                
                default:
                    return;
            }
        }
        
        private void RemoveFilter(GridColumn column)
        {
            if (column != null)
            {
                for (int i = 0; i < this.autoFilters.get_Count(); i++)
                {
                    if (object.ReferenceEquals(this.autoFilters.get_Item(i).Column, column))
                    {
                        this.autoFilters.RemoveAt(i);
                        this.OnAutoFilterChanged();
                        return;
                    }
                }
            }
        }
        
        private void UpdateAutoFilter(GridColumn column)
        {
            if (column != null)
            {
                GridAutoFilter filter = null;
                if ((!column.AllowAutoFilter || (column.AutoFilterValue == null)) || string.IsNullOrEmpty(column.FieldName))
                {
                    this.RemoveFilter(column);
                }
                else
                {
                    filter = this.GetFilter(column);
                    if (filter == null)
                    {
                        filter = new GridAutoFilter {
                            Column = column
                        };
                        this.autoFilters.Add(filter);
                    }
                    filter.FilterExpression = this.CreateAutoFilterExpression(column);
                    this.OnAutoFilterChanged();
                }
            }
        }
        
        private void UpdateAutoFilters()
        {
            foreach (GridColumn column in this.columns)
            {
                this.UpdateAutoFilter(column);
            }
        }
        
        public CriteriaOperator ActualFilterExpression
        {
            get
            {
                CriteriaOperator filterExpression = this.FilterExpression;
                filterExpression = this.AppendFilters(filterExpression, this.ColumnFilters);
                return this.AppendFilters(filterExpression, this.AutoFilters);
            }
        }
        
        public CriteriaOperator FilterExpression
        {
            get => 
                this.filterExpression;
            set
            {
                if (!object.Equals(this.FilterExpression, value))
                {
                    this.filterExpression = value;
                    base.OnPropertyChanged("ActualFilterExpression");
                }
            }
        }
        
        private IList<GridAutoFilter> AutoFilters =>
            ((IList<GridAutoFilter>) this.autoFilters);
        
        private IList<GridAutoFilter> ColumnFilters =>
            ((IList<GridAutoFilter>) this.columnFilters);
        
        public bool IsActive
        {
            get => 
                this.isActive;
            set
            {
                if (this.isActive != value)
                {
                    this.isActive = value;
                    base.OnPropertyChanged("IsActive");
                }
            }
        }
    }
}
