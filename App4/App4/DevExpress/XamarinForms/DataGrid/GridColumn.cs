// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.Collections;
    using DevExpress.Data;
    using DevExpress.Data.Filtering;
    using DevExpress.Data.Filtering.Helpers;
    using DevExpress.Data.Helpers;
    using DevExpress.Utils;
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Threading;
    using Xamarin.Forms;
    
    public abstract class GridColumn : BindableObject, IFieldValueVisitor
    {
        private const double minWidth = 50.0;
        private const double maxWidth = double.MaxValue;
        internal const int defaultSortIndex = -1;
        internal const int singleModeSortIndex = 1;
        public static readonly BindableProperty FieldNameProperty;
        public static readonly BindableProperty WidthProperty;
        public static readonly BindableProperty MinWidthProperty;
        public static readonly BindableProperty MaxWidthProperty;
        public static readonly BindableProperty SortOrderProperty;
        public static readonly BindableProperty SortModeProperty;
        public static readonly BindableProperty DisplayFormatProperty;
        public static readonly BindableProperty UnboundTypeProperty;
        public static readonly BindableProperty UnboundExpressionProperty;
        public static readonly BindableProperty CaptionProperty;
        public static readonly BindableProperty EditFormCaptionProperty;
        public static readonly BindableProperty IsReadOnlyProperty;
        public static readonly BindableProperty AllowSortProperty;
        public static readonly BindableProperty SortIndexProperty;
        public static readonly BindableProperty IsGroupedProperty;
        public static readonly BindableProperty IsVisibleProperty;
        public static readonly BindableProperty GroupIntervalProperty;
        public static readonly BindableProperty FixedStyleProperty;
        public static readonly BindableProperty HorizontalContentAlignmentProperty;
        public static readonly BindableProperty VerticalContentAlignmentProperty;
        public static readonly BindableProperty GroupValueDisplayFormatProperty;
        private static readonly BindableProperty AllowAutoFilterProperty;
        private static readonly BindableProperty ImmediateUpdateAutoFilterProperty;
        private static readonly BindableProperty AutoFilterConditionProperty;
        private static readonly BindableProperty AutoFilterValueProperty;
        private static readonly BindableProperty FilterModeProperty;
        private static readonly BindableProperty AllowGroupProperty;
        private DevExpress.XamarinForms.DataGrid.Internal.PropertyAccessor propertyAccessor;
        private SortDescriptor<IRowData> comparer;
        private IComparer<IRowData> ascendingComparer;
        private GroupDescriptor<IRowData> groupByComparer;
        [CompilerGenerated]
        public event PropertyChangedEventHandler AfterPropertyChanged;
        
        static GridColumn()
        {
            ParameterExpression expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
            FieldNameProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("FieldName")), expressionArray1), string.Empty, BindingMode.OneWay, null, OnFieldNameChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
            WidthProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, GridLength>(Expression.Lambda<Func<GridColumn, GridLength>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("Width")), expressionArray2), new GridLength(1.0, GridUnitType.Star), BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            MinWidthProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, double>(Expression.Lambda<Func<GridColumn, double>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("MinWidth")), expressionArray3), 50.0, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            MaxWidthProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, double>(Expression.Lambda<Func<GridColumn, double>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("MaxWidth")), expressionArray4), double.MaxValue, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray5 = new ParameterExpression[] { expression };
            SortOrderProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, ColumnSortOrder>(Expression.Lambda<Func<GridColumn, ColumnSortOrder>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("SortOrder")), expressionArray5), ColumnSortOrder.None, BindingMode.OneWay, null, OnSortOrderChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray6 = new ParameterExpression[] { expression };
            BindableProperty.CreateDefaultValueDelegate defaultValueCreator = GetDefaultSortMode;
            SortModeProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, ColumnSortMode>(Expression.Lambda<Func<GridColumn, ColumnSortMode>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("SortMode")), expressionArray6), ColumnSortMode.Value, BindingMode.OneWay, null, OnSortModeChanged, null, null, defaultValueCreator);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray7 = new ParameterExpression[] { expression };
            defaultValueCreator = GetDefaultDisplayText;
            DisplayFormatProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("DisplayFormat")), expressionArray7), null, BindingMode.OneWay, null, OnDisplayFormatChanged, null, null, defaultValueCreator);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray8 = new ParameterExpression[] { expression };
            UnboundTypeProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, UnboundColumnType>(Expression.Lambda<Func<GridColumn, UnboundColumnType>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("UnboundType")), expressionArray8), UnboundColumnType.Bound, BindingMode.OneWay, null, OnUnboundTypeChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray9 = new ParameterExpression[] { expression };
            UnboundExpressionProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("UnboundExpression")), expressionArray9), string.Empty, BindingMode.OneWay, null, OnUnboundExpressionChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray10 = new ParameterExpression[] { expression };
            CaptionProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("Caption")), expressionArray10), string.Empty, BindingMode.OneWay, null, OnCaptionChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray11 = new ParameterExpression[] { expression };
            EditFormCaptionProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("EditFormCaption")), expressionArray11), string.Empty, BindingMode.OneWay, null, null, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray12 = new ParameterExpression[] { expression };
            IsReadOnlyProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, bool>(Expression.Lambda<Func<GridColumn, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("IsReadOnly")), expressionArray12), false, BindingMode.OneWay, null, OnIsReadOnlyChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray13 = new ParameterExpression[] { expression };
            AllowSortProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, DefaultBoolean>(Expression.Lambda<Func<GridColumn, DefaultBoolean>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("AllowSort")), expressionArray13), DefaultBoolean.Default, BindingMode.OneWay, null, OnAllowSortChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray14 = new ParameterExpression[] { expression };
            SortIndexProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, int>(Expression.Lambda<Func<GridColumn, int>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("SortIndex")), expressionArray14), -1, BindingMode.OneWay, null, OnSortIndexChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray15 = new ParameterExpression[] { expression };
            IsGroupedProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, bool>(Expression.Lambda<Func<GridColumn, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("IsGrouped")), expressionArray15), false, BindingMode.OneWay, null, OnIsGroupedChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray16 = new ParameterExpression[] { expression };
            IsVisibleProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, bool>(Expression.Lambda<Func<GridColumn, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("IsVisible")), expressionArray16), true, BindingMode.OneWay, null, OnIsVisibleChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray17 = new ParameterExpression[] { expression };
            GroupIntervalProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, ColumnGroupInterval>(Expression.Lambda<Func<GridColumn, ColumnGroupInterval>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("GroupInterval")), expressionArray17), ColumnGroupInterval.Default, BindingMode.OneWay, null, OnGroupIntervalChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray18 = new ParameterExpression[] { expression };
            FixedStyleProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, DevExpress.XamarinForms.DataGrid.FixedStyle>(Expression.Lambda<Func<GridColumn, DevExpress.XamarinForms.DataGrid.FixedStyle>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("FixedStyle")), expressionArray18), DevExpress.XamarinForms.DataGrid.FixedStyle.None, BindingMode.OneWay, null, OnFixedStyleChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray19 = new ParameterExpression[] { expression };
            defaultValueCreator = GetDefaultHorizontalContentAlignment;
            HorizontalContentAlignmentProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, TextAlignment>(Expression.Lambda<Func<GridColumn, TextAlignment>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("HorizontalContentAlignment")), expressionArray19), 0, BindingMode.OneWay, null, OnHorizontalContentAlignmentChanged, null, null, defaultValueCreator);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray20 = new ParameterExpression[] { expression };
            defaultValueCreator = GetDefaultVerticalContentAlignment;
            VerticalContentAlignmentProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, TextAlignment>(Expression.Lambda<Func<GridColumn, TextAlignment>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("VerticalContentAlignment")), expressionArray20), TextAlignment.Center, BindingMode.OneWay, null, OnVerticalContentAlignmentChanged, null, null, defaultValueCreator);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray21 = new ParameterExpression[] { expression };
            GroupValueDisplayFormatProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, string>(Expression.Lambda<Func<GridColumn, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("GroupValueDisplayFormat")), expressionArray21), null, BindingMode.OneWay, null, OnGroupValueDisplayFormatChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray22 = new ParameterExpression[] { expression };
            AllowAutoFilterProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, bool>(Expression.Lambda<Func<GridColumn, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("AllowAutoFilter")), expressionArray22), true, BindingMode.OneWay, null, OnAllowAutoFilterChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray23 = new ParameterExpression[] { expression };
            ImmediateUpdateAutoFilterProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, bool>(Expression.Lambda<Func<GridColumn, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("ImmediateUpdateAutoFilter")), expressionArray23), true, BindingMode.OneWay, null, OnImmediateUpdateAutoFilterChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray24 = new ParameterExpression[] { expression };
            AutoFilterConditionProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, DevExpress.Data.AutoFilterCondition>(Expression.Lambda<Func<GridColumn, DevExpress.Data.AutoFilterCondition>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("AutoFilterCondition")), expressionArray24), DevExpress.Data.AutoFilterCondition.Default, BindingMode.OneWay, null, OnAutoFilterConditionChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray25 = new ParameterExpression[] { expression };
            AutoFilterValueProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, object>(Expression.Lambda<Func<GridColumn, object>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("AutoFilterValue")), expressionArray25), null, BindingMode.OneWay, null, OnAutoFilterValueChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray26 = new ParameterExpression[] { expression };
            FilterModeProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, ColumnFilterMode>(Expression.Lambda<Func<GridColumn, ColumnFilterMode>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("FilterMode")), expressionArray26), ColumnFilterMode.Value, BindingMode.OneWay, null, OnFilterModeChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumn), "o");
            ParameterExpression[] expressionArray27 = new ParameterExpression[] { expression };
            AllowGroupProperty = BindingUtils.Instance.CreateBindableProperty<GridColumn, DefaultBoolean>(Expression.Lambda<Func<GridColumn, DefaultBoolean>>((Expression) Expression.Property((Expression) expression, typeof(GridColumn).GetProperty("AllowGroup")), expressionArray27), DefaultBoolean.Default, BindingMode.OneWay, null, OnAllowGroupChanged, null, null, null);
        }
        
        protected GridColumn()
        {
        }
        
        protected virtual ColumnGroupInterval CalculateActualColumnGroupInterval()
        {
            if ((this.GroupInterval != ColumnGroupInterval.Default) && ((this.GroupInterval == ColumnGroupInterval.DisplayText) || (this.GroupInterval == ColumnGroupInterval.Alphabetical)))
            {
                return this.GroupInterval;
            }
            return ColumnGroupInterval.Value;
        }
        
        protected SortDescriptor<IRowData> CreateComparer() => 
            this.CreateSortDescriptorCore(this.SortOrder);
        
        private IComparer<IRowData> CreateComparer(Type propertyType, bool isAscending)
        {
            if ((propertyType == null) || (propertyType == typeof(object)))
            {
                return new NumbersComparer(this.FieldName, isAscending, this.SortMode, this);
            }
            return ((propertyType != typeof(string)) ? ((propertyType != typeof(int)) ? ((propertyType != typeof(DateTime)) ? ((propertyType != typeof(DateTime?)) ? ((propertyType != typeof(bool)) ? ((propertyType != typeof(long)) ? ((propertyType != typeof(float)) ? ((propertyType != typeof(double)) ? ((propertyType != typeof(decimal)) ? ((propertyType != typeof(byte)) ? ((propertyType != typeof(short)) ? ((propertyType != typeof(uint)) ? ((propertyType != typeof(sbyte)) ? ((propertyType != typeof(ulong)) ? ((IComparer<IRowData>) new NumbersComparer(this.FieldName, isAscending, this.SortMode, this)) : ((IComparer<IRowData>) new ColumnComparer<ulong>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<sbyte>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<uint>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<short>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<byte>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<decimal>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<double>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<float>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<long>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<bool>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<DateTime?>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<DateTime>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<int>(this.FieldName, isAscending, this.SortMode, this))) : ((IComparer<IRowData>) new ColumnComparer<string>(this.FieldName, isAscending, this.SortMode, this)));
        }
        
        protected GroupDescriptor<IRowData> CreateGroupByComparer()
        {
            RowDataGroupDescriptor descriptor = new RowDataGroupDescriptor();
            this.SetupSortDescriptorCore(descriptor, (this.SortOrder == ColumnSortOrder.Descending) ? ColumnSortOrder.Descending : ColumnSortOrder.Ascending);
            descriptor.DisplayFormat = this.DisplayFormat;
            descriptor.GroupInterval = this.CalculateActualColumnGroupInterval();
            return descriptor;
        }
        
        private SortDescriptor<IRowData> CreateSortDescriptorCore(ColumnSortOrder sortOrder)
        {
            SortDescriptor<IRowData> descriptor = new SortDescriptor<IRowData>();
            this.SetupSortDescriptorCore(descriptor, sortOrder);
            return descriptor;
        }
        
        internal Func<IRowData, object> CreateUnboundFieldFunction()
        {
            if (string.IsNullOrEmpty(this.UnboundExpression))
            {
                return null;
            }
            CriteriaOperator criteria = CriteriaOperator.Parse(this.UnboundExpression, Array.Empty<object>());
            ExpressionEvaluator evaluator = new ExpressionEvaluator(new CustomEvaluatorContextDescriptor(this), criteria, false);
            return delegate (IRowData row) {
                return evaluator.Evaluate(row);
            };
        }
        
        object IFieldValueVisitor.GetFieldValue(IRowData rowData) => 
            this.GetFieldValueForVisitor(rowData, false);
        
        object IFieldValueVisitor.GetFormattedFieldValue(IRowData rowData) => 
            this.GetFieldValueForVisitor(rowData, true);
        
        internal virtual ColumnSortMode GetActualSortModeForVisitor() => 
            this.SortMode;
        
        protected virtual Type GetComparerPropertyType() => 
            this.GetComparerPropertyTypeCore();
        
        protected Type GetComparerPropertyTypeCore()
        {
            if ((this.PropertyAccessor == null) || (this.PropertyAccessor.PropertyType == null))
            {
                return null;
            }
            return this.PropertyAccessor.PropertyType;
        }
        
        protected virtual string GetDefaultDisplayText() => 
            null;
        
        private static object GetDefaultDisplayText(BindableObject bindable)
        {
            GridColumn column = bindable as GridColumn;
            return column?.GetDefaultDisplayText();
        }
        
        protected virtual TextAlignment GetDefaultHorizontalContentAlignment() => 
            0;
        
        private static object GetDefaultHorizontalContentAlignment(BindableObject bindable)
        {
            GridColumn column = bindable as GridColumn;
            return ((column != null) ? column.GetDefaultHorizontalContentAlignment() : 0);
        }
        
        protected virtual ColumnSortMode GetDefaultSortMode() => 
            ColumnSortMode.Value;
        
        private static object GetDefaultSortMode(BindableObject bindable)
        {
            GridColumn column = bindable as GridColumn;
            return ((column != null) ? column.GetDefaultSortMode() : 0);
        }
        
        protected virtual TextAlignment GetDefaultVerticalContentAlignment() => 
            TextAlignment.Center;
        
        private static object GetDefaultVerticalContentAlignment(BindableObject bindable)
        {
            GridColumn column = bindable as GridColumn;
            return ((column != null) ? column.GetDefaultVerticalContentAlignment() : 0);
        }
        
        internal virtual Type GetFieldTypeForVisitor() => 
            ((this.SortMode != ColumnSortMode.DisplayText) ? this.GetPreferredDataType() : typeof(string));
        
        internal virtual object GetFieldValueForVisitor(IRowData rowData, bool format)
        {
            if (((IFieldValueVisitor) this).ActualSortMode != ColumnSortMode.DisplayText)
            {
                return null;
            }
            object fieldValue = rowData.GetFieldValue(this.FieldName);
            if (format && (fieldValue != null))
            {
                fieldValue = CustomizeCellTextHelper.Format(fieldValue, this.DisplayFormat, rowData.RowHandle, this.FieldName, this.CustomCellTextProvider);
            }
            return fieldValue?.ToString();
        }
        
        internal Type GetPreferredDataType()
        {
            if (!this.IsUnbound)
            {
                return this.GetComparerPropertyType();
            }
            switch (this.UnboundType)
            {
                case UnboundColumnType.Integer:
                    return typeof(int);
                
                case UnboundColumnType.Decimal:
                    return typeof(decimal);
                
                case UnboundColumnType.DateTime:
                    return typeof(DateTime);
                
                case UnboundColumnType.String:
                    return typeof(string);
                
                case UnboundColumnType.Boolean:
                    return typeof(bool);
            }
            return typeof(object);
        }
        
        internal static bool IsPropertyAffectsFilter(string propertyName) => 
            ((propertyName == "DisplayFormat") || ((propertyName == "FieldName") || ((propertyName == "AutoFilterCondition") || ((propertyName == "AutoFilterValue") || ((propertyName == "AllowAutoFilter") || ((propertyName == "ColumnFilterMode") || ((propertyName == "ImmediateUpdateAutoFilter") || ((propertyName == "DisplayMember") || (propertyName == "ValueMember")))))))));
        
        internal static bool IsPropertyAffectsUnboundFields(string propertyName) => 
            ((propertyName == UnboundExpressionProperty.PropertyName) || (propertyName == UnboundTypeProperty.PropertyName));
        
        private static void OnAllowAutoFilterChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(AllowAutoFilterProperty.PropertyName);
        }
        
        private static void OnAllowGroupChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(AllowGroupProperty.PropertyName);
        }
        
        private static void OnAllowSortChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(AllowSortProperty.PropertyName);
        }
        
        private static void OnAutoFilterConditionChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(AutoFilterConditionProperty.PropertyName);
        }
        
        private static void OnAutoFilterValueChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(AutoFilterValueProperty.PropertyName);
        }
        
        protected void OnCaptionChanged()
        {
            this.OnPropertyChanged("ActualCaption");
        }
        
        private static void OnCaptionChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnCaptionChanged();
            column1.RaiseAfterPropertyChanged(CaptionProperty.PropertyName);
        }
        
        protected internal void OnDisplayFormatChanged()
        {
        }
        
        private static void OnDisplayFormatChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnDisplayFormatChanged();
            column1.RaiseAfterPropertyChanged(DisplayFormatProperty.PropertyName);
        }
        
        protected void OnFieldNameChanged()
        {
        }
        
        private static void OnFieldNameChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnFieldNameChanged();
            column1.RaiseAfterPropertyChanged(FieldNameProperty.PropertyName);
        }
        
        private static void OnFilterModeChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(FilterModeProperty.PropertyName);
        }
        
        private static void OnFixedStyleChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(FixedStyleProperty.PropertyName);
        }
        
        private void OnGroupIntervalChanged()
        {
            this.ResetGroupByComparer();
        }
        
        private static void OnGroupIntervalChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnGroupIntervalChanged();
            column1.RaiseAfterPropertyChanged(GroupIntervalProperty.PropertyName);
        }
        
        private static void OnGroupValueDisplayFormatChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(GroupValueDisplayFormatProperty.PropertyName);
        }
        
        private static void OnHorizontalContentAlignmentChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(HorizontalContentAlignmentProperty.PropertyName);
        }
        
        private static void OnImmediateUpdateAutoFilterChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(ImmediateUpdateAutoFilterProperty.PropertyName);
        }
        
        private static void OnIsGroupedChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(IsGroupedProperty.PropertyName);
        }
        
        private static void OnIsReadOnlyChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(IsReadOnlyProperty.PropertyName);
        }
        
        private static void OnIsVisibleChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(IsVisibleProperty.PropertyName);
        }
        
        private static void OnSortIndexChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(SortIndexProperty.PropertyName);
        }
        
        private void OnSortModeChanged(ColumnSortMode oldValue, ColumnSortMode newValue)
        {
            if (this.SortComparer != null)
            {
                this.SortComparer.SortMode = newValue;
            }
            if (this.GroupComparer != null)
            {
                this.GroupComparer.SortMode = newValue;
            }
            this.ResetComparer();
            this.ResetAscendingComparer();
            this.ResetGroupByComparer();
        }
        
        private static void OnSortModeChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnSortModeChanged((ColumnSortMode) oldValue, (ColumnSortMode) newValue);
            column1.RaiseAfterPropertyChanged(SortModeProperty.PropertyName);
        }
        
        private void OnSortOrderChanged(ColumnSortOrder oldValue, ColumnSortOrder newValue)
        {
            this.ResetComparer();
            this.ResetGroupByComparer();
        }
        
        private static void OnSortOrderChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnSortOrderChanged((ColumnSortOrder) oldValue, (ColumnSortOrder) newValue);
            column1.RaiseAfterPropertyChanged(SortOrderProperty.PropertyName);
        }
        
        private void OnUnboundChanged()
        {
        }
        
        private static void OnUnboundExpressionChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnUnboundChanged();
            column1.RaiseAfterPropertyChanged(UnboundExpressionProperty.PropertyName);
        }
        
        protected virtual void OnUnboundTypeChanged()
        {
            this.OnUnboundChanged();
        }
        
        private static void OnUnboundTypeChanged(BindableObject obj, object oldValue, object newValue)
        {
            GridColumn column1 = obj as GridColumn;
            column1.OnUnboundTypeChanged();
            column1.RaiseAfterPropertyChanged(UnboundTypeProperty.PropertyName);
        }
        
        private static void OnVerticalContentAlignmentChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumn) obj).RaiseAfterPropertyChanged(VerticalContentAlignmentProperty.PropertyName);
        }
        
        protected void RaiseAfterPropertyChanged(string propertyName)
        {
            if (this.AfterPropertyChanged != null)
            {
                PropertyChangedEventArgs args = new PropertyChangedEventArgs(propertyName);
                this.AfterPropertyChanged(this, args);
            }
        }
        
        private void ResetAscendingComparer()
        {
            this.ascendingComparer = null;
        }
        
        private void ResetComparer()
        {
            this.comparer = null;
        }
        
        internal void ResetComparers()
        {
            this.ResetComparer();
            this.ResetAscendingComparer();
            this.ResetGroupByComparer();
        }
        
        protected void ResetGroupByComparer()
        {
            this.groupByComparer = null;
        }
        
        protected internal virtual void SetPropertyAccessor(DevExpress.XamarinForms.DataGrid.Internal.PropertyAccessor accessor)
        {
            this.propertyAccessor = accessor;
        }
        
        private void SetupSortDescriptorCore(SortDescriptor<IRowData> descriptor, ColumnSortOrder sortOrder)
        {
            descriptor.FieldName = this.FieldName;
            descriptor.FieldType = this.GetComparerPropertyType();
            descriptor.AscendingComparer = (this.ascendingComparer == null) ? this.CreateComparer(descriptor.FieldType, true) : this.ascendingComparer;
            this.ascendingComparer = descriptor.AscendingComparer;
            descriptor.FieldValueVisitor = this;
            descriptor.SortOrder = sortOrder;
            descriptor.SortMode = this.SortMode;
        }
        
        public string FieldName
        {
            get => 
                ((string) ((string) base.GetValue(FieldNameProperty)));
            set => 
                base.SetValue(FieldNameProperty, value);
        }
        
        public GridLength Width
        {
            get => 
                ((GridLength) base.GetValue(WidthProperty));
            set => 
                base.SetValue(WidthProperty, value);
        }
        
        public double MinWidth
        {
            get => 
                ((double) ((double) base.GetValue(MinWidthProperty)));
            set => 
                base.SetValue(MinWidthProperty, (double) value);
        }
        
        public double MaxWidth
        {
            get => 
                ((double) ((double) base.GetValue(MaxWidthProperty)));
            set => 
                base.SetValue(MaxWidthProperty, (double) value);
        }
        
        public ColumnSortOrder SortOrder
        {
            get => 
                ((ColumnSortOrder) base.GetValue(SortOrderProperty));
            set => 
                base.SetValue(SortOrderProperty, value);
        }
        
        public ColumnSortMode SortMode
        {
            get => 
                ((ColumnSortMode) base.GetValue(SortModeProperty));
            set => 
                base.SetValue(SortModeProperty, value);
        }
        
        public string DisplayFormat
        {
            get => 
                ((string) ((string) base.GetValue(DisplayFormatProperty)));
            set => 
                base.SetValue(DisplayFormatProperty, value);
        }
        
        public UnboundColumnType UnboundType
        {
            get => 
                ((UnboundColumnType) base.GetValue(UnboundTypeProperty));
            set => 
                base.SetValue(UnboundTypeProperty, value);
        }
        
        public string UnboundExpression
        {
            get => 
                ((string) ((string) base.GetValue(UnboundExpressionProperty)));
            set => 
                base.SetValue(UnboundExpressionProperty, value);
        }
        
        public string Caption
        {
            get => 
                ((string) ((string) base.GetValue(CaptionProperty)));
            set => 
                base.SetValue(CaptionProperty, value);
        }
        
        public string EditFormCaption
        {
            get => 
                ((string) ((string) base.GetValue(EditFormCaptionProperty)));
            set => 
                base.SetValue(EditFormCaptionProperty, value);
        }
        
        public bool IsReadOnly
        {
            get => 
                ((bool) ((bool) base.GetValue(IsReadOnlyProperty)));
            set => 
                base.SetValue(IsReadOnlyProperty, (bool) value);
        }
        
        internal ColumnFilterMode FilterMode
        {
            get => 
                ((ColumnFilterMode) base.GetValue(FilterModeProperty));
            set => 
                base.SetValue(FilterModeProperty, value);
        }
        
        public DefaultBoolean AllowSort
        {
            get => 
                ((DefaultBoolean) base.GetValue(AllowSortProperty));
            set => 
                base.SetValue(AllowSortProperty, value);
        }
        
        protected DefaultBoolean AllowGroup
        {
            get => 
                ((DefaultBoolean) base.GetValue(AllowGroupProperty));
            set => 
                base.SetValue(AllowGroupProperty, value);
        }
        
        internal bool AllowAutoFilter
        {
            get => 
                ((bool) ((bool) base.GetValue(AllowAutoFilterProperty)));
            set => 
                base.SetValue(AllowAutoFilterProperty, (bool) value);
        }
        
        public int SortIndex
        {
            get => 
                ((int) ((int) base.GetValue(SortIndexProperty)));
            set => 
                base.SetValue(SortIndexProperty, (int) value);
        }
        
        public bool IsGrouped
        {
            get => 
                ((bool) ((bool) base.GetValue(IsGroupedProperty)));
            set => 
                base.SetValue(IsGroupedProperty, (bool) value);
        }
        
        public bool IsVisible
        {
            get => 
                ((bool) ((bool) base.GetValue(IsVisibleProperty)));
            set => 
                base.SetValue(IsVisibleProperty, (bool) value);
        }
        
        public ColumnGroupInterval GroupInterval
        {
            get => 
                ((ColumnGroupInterval) base.GetValue(GroupIntervalProperty));
            set => 
                base.SetValue(GroupIntervalProperty, value);
        }
        
        public DevExpress.XamarinForms.DataGrid.FixedStyle FixedStyle
        {
            get => 
                ((DevExpress.XamarinForms.DataGrid.FixedStyle) base.GetValue(FixedStyleProperty));
            set => 
                base.SetValue(FixedStyleProperty, value);
        }
        
        internal DevExpress.Data.AutoFilterCondition AutoFilterCondition
        {
            get => 
                ((DevExpress.Data.AutoFilterCondition) base.GetValue(AutoFilterConditionProperty));
            set => 
                base.SetValue(AutoFilterConditionProperty, value);
        }
        
        internal object AutoFilterValue
        {
            get => 
                base.GetValue(AutoFilterValueProperty);
            set => 
                base.SetValue(AutoFilterValueProperty, value);
        }
        
        internal bool ImmediateUpdateAutoFilter
        {
            get => 
                ((bool) ((bool) base.GetValue(ImmediateUpdateAutoFilterProperty)));
            set => 
                base.SetValue(ImmediateUpdateAutoFilterProperty, (bool) value);
        }
        
        public TextAlignment HorizontalContentAlignment
        {
            get => 
                ((TextAlignment) base.GetValue(HorizontalContentAlignmentProperty));
            set => 
                base.SetValue(HorizontalContentAlignmentProperty, value);
        }
        
        public TextAlignment VerticalContentAlignment
        {
            get => 
                ((TextAlignment) base.GetValue(VerticalContentAlignmentProperty));
            set => 
                base.SetValue(VerticalContentAlignmentProperty, value);
        }
        
        public string GroupValueDisplayFormat
        {
            get => 
                ((string) ((string) base.GetValue(GroupValueDisplayFormatProperty)));
            set => 
                base.SetValue(GroupValueDisplayFormatProperty, value);
        }
        
        public string ActualCaption =>
            (!string.IsNullOrEmpty(this.Caption) ? this.Caption : SplitStringHelper.SplitPascalCaseString(this.FieldName));
        
        public bool IsUnbound =>
            ((this.UnboundType != UnboundColumnType.Bound) || !string.IsNullOrEmpty(this.UnboundExpression));
        
        internal bool HasFixedSeparator { get; set; }
        
        protected internal bool IsAutoGenerated { get; set; }
        
        protected internal DevExpress.XamarinForms.DataGrid.Internal.PropertyAccessor PropertyAccessor =>
            this.propertyAccessor;
        
        protected virtual DevExpress.Data.AutoFilterCondition DefaultAutoFilterCondition =>
            DevExpress.Data.AutoFilterCondition.Like;
        
        internal ICustomCellTextProvider CustomCellTextProvider { get; set; }
        
        internal bool IsParentReadOnly { get; set; }
        
        internal DevExpress.Data.AutoFilterCondition ActualAutoFilterCondition =>
            ((this.AutoFilterCondition != DevExpress.Data.AutoFilterCondition.Default) ? this.AutoFilterCondition : this.DefaultAutoFilterCondition);
        
        protected internal virtual bool ActualIsReadOnly
        {
            get
            {
                if (!this.IsParentReadOnly && ((this.propertyAccessor == null) || !this.propertyAccessor.IsReadOnly))
                {
                    return this.IsReadOnly;
                }
                return true;
            }
        }
        
        Type IFieldValueVisitor.FieldValueType =>
            this.GetFieldTypeForVisitor();
        
        ColumnSortMode IFieldValueVisitor.ActualSortMode =>
            this.GetActualSortModeForVisitor();
        
        internal GroupDescriptor<IRowData> GroupComparer
        {
            get
            {
                if (!this.IsGrouped)
                {
                    return null;
                }
                if (this.groupByComparer == null)
                {
                    this.groupByComparer = this.CreateGroupByComparer();
                }
                return this.groupByComparer;
            }
        }
        
        internal SortDescriptor<IRowData> SortComparer
        {
            get
            {
                if (this.SortOrder == ColumnSortOrder.None)
                {
                    return null;
                }
                if (this.comparer == null)
                {
                    this.comparer = this.CreateComparer();
                }
                return this.comparer;
            }
        }
        
        internal class ColumnComparer<T> : IComparer<IRowData>, GridColumn.IColumnComparer
        {
            public ColumnComparer(string fieldName, bool ascending, ColumnSortMode sortMode, IFieldValueVisitor fieldValueVisitor)
            {
                this.FieldName = fieldName;
                this.Ascending = ascending;
                this.UseGenericMethods = true;
                this.SortMode = sortMode;
                this.FieldValueVisitor = fieldValueVisitor;
            }
            
            public int Compare(IRowData x, IRowData y)
            {
                int num = this.CompareCore(x, y);
                return (this.Ascending ? num : -num);
            }
            
            protected virtual int CompareCore(IRowData x, IRowData y)
            {
                object a = null;
                object b = null;
                ColumnSortMode sortMode = this.SortMode;
                if ((sortMode != ColumnSortMode.DisplayText) || (this.FieldValueVisitor == null))
                {
                    sortMode = ColumnSortMode.Value;
                }
                else
                {
                    a = this.FieldValueVisitor.GetFormattedFieldValue(x);
                    b = this.FieldValueVisitor.GetFormattedFieldValue(y);
                    if ((a == null) || (b == null))
                    {
                        sortMode = ColumnSortMode.Value;
                    }
                }
                if (sortMode == ColumnSortMode.Value)
                {
                    if (!this.UseGenericMethods || !(a is T))
                    {
                        a = x.GetFieldValue(this.FieldName);
                        b = y.GetFieldValue(this.FieldName);
                    }
                    else
                    {
                        a = x.GetFieldValueGeneric<T>(this.FieldName);
                        b = y.GetFieldValueGeneric<T>(this.FieldName);
                    }
                }
                if (!this.UseGenericMethods || !(a is T))
                {
                    return Comparer.Default.Compare(a, b);
                }
                return Comparer<T>.Default.Compare((T) a, (T) b);
            }
            
            protected bool Ascending { get; private set; }
            
            public string FieldName { get; private set; }
            
            public bool UseGenericMethods { get; set; }
            
            public IFieldValueVisitor FieldValueVisitor { get; set; }
            
            public ColumnSortMode SortMode { get; set; }
        }
        
        internal interface IColumnComparer
        {
            bool UseGenericMethods { get; set; }
        }
        
        internal class NumbersComparer : GridColumn.ColumnComparer<object>
        {
            public NumbersComparer(string fieldName, bool ascending, ColumnSortMode sortMode, IFieldValueVisitor fieldValueVisitor) : base(fieldName, ascending, sortMode, fieldValueVisitor)
            {
            }
            
            protected override int CompareCore(IRowData x, IRowData y)
            {
                if ((x != null) && (y != null))
                {
                    object formattedFieldValue = null;
                    object fieldValue = null;
                    ColumnSortMode sortMode = base.SortMode;
                    if ((sortMode != ColumnSortMode.DisplayText) || (base.FieldValueVisitor == null))
                    {
                        sortMode = ColumnSortMode.Value;
                    }
                    else
                    {
                        formattedFieldValue = base.FieldValueVisitor.GetFormattedFieldValue(x);
                        fieldValue = base.FieldValueVisitor.GetFormattedFieldValue(y);
                        if ((formattedFieldValue == null) && (fieldValue == null))
                        {
                            sortMode = ColumnSortMode.Value;
                        }
                    }
                    if (sortMode == ColumnSortMode.Value)
                    {
                        formattedFieldValue = x.GetFieldValue(base.FieldName);
                        fieldValue = y.GetFieldValue(base.FieldName);
                    }
                    if ((formattedFieldValue == null) && (fieldValue == null))
                    {
                        return 0;
                    }
                    if (formattedFieldValue == null)
                    {
                        return -1;
                    }
                    if (fieldValue == null)
                    {
                        return 1;
                    }
                    Type type = formattedFieldValue.GetType();
                    Type type2 = fieldValue.GetType();
                    if (sortMode == ColumnSortMode.DisplayText)
                    {
                        if ((type == typeof(string)) && (type2 == typeof(string)))
                        {
                            return Convert.ToString(formattedFieldValue).CompareTo(Convert.ToString(fieldValue));
                        }
                    }
                    else if (IsNumberType(type) && IsNumberType(type2))
                    {
                        double num = Convert.ToDouble(formattedFieldValue);
                        return ((double) num).CompareTo(Convert.ToDouble(fieldValue));
                    }
                }
                return 0;
            }
            
            public static bool IsNumberType(Type type) => 
                ((type == typeof(int)) || ((type == typeof(long)) || ((type == typeof(float)) || ((type == typeof(double)) || ((type == typeof(decimal)) || ((type == typeof(byte)) || ((type == typeof(short)) || ((type == typeof(uint)) || ((type == typeof(sbyte)) || ((type == typeof(ulong)) || IntrospectionExtensions.GetTypeInfo(type).IsEnum))))))))));
        }
    }
}
