// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.Core.Themes;
    using System;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using Xamarin.Forms;
    
    public class CellStyle : StyleBase
    {
        public static readonly BindableProperty SelectionColorProperty;
        public static readonly BindableProperty SelectionFontColorProperty;
        public static readonly BindableProperty ImagePaddingProperty;
        public static readonly BindableProperty SwitchPaddingProperty;
        public static readonly BindableProperty CheckboxColorProperty;
        
        static CellStyle()
        {
            ParameterExpression expression = Expression.Parameter(typeof(CellStyle), "o");
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
            SelectionColorProperty = BindingUtils.Instance.CreateBindableProperty<CellStyle, Color>(Expression.Lambda<Func<CellStyle, Color>>((Expression) Expression.Property((Expression) expression, typeof(CellStyle).GetProperty("SelectionColor")), expressionArray1), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(CellStyle), "o");
            ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
            SelectionFontColorProperty = BindingUtils.Instance.CreateBindableProperty<CellStyle, Color>(Expression.Lambda<Func<CellStyle, Color>>((Expression) Expression.Property((Expression) expression, typeof(CellStyle).GetProperty("SelectionFontColor")), expressionArray2), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(CellStyle), "o");
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            ImagePaddingProperty = BindingUtils.Instance.CreateBindableProperty<CellStyle, Thickness>(Expression.Lambda<Func<CellStyle, Thickness>>((Expression) Expression.Property((Expression) expression, typeof(CellStyle).GetProperty("ImagePadding")), expressionArray3), new Thickness(-1.0), BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(CellStyle), "o");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            SwitchPaddingProperty = BindingUtils.Instance.CreateBindableProperty<CellStyle, Thickness>(Expression.Lambda<Func<CellStyle, Thickness>>((Expression) Expression.Property((Expression) expression, typeof(CellStyle).GetProperty("SwitchPadding")), expressionArray4), new Thickness(-1.0), BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(CellStyle), "o");
            ParameterExpression[] expressionArray5 = new ParameterExpression[] { expression };
            CheckboxColorProperty = BindingUtils.Instance.CreateBindableProperty<CellStyle, Color>(Expression.Lambda<Func<CellStyle, Color>>((Expression) Expression.Property((Expression) expression, typeof(CellStyle).GetProperty("CheckboxColor")), expressionArray5), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
        }
        
        public CellStyle()
        {
            ThemeManager.Initialize(this);
        }
        
        public CellStyle(IStyledElement styledElement) : base(styledElement)
        {
            ThemeManager.Initialize(this);
        }
        
        protected override StyleBase CreateCloneInstance()
        {
            CellStyle style1 = new CellStyle();
            style1.SelectionColor = this.SelectionColor;
            style1.SelectionFontColor = this.SelectionFontColor;
            style1.ImagePadding = this.ImagePadding;
            style1.CheckboxColor = this.CheckboxColor;
            style1.SwitchPadding = this.SwitchPadding;
            return style1;
        }
        
        protected override void OnStylePropertyChanged()
        {
            IStyledElement styledElement = base.StyledElement;
            if (styledElement == null)
            {
                IStyledElement local1 = styledElement;
            }
            else
            {
                styledElement.OnCellStyleChanged();
            }
        }
        
        public Color SelectionColor
        {
            get => 
                ((Color) base.GetValue(SelectionColorProperty));
            set => 
                base.SetValue(SelectionColorProperty, value);
        }
        
        public Color SelectionFontColor
        {
            get => 
                ((Color) base.GetValue(SelectionFontColorProperty));
            set => 
                base.SetValue(SelectionFontColorProperty, value);
        }
        
        public Thickness ImagePadding
        {
            get => 
                ((Thickness) base.GetValue(ImagePaddingProperty));
            set => 
                base.SetValue(ImagePaddingProperty, value);
        }
        
        public Thickness SwitchPadding
        {
            get => 
                ((Thickness) base.GetValue(SwitchPaddingProperty));
            set => 
                base.SetValue(SwitchPaddingProperty, value);
        }
        
        public Color CheckboxColor
        {
            get => 
                ((Color) base.GetValue(CheckboxColorProperty));
            set => 
                base.SetValue(CheckboxColorProperty, value);
        }
    }
}
