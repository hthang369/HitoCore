using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Input;
using Xamarin.Forms;

namespace HitoAppCore.DataGrid
{
    public class GridControl : GridLayout, IHorizontalScrollingData, IDisposable, IServiceProvider
    {
        // Fields
        private EventHandler onUpdateUI;
        private ContentPage formEditorContentPage;
        internal const int AutoFilterRowHandle = -999_997;
        internal const double DefaultAutoFilterHeight = 0x2c;
        public static readonly BindableProperty FilterPanelHeightProperty;
        public static readonly BindableProperty FilterStringProperty;
        private static readonly BindablePropertyKey ActualFilterStringPropertyKey;
        public static readonly BindableProperty ActualFilterStringProperty;
        public static readonly BindableProperty FilterPanelVisibilityProperty;
        public static readonly BindableProperty AutoFilterPanelHeightProperty;
        public static readonly BindableProperty AutoFilterPanelVisibilityProperty;
        private bool lockFilterStringChanged;
        private const string VisibleColumnsPropertyName = "VisibleColumns";
        internal const int NewItemRowHandle = -2_147_483_647;
        public const double DefaultColumnHeaderHeight = 0x2c;
        public const double DefaultRowHeight = 0x2c;
        public const double DefaultColumnWidth = 120.0;
        private const int GRID_HEADER_ROW = 0;
        private const int GRID_SAVE_CANCEL_BUTTONS_ROW = 1;
        private const int GRID_AUTO_FILTER_ROW = 2;
        private const int GRID_NEW_ITEM_ROW = 3;
        private const int GRID_SCROLL_ROW = 4;
        private const int GRID_TOTAL_SUMMARY_ROW = 5;
        private const int GRID_FILTER_ROW = 6;
        private const int GRID_COLUMN_CHOOSER_COLUMN = 1;
        public const int InvalidRowHandle = -2_147_483_648;
        public static readonly BindableProperty ItemsSourceProperty;
        public static readonly BindableProperty ColumnHeadersHeightProperty;
        public static readonly BindableProperty ColumnHeadersVisibilityProperty;
        public static readonly BindableProperty RowHeightProperty;
        public static readonly BindableProperty SelectedRowHandleProperty;
        public static readonly BindableProperty SelectedDataObjectProperty;
        public static readonly BindableProperty SortModeProperty;
        public static readonly BindableProperty IsReadOnlyProperty;
        public static readonly BindableProperty AllowSortProperty;
        public static readonly BindableProperty AllowEditRowsProperty;
        public static readonly BindableProperty AllowDeleteRowsProperty;
        public static readonly BindableProperty AllowResizeColumnsProperty;
        public static readonly BindableProperty AllowGroupProperty;
        public static readonly BindableProperty AllowGroupCollapseProperty;
        public static readonly BindableProperty IsRowCellMenuEnabledProperty;
        public static readonly BindableProperty IsTotalSummaryMenuEnabledProperty;
        public static readonly BindableProperty IsColumnMenuEnabledProperty;
        public static readonly BindableProperty IsGroupRowMenuEnabledProperty;
        public static readonly BindableProperty HighlightMenuTargetElementsProperty;
        public static readonly BindableProperty AutoGenerateColumnsModeProperty;
        public static readonly BindableProperty IsPullToRefreshEnabledProperty;
        public static readonly BindableProperty PullToRefreshCommandProperty;
        public static readonly BindableProperty LoadMoreCommandProperty;
        public static readonly BindableProperty RowTapCommandProperty;
        public static readonly BindableProperty IsLoadMoreEnabledProperty;
        public static readonly BindableProperty IsColumnChooserEnabledProperty;
        public static readonly BindableProperty GroupsInitiallyExpandedProperty;
        public static readonly BindableProperty RowEditModeProperty;
        public static readonly BindableProperty ColumnsAutoWidthProperty;
        private static bool platformInitialized;
        private double horizontalScrollOffsetCore;
        private bool allowHorizontalScrollingVirtualization = true;
        private readonly HeaderContentProvider headerContentProvider;
        private readonly HeadersContainer headers;
        //private readonly GridDataController dataController;
        private bool isDisposed;
        internal bool isColumnResizing;
        private int selectedRowSourceIndex = -1;
        private double totalColumnsWidth;
        private List<GridColumn> visibleColumns;
        private GridColumnCollection columns;
        private IList<GridColumn> autoGeneratedColumns;
        private bool? isDevExpressNotRegistered;
        private bool isRendererShouldBeLoaded;
        [CompilerGenerated]
        private EventHandler PullToRefresh;
        [CompilerGenerated]
        private EventHandler LoadMore;
        [CompilerGenerated]
        private EventHandler FilterApplied;
        private Size size = Size.Zero;
        private bool isThemeChanged;
        private int openedRowHandle = -2_147_483_648;
        internal const double SaveCancelRowHeight = 50.0;
        private CellIndex openEditorCellIndex;
        public static readonly BindableProperty NewItemRowVisibilityProperty;
        private readonly List<BoxView> menuContext = new List<BoxView>();
        private bool isPopupMenuOpened;
        private int currentDraggedRowHandle = -2_147_483_648;
        private double sumDistance;
        private RowDragDirection dragDirection;
        private ServiceContainer serviceContainer; 
        public static readonly BindableProperty SwipeButtonCommandProperty;
        public static readonly BindableProperty TotalSummaryHeightProperty;
        public static readonly BindableProperty TotalSummaryVisibilityProperty;

        // Methods
        static GridControl()
        {
            //FilterPanelHeightProperty = BindingUtils.CreateProperty<GridControl, double>(nameof(FilterPanelHeight), DefaultFilterPanelHeight, OnFilterPanelHeightChanged);
            //FilterStringProperty = BindingUtils.CreateProperty<GridControl, string>(nameof(FilterString), string.Empty, OnFilterStringChanged);
            //ActualFilterStringPropertyKey = BindingUtils.CreateReadOnlyProperty<GridControl, string>(nameof(ActualFilterString), string.Empty);
            //ActualFilterStringProperty = ActualFilterStringPropertyKey.BindableProperty;
            //AutoFilterPanelHeightProperty = BindingUtils.CreateProperty<GridControl, double>(nameof(AutoFilterPanelHeight), 0x2c, OnAutoFilterPanelHeightChanged));
            //AutoFilterPanelVisibilityProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AutoFilterPanelVisibility), false, OnAutoFilterPanelVisibilityChanged));
            //NewItemRowVisibilityProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(NewItemRowVisibility), false, OnNewItemRowVisibilityChanged));
            //SwipeButtonCommandProperty = BindingUtils.CreateProperty<GridControl, ICommand>(nameof(SwipeButtonCommand), null);
            //TotalSummaryHeightProperty = BindingUtils.CreateProperty<GridControl, double>(nameof(TotalSummaryHeight), DefaultTotalSummaryHeight, OnTotalSummaryHeightChanged));
            ItemsSourceProperty = BindingUtils.CreateProperty<GridControl, object>(nameof(ItemsSource), null, OnItemsSourceChanged);
            ColumnHeadersHeightProperty = BindingUtils.CreateProperty<GridControl, double>(nameof(ColumnHeadersHeight), 0x2c, OnColumnHeadersHeightChanged);
            ColumnHeadersVisibilityProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(ColumnHeadersVisibility), true, OnColumnHeadersVisibilityChanged);
            RowHeightProperty = BindingUtils.CreateProperty<GridControl, double>(nameof(RowHeight), 0x2c, OnRowHeightChanged);
            //SelectedRowHandleProperty = BindingUtils.CreateProperty<GridControl, int>(nameof(SelectedRowHandle), 0, OnSelectedRowHandleChanged));
            //SelectedDataObjectProperty = BindingUtils.CreateProperty<GridControl, object>(nameof(SelectedDataObject), null, OnSelectedDataObjectChanged));
            //IsReadOnlyProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsReadOnly), false, OnReadOnlyChanged));
            //AllowSortProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowSort), true);
            //AllowEditRowsProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowEditRows), true);
            //AllowDeleteRowsProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowDeleteRows), true);
            //AllowResizeColumnsProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowResizeColumns), true);
            //AllowGroupProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowGroup), true);
            //AllowGroupCollapseProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(AllowGroupCollapse), true, OnAllowGroupCollapseChanged));
            //IsRowCellMenuEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsRowCellMenuEnabled), true);
            //IsTotalSummaryMenuEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsTotalSummaryMenuEnabled), true);
            //IsColumnMenuEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsColumnMenuEnabled), true);
            //IsGroupRowMenuEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsGroupRowMenuEnabled), true);
            //HighlightMenuTargetElementsProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(HighlightMenuTargetElements), true);
            //IsPullToRefreshEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsPullToRefreshEnabled), false, OnIsPullToRefreshEnabledPropertyChanged));
            //PullToRefreshCommandProperty = BindingUtils.CreateProperty<GridControl, ICommand>(nameof(PullToRefreshCommand), null, new BindableProperty.BindingPropertyChangedDelegate<ICommand>(null, OnPullToRefreshCommandPropertyChanged));
            //LoadMoreCommandProperty = BindingUtils.CreateProperty<GridControl, ICommand>(nameof(LoadMoreCommand), null, new BindableProperty.BindingPropertyChangedDelegate<ICommand>(null, OnLoadMoreCommandChanged));
            //RowTapCommandProperty = BindingUtils.CreateProperty<GridControl, ICommand>(nameof(RowTapCommand), null);
            //IsLoadMoreEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsLoadMoreEnabled), false, OnIsLoadMoreEnabledPropertyChanged));
            //IsColumnChooserEnabledProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(IsColumnChooserEnabled), true, null);
            //GroupsInitiallyExpandedProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(GroupsInitiallyExpanded), true, OnGroupsInitiallyExpandedPropertyChanged));
            //ColumnsAutoWidthProperty = BindingUtils.CreateProperty<GridControl, bool>(nameof(ColumnsAutoWidth), true, OnColumnsAutoWidthPropertyChanged));
        }

        public GridControl()
        {
            this.allowHorizontalScrollingVirtualization = true;
            this.selectedRowSourceIndex = -1;
            this.size = Size.Zero;
            this.openedRowHandle = -2_147_483_648;
            this.menuContext = new List<BoxView>();
            this.currentDraggedRowHandle = -2_147_483_648;
            this.IsLoaded = false;
            //this.InitServices();
            this.visibleColumns = new List<GridColumn>();
            //this.dataController.SelectionChanged += new EventHandler(this.OnDataControllerSelectionChanged);
            //this.dataController.DataChanged += new GridDataControllerDataChangedEventHandler(this.OnDataControllerDataChanged);
            //this.dataController.CalculateCustomSummary += new CustomSummaryEventHandler(this.OnDataControllerCalculateCustomSummary);
            //this.dataController.GroupRowCollapsing += new RowAllowEventHandler(this.OnDataControllerGroupRowCollapsing);
            //this.dataController.GroupRowCollapsed += new RowEventHandler(this.OnDataControllerGroupRowCollapsed);
            //this.dataController.GroupRowExpanding += new RowAllowEventHandler(this.OnDataControllerGroupRowExpanding);
            //this.dataController.GroupRowExpanded += new RowEventHandler(this.OnDataControllerGroupRowExpanded);
            //this.dataController.AreGroupsInitiallyCollapsed = !this.GroupsInitiallyExpanded;
            //this.InitFiltering();
            //this.InitNewItemRow();
            base.ColumnSpacing = 0.0;
            base.RowSpacing = 0.0;
            //this.InitSummaries();
            //this.InitConditionalFormattings();
            this.headerContentProvider = new HeaderContentProvider(this.ActualColumnHeadersHeight, this);
            HeadersContainer container1 = new HeadersContainer(this.headerContentProvider);
            container1.VerticalOptions = LayoutOptions.FillAndExpand;
            container1.HorizontalOptions = LayoutOptions.FillAndExpand;
            container1.IsClippedToBounds = true;
            this.headers = container1;
            //this.InitTotalSummaryUI();
            //this.InitFilteringUI();
            //this.ConfigureInternalGridStructure();
            //this.InitPopupMenu();
            //this.InitCommandBindings();
            //this.InitSwipeButtons();
            //this.InitPullToRefreshView();
            //this.InitLoadMore();
            //this.InitRowEditing();
            //this.InitGestureHandler();
            //base.get_Children().Add(this.scroller, 0, 4);
            //base.get_Children().Add(this.saveCancelEditingRowControl, 0, 1);
            base.Children.Add(this.headers, 0, 0);
            //base.get_Children().Add(this.autoFilterPanelContainer, 0, 2);
            //base.get_Children().Add(this.newItemRowContainer, 0, 3);
            //base.get_Children().Add(this.totalSummary, 0, 5);
            //base.get_Children().Add(this.filterPanelContainer, 0, 6);
            //this.SelectedRowHandle = -2_147_483_648;
            base.IsClippedToBounds = true;
        }
        protected virtual GridColumnCollection CreateColumns() =>
            new GridColumnCollection();

        public void Dispose()
        {
            if (!this.isDisposed)
            {
                //this.UnregisterGestureHandlers();
                this.isDisposed = true;
            }
        }

        public object GetService(Type serviceType)
        {
            object service = this.ServiceContainer.GetService(serviceType);
            if (service == null)
            {
                service = GlobalServices.Instance.GetService(serviceType);
            }
            return service;
        }

        private IReadOnlyList<GridColumn> GetEditableColumns(Predicate<GridColumn> criteria)
        {
            List<GridColumn> list = new List<GridColumn>();
            foreach (GridColumn column in this.Columns)
            {
                if (criteria(column))
                {
                    list.Add(column);
                }
            }
            return (IReadOnlyList<GridColumn>)list;
        }

        internal IList<GridColumn> GetVisibleColumns() =>
            ((IList<GridColumn>)this.visibleColumns);

        internal virtual bool CanGroupByColumn(GridColumn groupingColumn)
        {
            if ((this.VisibleColumns.Count == 1) && (this.VisibleColumns[0] == groupingColumn))
            {
                return false;
            }
            return true;
        }

        public void GroupBy(GridColumn column)
        {
            if ((column != null) && this.CanGroupByColumn(column))
            {
                column.IsGrouped = true;
            }
        }

        public void GroupBy(string fieldName)
        {
            this.GroupBy(this.Columns[fieldName]);
        }

        protected override void OnParentSet()
        {
            if (base.Parent != null)
            {
                this.IsLoaded = true;
                this.UpdateVisibleColumns();
                //this.SortingColumnManager = SortingColumnManager.Create(this.Columns, this.dataController, this.SortMode, this.IsLoaded);
                //this.SortingColumnManager.GroupAndSortData();
                //this.ResetSelection();
            }
            base.OnParentSet();
        }

        private bool IsColumnVisibleInHeaders(GridColumn column) => !column.IsGrouped;

        protected void UpdateVisibleColumns()
        {
            this.UpdateVisibleColumns(false);
        }

        protected virtual void UpdateVisibleColumns(bool forceUpdateRows)
        {
            if (this.IsLoaded)
            {
                this.horizontalScrollOffsetCore = 0.0;
                //this.FinishCurrentDragging();
                //this.CloseEditingRow();
                //this.TryAutoGenerateColumns();
                GridColumnCollection columns = this.Columns;
                List<GridColumn> list = new List<GridColumn>();
                List<GridColumn> list2 = new List<GridColumn>();
                List<GridColumn> list3 = new List<GridColumn>();
                int count = columns.Count;
                for (int i = 0; i < count; i++)
                {
                    GridColumn column = columns[i];
                    if (column.IsVisible && this.IsColumnVisibleInHeaders(column))
                    {
                        if (column.FixedStyle == FixedStyle.Left)
                        {
                            list2.Add(column);
                        }
                        else if (column.FixedStyle == FixedStyle.Right)
                        {
                            list3.Add(column);
                        }
                        else
                        {
                            list.Add(column);
                        }
                    }
                }
                list.InsertRange(0, (IEnumerable<GridColumn>)list2);
                list.AddRange((IEnumerable<GridColumn>)list3);
                if (forceUpdateRows || !ListHelper.AreEqual<GridColumn>((IList<GridColumn>)this.visibleColumns, (IList<GridColumn>)list))
                {
                    this.visibleColumns = list;
                    this.CheckGroupingOnVisibleColumns();
                    //this.RecalculateVisibleColumnsWidth();
                    this.UpdateColumnHeadersHeight();
                    //this.dataRowContentProvider.SetColumns(this.Columns);
                    this.headerContentProvider.SetColumns(this.Columns);
                    //this.totalSummaryContentProvider.SetColumns(this.Columns);
                    //this.autoFilterPanelContentProvider.SetColumns(this.Columns);
                    //this.newItemRowContentProvider.SetColumns(this.Columns);
                    //this.editRowContentProvider.SetColumns(this.Columns);
                    //this.dataRowContentProvider.SetVisibleColumns((IReadOnlyList<GridColumn>)this.visibleColumns);
                    this.headerContentProvider.SetVisibleColumns((IReadOnlyList<GridColumn>)this.visibleColumns);
                    //this.totalSummaryContentProvider.SetVisibleColumns((IReadOnlyList<GridColumn>)this.visibleColumns);
                    //this.autoFilterPanelContentProvider.SetVisibleColumns((IReadOnlyList<GridColumn>)this.visibleColumns);
                    //this.newItemRowContentProvider.SetVisibleColumns((IReadOnlyList<GridColumn>)this.visibleColumns);
                    //this.editRowContentProvider.SetVisibleColumns(this.VisibleColumns);
                }
            }
        }
        private void CheckGroupingOnVisibleColumns()
        {
            if (this.visibleColumns.Count == 0)
            {
                foreach (GridColumn column in this.Columns)
                {
                    if (column.IsGrouped)
                    {
                        column.IsGrouped = false;
                    }
                }
            }
            else if ((this.visibleColumns.Count == 1) && this.visibleColumns[0].IsGrouped)
            {
                this.visibleColumns[0].IsGrouped = false;
            }
        }
        private void UpdateColumnHeadersHeight()
        {
            this.headerContentProvider.SetRowHeight(this.ActualColumnHeadersHeight);
            base.RowDefinitions[0].Height = (GridLength)this.ActualColumnHeadersHeight;
            this.RelayoutDataRows();
        }
        private void RelayoutDataRows()
        {
            //this.scroller.Redraw(this.scroller.Width, this.scroller.Height);
        }
        private static void OnRowHeightChanged(BindableObject bindable, double oldValue, double newValue)
        {
            
        }

        private static void OnColumnHeadersVisibilityChanged(BindableObject bindable, bool oldValue, bool newValue)
        {
            
        }

        private static void OnColumnHeadersHeightChanged(BindableObject bindable, double oldValue, double newValue)
        {
            
        }

        private static void OnItemsSourceChanged(BindableObject bindable, object oldValue, object newValue)
        {
            
        }
        public DataTemplate EditFormContent { get; set; }

        private RowDefinition AutoFilterRowDefinition =>
            base.RowDefinitions[2];

        internal static double DefaultFilterPanelHeight
        {
            get
            {
                OnIdiom<double> idiom1 = new OnIdiom<double>();
                idiom1.Phone = 50.0;
                idiom1.Tablet = 70.0;
                return idiom1;
            }
        }

        private RowDefinition FilterPanelRowDefinition =>
            base.RowDefinitions[6];

        private RowDefinition ColumnHeadersRowDefinition =>
            base.RowDefinitions[0];

        internal GridColumn CommandColumn { get; set; }

        internal int CommandRowIndex { get; set; }

        internal HeadersContainer Headers =>
            this.headers;

        private bool IsLoaded { get; set; }

        private Command SingleTapInGridCommand { get; set; }

        private Command DoubleTapInGridCommand { get; set; }

        private Command LongTapInGridCommand { get; set; }

        public double ColumnHeadersHeight
        {
            get =>
                ((double)((double)base.GetValue(ColumnHeadersHeightProperty)));
            set =>
                base.SetValue(ColumnHeadersHeightProperty, (double)value);
        }

        public bool ColumnHeadersVisibility
        {
            get =>
                ((bool)((bool)base.GetValue(ColumnHeadersVisibilityProperty)));
            set =>
                base.SetValue(ColumnHeadersVisibilityProperty, (bool)value);
        }

        protected double ActualColumnHeadersHeight
        {
            get
            {
                if (!this.ColumnHeadersVisibility || (this.VisibleColumns.Count == 0))
                {
                    return 0.0;
                }
                return this.ColumnHeadersHeight;
            }
        }

        public double RowHeight
        {
            get =>
                ((double)((double)base.GetValue(RowHeightProperty)));
            set =>
                base.SetValue(RowHeightProperty, (double)value);
        }

        public object ItemsSource
        {
            get =>
                base.GetValue(ItemsSourceProperty);
            set
            {
                if (value == null)
                {
                    base.ClearValue(ItemsSourceProperty);
                }
                else
                {
                    base.SetValue(ItemsSourceProperty, value);
                }
            }
        }

        public GridColumnCollection Columns
        {
            get
            {
                if (this.columns == null)
                {
                    this.columns = this.CreateColumns();
                    //this.SubscribeColumnsEvents();
                }
                return this.columns;
            }
        }

        public IReadOnlyList<GridColumn> VisibleColumns =>
            ((IReadOnlyList<GridColumn>)this.visibleColumns);

        private ServiceContainer ServiceContainer { get; }

        public double HorizontalScrollOffset { get; }

        public double VisibleRowWidth { get; }

        public bool ColumnsAutoWidth { get; }

        public bool AllowHorizontalScrollingVirtualization { get; }

        private enum RowDragDirection
        {
            None,
            Right,
            Left
        }
    }
}
