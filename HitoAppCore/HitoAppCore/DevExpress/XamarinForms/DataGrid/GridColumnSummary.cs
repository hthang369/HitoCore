// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.Compatibility.System;
    using DevExpress.Utils.Serializing;
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.DataGrid.Internal;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading.Tasks;
    using Xamarin.Forms;
    
    public class GridColumnSummary : BindableObject, IToDecimalConverter, System.ICloneable, INotifyPropertyChanged
    {
        public static readonly BindableProperty FieldNameProperty;
        public static readonly BindableProperty DisplayFormatProperty;
        public static readonly BindableProperty IgnoreNullValuesProperty;
        public static readonly BindableProperty TypeProperty;
        private object summaryValue;
        private bool isValid;
        private bool getValueCalling;
        
        static GridColumnSummary()
        {
            ParameterExpression expression = Expression.Parameter(typeof(GridColumnSummary), "o");
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
            FieldNameProperty = BindingUtils.Instance.CreateBindableProperty<GridColumnSummary, string>(Expression.Lambda<Func<GridColumnSummary, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumnSummary).GetProperty("FieldName")), expressionArray1), null, BindingMode.OneWay, null, OnFieldNameChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumnSummary), "o");
            ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
            DisplayFormatProperty = BindingUtils.Instance.CreateBindableProperty<GridColumnSummary, string>(Expression.Lambda<Func<GridColumnSummary, string>>((Expression) Expression.Property((Expression) expression, typeof(GridColumnSummary).GetProperty("DisplayFormat")), expressionArray2), null, BindingMode.OneWay, null, OnDisplayFormatChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumnSummary), "o");
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            IgnoreNullValuesProperty = BindingUtils.Instance.CreateBindableProperty<GridColumnSummary, bool>(Expression.Lambda<Func<GridColumnSummary, bool>>((Expression) Expression.Property((Expression) expression, typeof(GridColumnSummary).GetProperty("IgnoreNullValues")), expressionArray3), false, BindingMode.OneWay, null, OnIgnoreNullValuesChanged, null, null, null);
            expression = Expression.Parameter(typeof(GridColumnSummary), "o");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            TypeProperty = BindingUtils.Instance.CreateBindableProperty<GridColumnSummary, SummaryType>(Expression.Lambda<Func<GridColumnSummary, SummaryType>>((Expression) Expression.Property((Expression) expression, typeof(GridColumnSummary).GetProperty("Type")), expressionArray4), SummaryType.None, BindingMode.OneWay, null, OnTypeChanged, null, null, null);
        }
        
        public GridColumnSummary() : this(string.Empty)
        {
        }
        
        public GridColumnSummary(string column)
        {
            this.FieldName = column;
            this.RowHandleFrom = -1;
            this.RowHandleTo = -1;
        }
        
        private void AccumulateSummaryValue(SummaryCalculator calculator, object value, IRowData rowData)
        {
            if (!this.IgnoreNullValues || (value != null))
            {
                calculator.AccumulateValue(rowData, value, this);
            }
        }
        
        private bool AreTaskCancelledExceptionsOnly(AggregateException exception)
        {
            using (IEnumerator<Exception> enumerator = exception.InnerExceptions.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    if (!(enumerator.Current is TaskCanceledException))
                    {
                        return false;
                    }
                }
            }
            return (exception.InnerExceptions.Count > 0);
        }
        
        private bool CalculateSummaryInstant(int from, int to)
        {
            if (this.Type != SummaryType.Count)
            {
                return false;
            }
            int num = (to - from) + 1;
            this.SummaryValue = (int) num;
            return true;
        }
        
        private object CalculateSummaryRange(int from, int to)
        {
            SummaryCalculator calculator = this.ChooseCalculator();
            if (calculator.Begin())
            {
                this.CalculateSummaryRangeCore(calculator, from, to);
            }
            calculator.End();
            return calculator.GetFinalResult();
        }
        
        private void CalculateSummaryRangeCore(SummaryCalculator calculator, int from, int to)
        {
            IRowData reuseRow = null;
            for (int i = from; i <= to; i++)
            {
                if (!this.Controller.IsGroupRow(i))
                {
                    reuseRow = this.Controller.GetRow(i, reuseRow);
                    if (reuseRow != null)
                    {
                        object fieldValue = reuseRow.GetFieldValue(this.FieldName);
                        this.ProcessSummaryValue(calculator, fieldValue, reuseRow);
                    }
                }
            }
        }
        
        private void CalculateSummaryValueCore(int from, int to)
        {
            this.SummaryValue = this.CalculateSummaryRange(from, to);
        }
        
        private SummaryCalculator ChooseCalculator()
        {
            switch (this.Type)
            {
                case SummaryType.Sum:
                    return new SummaryCalculatorSum();
                
                case SummaryType.Min:
                    return new SummaryCalculatorMin();
                
                case SummaryType.Max:
                    return new SummaryCalculatorMax();
                
                case SummaryType.Count:
                    return new SummaryCalculatorCount();
                
                case SummaryType.Average:
                    return new SummaryCalculatorAverage();
                
                case SummaryType.Custom:
                    return new SummaryCalculatorCustom(this.Controller, this.FieldName, this);
                
                case (SummaryType.Custom | SummaryType.Sum):
                    return new SummaryCalculatorSortedList(this.Controller, this.FieldName, this);
            }
            return new SummaryCalculatorNone();
        }
        
        public GridColumnSummary Clone()
        {
            GridColumnSummary summary1 = new GridColumnSummary(this.FieldName);
            summary1.Type = this.Type;
            summary1.IgnoreNullValues = this.IgnoreNullValues;
            summary1.IsValid = false;
            summary1.DisplayFormat = this.DisplayFormat;
            return summary1;
        }

        object System.ICloneable.Clone() =>
            this.Clone();

        decimal IToDecimalConverter.ToDecimal(object value)
        {
            decimal num;
            if (!this.TryConvertToDecimal(value, (IFormatProvider) CultureInfo.CurrentCulture, out num))
            {
                this.TryConvertToDecimal(value, (IFormatProvider) CultureInfo.InvariantCulture, out num);
            }
            return num;
        }
        
        public object GetSummaryValue() => 
            (!this.IsValid ? this.GetSummaryValueCore() : this.summaryValue);
        
        private object GetSummaryValueCore()
        {
            object summaryValue;
            try
            {
                this.getValueCalling = true;
                this.Update();
                this.getValueCalling = false;
                summaryValue = this.summaryValue;
            }
            catch
            {
                this.getValueCalling = false;
                throw;
            }
            return summaryValue;
        }
        
        private void OnChanged()
        {
            this.Reset();
        }
        
        private static void OnDisplayFormatChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumnSummary) obj).OnChanged();
        }
        
        private static void OnFieldNameChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumnSummary) obj).OnChanged();
        }
        
        private static void OnIgnoreNullValuesChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumnSummary) obj).OnChanged();
        }
        
        private static void OnTypeChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((GridColumnSummary) obj).OnChanged();
        }
        
        private void ProcessSummaryValue(SummaryCalculator calculator, object value, IRowData rowData)
        {
            if (!this.IgnoreNullValues || (value != null))
            {
                calculator.ProcessValue(rowData, value, this);
            }
        }
        
        public void Reset()
        {
            this.isValid = false;
            this.OnPropertyChanged("SummaryValue");
        }
        
        private bool TryConvertToDecimal(object value, IFormatProvider provider, out decimal result)
        {
            bool flag;
            try
            {
                string str = (string) (value as string);
                if (!string.IsNullOrEmpty(str))
                {
                    flag = decimal.TryParse(str, (NumberStyles) NumberStyles.Number, provider, out result);
                }
                else
                {
                    result = Convert.ToDecimal(value, provider);
                    flag = true;
                }
            }
            catch
            {
                result = 0M;
                flag = false;
            }
            return flag;
        }
        
        private void Update()
        {
            if (!this.IsValid && (this.Controller != null))
            {
                try
                {
                    int from = Math.Max(this.RowHandleFrom, 0);
                    int rowHandleTo = this.RowHandleTo;
                    if (rowHandleTo < 0)
                    {
                        rowHandleTo = this.Controller.RowCount - 1;
                    }
                    if (this.IgnoreNullValues || !this.CalculateSummaryInstant(from, rowHandleTo))
                    {
                        this.CalculateSummaryValueCore(from, rowHandleTo);
                    }
                }
                catch
                {
                }
            }
        }
        
        internal IGridDataController Controller { get; set; }
        
        internal int RowHandleFrom { get; set; }
        
        internal int RowHandleTo { get; set; }
        
        internal InnerGroupInfo GroupInfo { get; set; }
        
        [XtraSerializableProperty]
        public string FieldName
        {
            get => 
                ((string) ((string) base.GetValue(FieldNameProperty)));
            set => 
                base.SetValue(FieldNameProperty, value);
        }
        
        [XtraSerializableProperty]
        public string DisplayFormat
        {
            get => 
                ((string) ((string) base.GetValue(DisplayFormatProperty)));
            set => 
                base.SetValue(DisplayFormatProperty, value);
        }
        
        [XtraSerializableProperty]
        public SummaryType Type
        {
            get => 
                ((SummaryType) base.GetValue(TypeProperty));
            set => 
                base.SetValue(TypeProperty, value);
        }
        
        public object SummaryValue
        {
            get
            {
                this.Update();
                return this.summaryValue;
            }
            private set
            {
                if (this.summaryValue != value)
                {
                    this.summaryValue = value;
                    this.isValid = true;
                    if (!this.getValueCalling)
                    {
                        this.OnPropertyChanged("SummaryValue");
                        this.OnPropertyChanged("IsValid");
                    }
                }
            }
        }
        
        [XtraSerializableProperty]
        public bool IgnoreNullValues
        {
            get => 
                ((bool) ((bool) base.GetValue(IgnoreNullValuesProperty)));
            set => 
                base.SetValue(IgnoreNullValuesProperty, (bool) value);
        }
        
        public bool IsValid
        {
            get => 
                this.isValid;
            private set
            {
                if (this.isValid != value)
                {
                    this.isValid = value;
                    this.OnPropertyChanged("SummaryValue");
                }
            }
        }
        
        internal bool IsGroupSummary { get; set; }
    }
}
