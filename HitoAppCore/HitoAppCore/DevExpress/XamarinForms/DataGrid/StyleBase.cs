// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid
{
    using DevExpress.XamarinForms.Core.Internal;
    using DevExpress.XamarinForms.Core.Themes;
    using System;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using Xamarin.Forms;
    
    public abstract class StyleBase : Element, IThemeElement
    {
        public static readonly BindableProperty BackgroundColorProperty;
        public static readonly BindableProperty BorderColorProperty;
        public static readonly BindableProperty FontColorProperty;
        public static readonly BindableProperty FontSizeProperty;
        public static readonly BindableProperty FontFamilyProperty;
        public static readonly BindableProperty FontAttributesProperty;
        public static readonly BindableProperty HorizontalLineThicknessProperty;
        public static readonly BindableProperty PaddingProperty;
        
        static StyleBase()
        {
            ParameterExpression expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray1 = new ParameterExpression[] { expression };
            BackgroundColorProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, Color>(Expression.Lambda<Func<StyleBase, Color>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("BackgroundColor")), expressionArray1), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray2 = new ParameterExpression[] { expression };
            BorderColorProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, Color>(Expression.Lambda<Func<StyleBase, Color>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("BorderColor")), expressionArray2), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray3 = new ParameterExpression[] { expression };
            FontColorProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, Color>(Expression.Lambda<Func<StyleBase, Color>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("FontColor")), expressionArray3), Color.Default, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray4 = new ParameterExpression[] { expression };
            FontSizeProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, double>(Expression.Lambda<Func<StyleBase, double>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("FontSize")), expressionArray4), 0.0, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray5 = new ParameterExpression[] { expression };
            FontFamilyProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, string>(Expression.Lambda<Func<StyleBase, string>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("FontFamily")), expressionArray5), string.Empty, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray6 = new ParameterExpression[] { expression };
            FontAttributesProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, Xamarin.Forms.FontAttributes>(Expression.Lambda<Func<StyleBase, Xamarin.Forms.FontAttributes>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("FontAttributes")), expressionArray6), 0, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray7 = new ParameterExpression[] { expression };
            HorizontalLineThicknessProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, double>(Expression.Lambda<Func<StyleBase, double>>((Expression) Expression.Property((Expression) expression, typeof(StyleBase).GetProperty("HorizontalLineThickness")), expressionArray7), 0.0, BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
            expression = Expression.Parameter(typeof(StyleBase), "o");
            ParameterExpression[] expressionArray8 = new ParameterExpression[] { expression };
            PaddingProperty = BindingUtils.Instance.CreateBindableProperty<StyleBase, Thickness>(Expression.Lambda<Func<StyleBase, Thickness>>((Expression)Expression.Property((Expression)expression, typeof(StyleBase).GetProperty("Padding")), expressionArray8), new Thickness(-1.0), BindingMode.OneWay, null, OnStylePropertyChanged, null, null, null);
        }

        protected StyleBase()
        {
            this.StyledElement = null;
        }
        
        protected StyleBase(IStyledElement styledElement)
        {
            this.StyledElement = styledElement;
        }
        
        internal StyleBase Clone()
        {
            StyleBase base1 = this.CreateCloneInstance();
            base1.BackgroundColor = this.BackgroundColor;
            base1.BorderColor = this.BorderColor;
            base1.FontColor = this.FontColor;
            base1.FontSize = this.FontSize;
            base1.FontFamily = this.FontFamily;
            base1.FontAttributes = this.FontAttributes;
            base1.HorizontalLineThickness = this.HorizontalLineThickness;
            base1.Padding = this.Padding;
            return base1;
        }
        
        protected abstract StyleBase CreateCloneInstance();
        protected abstract void OnStylePropertyChanged();
        protected static void OnStylePropertyChanged(BindableObject obj, object oldValue, object newValue)
        {
            ((StyleBase) obj).OnStylePropertyChanged();
        }
        
        public IStyledElement StyledElement { get; set; }
        
        public Color BackgroundColor
        {
            get => 
                ((Color) base.GetValue(BackgroundColorProperty));
            set => 
                base.SetValue(BackgroundColorProperty, value);
        }
        
        public Color BorderColor
        {
            get => 
                ((Color) base.GetValue(BorderColorProperty));
            set => 
                base.SetValue(BorderColorProperty, value);
        }
        
        public Color FontColor
        {
            get => 
                ((Color) base.GetValue(FontColorProperty));
            set => 
                base.SetValue(FontColorProperty, value);
        }
        
        public double FontSize
        {
            get => 
                ((double) ((double) base.GetValue(FontSizeProperty)));
            set => 
                base.SetValue(FontSizeProperty, (double) value);
        }
        
        public string FontFamily
        {
            get => 
                ((string) ((string) base.GetValue(FontFamilyProperty)));
            set => 
                base.SetValue(FontFamilyProperty, value);
        }
        
        public Xamarin.Forms.FontAttributes FontAttributes
        {
            get => 
                ((Xamarin.Forms.FontAttributes) base.GetValue(FontAttributesProperty));
            set => 
                base.SetValue(FontAttributesProperty, value);
        }
        
        public double HorizontalLineThickness
        {
            get => 
                ((double) ((double) base.GetValue(HorizontalLineThicknessProperty)));
            set => 
                base.SetValue(HorizontalLineThicknessProperty, (double) value);
        }
        
        public Thickness Padding
        {
            get => 
                ((Thickness) base.GetValue(PaddingProperty));
            set => 
                base.SetValue(PaddingProperty, value);
        }
    }
}
