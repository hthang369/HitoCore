// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    using System.Linq;

    internal abstract class SortingColumnManager : IDisposable
    {
        private readonly ISortGroupDataSettings dataController;
        private GridColumnCollection columns;
        
        public SortingColumnManager(ISortGroupDataSettings dataController)
        {
            this.dataController = dataController;
            this.IsProcessing = false;
        }
        
        public static SortingColumnManager Create(GridColumnCollection columns, ISortGroupDataSettings dataController, GridSortMode sortMode, bool canProcess)
        {
            SortingColumnManager manager = (sortMode != GridSortMode.Single) ? ((SortingColumnManager) new MultipleSortingColumnManager(dataController)) : ((SortingColumnManager) new SingleSortingColumnManager(dataController));
            manager.SetColumnsCollection(columns, canProcess);
            return manager;
        }
        
        private GroupDescriptor<IRowData> CreateGroupComparer()
        {
            if (this.Columns != null)
            {
                using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }
                        GridColumn current = enumerator.Current;
                        if (current.IsGrouped && current.IsVisible)
                        {
                            return current.GroupComparer;
                        }
                    }
                }
            }
            return null;
        }
        
        protected abstract SortDescriptor<IRowData> CreateSortComparer();
        public void Dispose()
        {
            this.Dispose(true);
        }
        
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                this.UnsubscribeColumnsEvents();
            }
        }
        
        private GridColumn GetFirstGroupColumn()
        {
            using (IEnumerator<GridColumn> enumerator = this.Columns.GetEnumerator())
            {
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        break;
                    }
                    GridColumn current = enumerator.Current;
                    if (current.IsGrouped)
                    {
                        return current;
                    }
                }
            }
            return null;
        }
        
        public void GroupAndSortData()
        {
            if (!this.IsProcessing)
            {
                this.dataController.Comparer = this.CreateSortComparer();
                this.dataController.GroupBy = this.CreateGroupComparer();
            }
        }
        
        private void OnColumnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            GridColumn column = sender as GridColumn;
            string s = e.PropertyName;
            switch(s)
            {
                case "IsVisible":
                    this.GroupAndSortData();
                    return;
                case "SortIndex":
                    this.SortIndexChanged(column, column.SortIndex);
                    return;
                case "SortOrder":
                    this.SortOrderChanged(column, column.SortOrder);
                    return;
                case "GroupInterval":
                case "IsGrouped":
                    if (!this.IsProcessing)
                    {
                        this.PrepareGrouping(column);
                        this.GroupAndSortData();
                    }
                    return;
                case "DisplayMember":
                case "FieldName":
                case "ValueMember":
                case "DisplayFormat":
                    this.SetColumnPropertyAccessor(column);
                    this.GroupAndSortData();
                    return;
            }
        }
        
        private void OnColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                case NotifyCollectionChangedAction.Replace:
                case NotifyCollectionChangedAction.Move:
                    this.ProcessGroupAndSort((GridColumn) e.NewItems[0], true);
                    return;
                
                case NotifyCollectionChangedAction.Remove:
                case NotifyCollectionChangedAction.Reset:
                    this.ProcessGroupAndSort(null, true);
                    return;
            }
        }
        
        private void PrepareGrouping(GridColumn column)
        {
            if (!this.IsProcessing)
            {
                this.IsProcessing = true;
                if (this.Columns != null)
                {
                    GridColumn firstGroupColumn= null;
                    GridColumn column1;
                    if ((column == null) || !column.IsGrouped)
                    {
                        column1 = null;
                    }
                    else
                    {
                        column1 = column;
                    }
                    if (column1 == null)
                    {
                        firstGroupColumn = this.GetFirstGroupColumn();
                    }
                    foreach (GridColumn column3 in this.Columns)
                    {
                        if (!column3.Equals(firstGroupColumn))
                        {
                            column3.IsGrouped = false;
                        }
                    }
                }
                this.IsProcessing = false;
            }
        }
        
        protected abstract void PrepareSorting(GridColumn addedColumn);
        private void ProcessGroupAndSort(GridColumn addedColumn, bool canProcess)
        {
            if (addedColumn != null)
            {
                this.SetColumnPropertyAccessor(addedColumn);
            }
            this.PrepareSorting(addedColumn);
            this.PrepareGrouping(addedColumn);
            if (canProcess)
            {
                this.GroupAndSortData();
            }
        }
        
        private void SetColumnPropertyAccessor(GridColumn column)
        {
            column.SetPropertyAccessor(this.dataController.GetPropertyAccessor(column.FieldName));
        }
        
        public void SetColumnsCollection(GridColumnCollection columns, bool canProcess)
        {
            this.Columns = columns;
            if (this.Columns != null)
            {
                foreach (GridColumn column in this.Columns)
                {
                    this.SetColumnPropertyAccessor(column);
                }
            }
            this.ProcessGroupAndSort(null, canProcess);
        }
        
        protected abstract void SortIndexChanged(GridColumn sender, int sortIndex);
        protected abstract void SortOrderChanged(GridColumn sender, ColumnSortOrder sortOrder);
        private void SubscribeColumnsEvents()
        {
            if (this.Columns != null)
            {
                this.Columns.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged);
                this.Columns.ColumnPropertyChanged += new PropertyChangedEventHandler(this.OnColumnPropertyChanged);
            }
        }
        
        private void UnsubscribeColumnsEvents()
        {
            if (this.Columns != null)
            {
                this.Columns.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnColumnsCollectionChanged);
                this.Columns.ColumnPropertyChanged -= new PropertyChangedEventHandler(this.OnColumnPropertyChanged);
            }
        }
        
        protected GridColumnCollection Columns
        {
            get => 
                this.columns;
            private set
            {
                if (!object.ReferenceEquals(this.columns, value))
                {
                    this.UnsubscribeColumnsEvents();
                    this.columns = value;
                    this.SubscribeColumnsEvents();
                }
            }
        }
        
        protected bool IsProcessing { get; set; }
    }
}
