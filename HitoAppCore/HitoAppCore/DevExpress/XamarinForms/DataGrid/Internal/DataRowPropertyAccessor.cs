// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using System;
    using System.Reflection;
    
    public class DataRowPropertyAccessor : PropertyAccessor
    {
        private MethodInfo getter;
        private MethodInfo setter;
        private object[] getterParameter;
        private object[] setterParameter;
        private Type propertyType;
        
        public DataRowPropertyAccessor(Type objectType, string propertyName, IPropertyTypeProvider typeProvider) : base(objectType, propertyName)
        {
            if (typeProvider != null)
            {
                Type propertyType = typeProvider.GetPropertyType(propertyName);
                this.propertyType = (propertyType != null) ? propertyType : typeof(string);
            }
            foreach (PropertyInfo info in RuntimeReflectionExtensions.GetRuntimeProperties(objectType))
            {
                if (info.Name != "Item")
                {
                    continue;
                }
                ParameterInfo[] indexParameters = info.GetIndexParameters();
                if ((indexParameters.Length == 1) && (indexParameters[0].ParameterType == typeof(string)))
                {
                    this.getter = info.GetMethod;
                    object[] objArray1 = new object[] { propertyName };
                    this.getterParameter = objArray1;
                    this.setter = info.SetMethod;
                    object[] objArray2 = new object[2];
                    objArray2[0] = propertyName;
                    this.setterParameter = objArray2;
                }
            }
        }
        
        public override object GetValue(object obj) => 
            this.getter?.Invoke(obj, this.getterParameter);
        
        public override T GetValueGeneric<T>(object obj) => 
            ((T) this.GetValue(obj));
        
        public override void SetValue(object obj, object value)
        {
            if (this.setter != null)
            {
                this.setterParameter[1] = value;
                this.setter.Invoke(obj, this.setterParameter);
            }
        }
        
        public override Type PropertyType =>
            this.propertyType;
    }
}
