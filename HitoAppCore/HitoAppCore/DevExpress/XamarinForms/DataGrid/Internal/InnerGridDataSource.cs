// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    
    public class InnerGridDataSource : IInnerGridDataSource, IGridDataSource, IGridDataSourceSupportSortCache
    {
        private readonly GridDataSourceSelection selection;
        private IGridDataSource dataSource;
        private NotifyCollectionChangedEventHandler onRowCollectionChanged;
        private NotifyCollectionChangedEventHandler onGroupCollectionChanged;
        private EventHandler onSelectionChanged;
        
        event NotifyCollectionChangedEventHandler IGridDataSource.GroupCollectionChanged
        {
            add
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onGroupCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onGroupCollectionChanged, (Delegate) value);
            }
        }
        
        event NotifyCollectionChangedEventHandler IGridDataSource.RowCollectionChanged
        {
            add
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Combine((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
            remove
            {
                this.onRowCollectionChanged = (NotifyCollectionChangedEventHandler) Delegate.Remove((Delegate) this.onRowCollectionChanged, (Delegate) value);
            }
        }
        
        public event EventHandler SelectionChanged
        {
            add
            {
                this.onSelectionChanged = (EventHandler) Delegate.Combine((Delegate) this.onSelectionChanged, (Delegate) value);
            }
            remove
            {
                this.onSelectionChanged = (EventHandler) Delegate.Remove((Delegate) this.onSelectionChanged, (Delegate) value);
            }
        }
        
        public InnerGridDataSource()
        {
            this.selection = new GridDataSourceSelection();
            this.selection.Index.Value = 0;
            this.selection.SourceIndex.Value = 0;
            this.dataSource = new EmptyGridDataSource();
        }
        
        public InnerGridDataSource(IGridDataSource dataSource) : this()
        {
            this.DataSource = dataSource;
        }
        
        public int AddNewRow(IEditableRowData rowData)
        {
            int num2;
            this.UnsubscribeDataSourceEvents();
            try
            {
                int rowHandle = this.dataSource.AddNewRow(rowData);
                num2 = this.NotifyRowAdded(rowHandle);
            }
            finally
            {
                this.SubscribeDataSourceEvents();
            }
            return num2;
        }
        
        public void BeginSort()
        {
            IGridDataSourceSupportSortCache dataSource = this.DataSource as IGridDataSourceSupportSortCache;
            if (dataSource != null)
            {
                dataSource.BeginSort();
            }
        }
        
        public IEditableRowData CreateNewRow() => 
            this.dataSource.CreateNewRow();
        
        public int DeleteRow(int rowHandle)
        {
            int num;
            this.UnsubscribeDataSourceEvents();
            try
            {
                this.NotifyRowDeleted(rowHandle);
                num = this.dataSource.DeleteRow(rowHandle);
            }
            finally
            {
                this.SubscribeDataSourceEvents();
            }
            return num;
        }
        
        IGroupInfo IGridDataSource.GetGroup(int groupHandle)
        {
            if ((this.DataSource == null) || !this.DataSource.SupportsGrouping)
            {
                return null;
            }
            return this.DataSource.GetGroup(groupHandle);
        }
        
        public void EndSort()
        {
            IGridDataSourceSupportSortCache dataSource = this.DataSource as IGridDataSourceSupportSortCache;
            if (dataSource != null)
            {
                dataSource.EndSort();
            }
        }
        
        public void ForceSetSelectedRow(int rowHandle)
        {
            this.SelectedRow = rowHandle;
        }
        
        public IList<GridColumn> GenerateColumns()
        {
            IGridColumnsProvider dataSource = this.DataSource as IGridColumnsProvider;
            return dataSource?.GenerateColumns();
        }
        
        public IRowData GetRow(int rowHandle, IRowData reuseRow) => 
            this.dataSource.GetRow(rowHandle, reuseRow);
        
        public int GetRowHandle(int sourceRowIndex)
        {
            if (this.DataSource == null)
            {
                return -2147483648;
            }
            if ((sourceRowIndex < 0) || (sourceRowIndex >= this.dataSource.RowCount))
            {
                return -2147483648;
            }
            return sourceRowIndex;
        }
        
        public int GetSourceRowHandle(int rowHandle)
        {
            if (this.DataSource == null)
            {
                return -1;
            }
            if ((rowHandle < 0) || (rowHandle >= this.dataSource.RowCount))
            {
                return -1;
            }
            IInnerGridDataSource dataSource = this.dataSource as IInnerGridDataSource;
            return ((dataSource == null) ? rowHandle : dataSource.GetSourceRowHandle(rowHandle));
        }
        
        public int NotifyRowAdded(int rowHandle)
        {
            int[] changedItems = new int[] { (int) rowHandle };
            CustomNotifyCollectionChangedEventArgs e = new CustomNotifyCollectionChangedEventArgs((NotifyCollectionChangedAction) NotifyCollectionChangedAction.Add, changedItems, rowHandle) {
                RowHandle = rowHandle
            };
            this.RaiseRowCollectionChanged(e);
            return e.RowHandle;
        }
        
        public int NotifyRowDeleted(int rowHandle)
        {
            int[] changedItems = new int[] { (int) rowHandle };
            CustomNotifyCollectionChangedEventArgs e = new CustomNotifyCollectionChangedEventArgs((NotifyCollectionChangedAction) NotifyCollectionChangedAction.Remove, changedItems, rowHandle) {
                RowHandle = rowHandle
            };
            this.RaiseRowCollectionChanged(e);
            return e.RowHandle;
        }
        
        public int NotifyRowReplaced(int rowHandle)
        {
            int[] newItems = new int[] { (int) rowHandle };
            int[] oldItems = new int[] { (int) rowHandle };
            CustomNotifyCollectionChangedEventArgs e = new CustomNotifyCollectionChangedEventArgs((NotifyCollectionChangedAction) NotifyCollectionChangedAction.Replace, newItems, oldItems, rowHandle) {
                RowHandle = rowHandle
            };
            this.RaiseRowCollectionChanged(e);
            return e.RowHandle;
        }
        
        private void OnDataSourceGroupCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.RaiseGroupCollectionChanged(CustomNotifyCollectionChangedEventArgs.Create(e));
        }
        
        private void OnDataSourceRowCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.RaiseRowCollectionChanged(CustomNotifyCollectionChangedEventArgs.Create(e));
        }
        
        public void PopulateColumnValues<T>(int[] rowHandles, string fieldName, T[] values, IFieldValueVisitor fieldValueVisitor)
        {
            IRowData reuseRow = null;
            int length = rowHandles.Length;
            if ((fieldValueVisitor == null) || (fieldValueVisitor.ActualSortMode != ColumnSortMode.DisplayText))
            {
                for (int i = 0; i < length; i++)
                {
                    reuseRow = this.GetRow(rowHandles[i], reuseRow);
                    values[i] = reuseRow.GetFieldValueGeneric<T>(fieldName);
                }
            }
            else
            {
                for (int i = 0; i < length; i++)
                {
                    reuseRow = this.GetRow(rowHandles[i], reuseRow);
                    values[i] = (T) fieldValueVisitor.GetFormattedFieldValue(reuseRow);
                }
            }
        }
        
        public void PopulateSourceRowHandles(int[] rowHandles)
        {
        }
        
        protected virtual void RaiseGroupCollectionChanged(CustomNotifyCollectionChangedEventArgs e)
        {
            if (this.onGroupCollectionChanged != null)
            {
                this.onGroupCollectionChanged(this, e);
            }
        }
        
        protected virtual void RaiseRowCollectionChanged(CustomNotifyCollectionChangedEventArgs e)
        {
            if (this.onRowCollectionChanged != null)
            {
                this.onRowCollectionChanged(this, e);
            }
        }
        
        protected virtual void RaiseSelectionChanged()
        {
            if (this.onSelectionChanged != null)
            {
                this.onSelectionChanged(this, EventArgs.Empty);
            }
        }
        
        public void RefreshData()
        {
        }
        
        public void ResetSelection()
        {
            this.SelectedRow = 0;
        }
        
        private void SubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged += new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
                this.DataSource.GroupCollectionChanged += new NotifyCollectionChangedEventHandler(this.OnDataSourceGroupCollectionChanged);
            }
        }
        
        private void UnsubscribeDataSourceEvents()
        {
            if (this.DataSource != null)
            {
                this.DataSource.RowCollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnDataSourceRowCollectionChanged);
                this.DataSource.GroupCollectionChanged -= new NotifyCollectionChangedEventHandler(this.OnDataSourceGroupCollectionChanged);
            }
        }
        
        public int SelectedRow
        {
            get => 
                this.selection.Index.Value;
            set
            {
                this.selection.Index.Value = value;
                this.selection.SourceIndex.Value = value;
                if (this.DataSource != null)
                {
                    this.DataSource.SelectedRow = value;
                }
                this.RaiseSelectionChanged();
            }
        }
        
        public Type ActualDataSourceType =>
            ((this.DataSource == null) ? base.GetType() : this.DataSource.ActualDataSourceType);
        
        public IGridDataSource DataSource
        {
            get => 
                this.dataSource;
            set
            {
                if (!object.ReferenceEquals(this.dataSource, value))
                {
                    if (value == null)
                    {
                        value = new EmptyGridDataSource();
                    }
                    this.UnsubscribeDataSourceEvents();
                    this.dataSource = value;
                    this.dataSource.SelectedRow = this.SelectedRow;
                    this.SubscribeDataSourceEvents();
                }
            }
        }
        
        public GridDataSourceSelection Selection =>
            this.selection;
        
        public bool SupportsSorting =>
            this.dataSource.SupportsSorting;
        
        public bool SupportsGrouping =>
            this.dataSource.SupportsGrouping;
        
        public bool SupportsFiltering =>
            this.dataSource.SupportsFiltering;
        
        public bool IsRowCountReady =>
            true;
        
        public bool IsGetRowReady =>
            true;
        
        public int RowCount =>
            this.dataSource.RowCount;
        
        int IGridDataSource.GroupCount
        {
            get
            {
                if ((this.DataSource == null) || !this.DataSource.SupportsGrouping)
                {
                    return 0;
                }
                return this.DataSource.GroupCount;
            }
        }
    }
}
