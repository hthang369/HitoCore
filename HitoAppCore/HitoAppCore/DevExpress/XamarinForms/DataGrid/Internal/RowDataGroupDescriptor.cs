// Generated by .NET Reflector from D:\workspace\mobile\hito-mobile\HitoApp\lampart_lib_dll\DevExpress.XamarinForms.Grid.dll
namespace DevExpress.XamarinForms.DataGrid.Internal
{
    using DevExpress.Data;
    using DevExpress.XamarinForms.DataGrid;
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    
    public class RowDataGroupDescriptor : GroupDescriptor<IRowData>
    {
        private ColumnGroupInterval groupInterval;
        private TransformedRowData firstRowData;
        private TransformedRowData secondRowData;
        
        public RowDataGroupDescriptor()
        {
            this.UpdateRowDatas();
        }
        
        public bool CanChangeDataType() => 
            ((this.GroupInterval == ColumnGroupInterval.Default) || ((this.GroupInterval == ColumnGroupInterval.Alphabetical) || ((this.GroupInterval == ColumnGroupInterval.DisplayText) || (this.GroupInterval == ColumnGroupInterval.DateRange))));
        
        public override int Compare(IRowData firstValue, IRowData secondValue)
        {
            if (base.Comparer == null)
            {
                throw new InvalidOperationException();
            }
            RowDataGroupDescriptor descriptor = this;
            lock (descriptor)
            {
                this.firstRowData.RowData = firstValue;
                this.secondRowData.RowData = secondValue;
                return base.Comparer.Compare(this.firstRowData, this.secondRowData);
            }
        }
        
        protected override IComparer<IRowData> CreateComparer()
        {
            GridColumn.IColumnComparer ascendingComparer = this.AscendingComparer as GridColumn.IColumnComparer;
            if (ascendingComparer != null)
            {
                ascendingComparer.UseGenericMethods = !this.CanChangeDataType();
            }
            return base.CreateComparer();
        }
        
        private TransformedRowData CreateRowData()
        {
            switch (this.GroupInterval)
            {
                case ColumnGroupInterval.Date:
                    return new DateRowData();
                
                case ColumnGroupInterval.DateMonth:
                    return new DateMonthRowData();
                
                case ColumnGroupInterval.DateQuarter:
                    return new DateQuarterRowData();
                
                case ColumnGroupInterval.DateYear:
                    return new DateYearRowData();
                
                case ColumnGroupInterval.DateRange:
                    return new DateRangeRowData();
                
                case ColumnGroupInterval.Alphabetical:
                    return new AlphabeticalRowData();
                
                case ColumnGroupInterval.DisplayText:
                    return new DisplayTextRowData(this.DisplayFormat);
            }
            return new ValueRowData();
        }
        
        public override bool Equals(object obj)
        {
            if (!base.Equals(obj))
            {
                return false;
            }
            RowDataGroupDescriptor descriptor = obj as RowDataGroupDescriptor;
            return ((descriptor != null) ? ((this.GroupInterval == descriptor.GroupInterval) && (this.DisplayFormat == descriptor.DisplayFormat)) : false);
        }
        
        public override object GetGroupValue(IRowData rowData)
        {
            if ((base.SortMode == ColumnSortMode.DisplayText) && (base.FieldValueVisitor != null))
            {
                object formattedFieldValue = base.FieldValueVisitor.GetFormattedFieldValue(rowData);
                if (formattedFieldValue != null)
                {
                    return formattedFieldValue;
                }
            }
            RowDataGroupDescriptor descriptor = this;
            lock (descriptor)
            {
                this.firstRowData.RowData = rowData;
                return this.firstRowData.GetGroupValue(this.firstRowData.GetFieldValue(base.FieldName));
            }
        }
        
        public override int GetHashCode() => 
            ((base.GetHashCode() ^ this.GroupInterval.GetHashCode()) ^ (string.IsNullOrEmpty(this.DisplayFormat) ? 0 : this.DisplayFormat.GetHashCode()));
        
        private void UpdateRowDatas()
        {
            this.firstRowData = this.CreateRowData();
            this.secondRowData = this.CreateRowData();
        }
        
        public string DisplayFormat { get; set; }
        
        public ColumnGroupInterval GroupInterval
        {
            get => 
                this.groupInterval;
            set
            {
                if (this.groupInterval != value)
                {
                    this.groupInterval = value;
                    this.UpdateRowDatas();
                }
            }
        }
    }
}
